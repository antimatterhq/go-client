// Code generated by ogen, DO NOT EDIT.

package spec

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Detailed information about an API key identity provider.
// Ref: #/components/schemas/APIKeyDomainIdentityProviderDetails
type APIKeyDomainIdentityProviderDetails struct{}

type APIKeyDomainIdentityProviderDetailsType string

const (
	APIKeyDomainIdentityProviderDetailsTypeAPIKey APIKeyDomainIdentityProviderDetailsType = "APIKey"
)

// AllValues returns all APIKeyDomainIdentityProviderDetailsType values.
func (APIKeyDomainIdentityProviderDetailsType) AllValues() []APIKeyDomainIdentityProviderDetailsType {
	return []APIKeyDomainIdentityProviderDetailsType{
		APIKeyDomainIdentityProviderDetailsTypeAPIKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APIKeyDomainIdentityProviderDetailsType) MarshalText() ([]byte, error) {
	switch s {
	case APIKeyDomainIdentityProviderDetailsTypeAPIKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APIKeyDomainIdentityProviderDetailsType) UnmarshalText(data []byte) error {
	switch APIKeyDomainIdentityProviderDetailsType(data) {
	case APIKeyDomainIdentityProviderDetailsTypeAPIKey:
		*s = APIKeyDomainIdentityProviderDetailsTypeAPIKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The AWS service account information and details required to use the provided AWS hosted encryption
// keys for cryptographic operations.
// Ref: #/components/schemas/AWSServiceAccountKeyInfo
type AWSServiceAccountKeyInfo struct {
	// The AWS access key ID.
	AccessKeyID string `json:"accessKeyID"`
	// The access key ID's secret access key.
	SecretAccessKey string `json:"secretAccessKey"`
	// The key ARN to be used.
	KeyARN string `json:"keyARN"`
}

// GetAccessKeyID returns the value of AccessKeyID.
func (s *AWSServiceAccountKeyInfo) GetAccessKeyID() string {
	return s.AccessKeyID
}

// GetSecretAccessKey returns the value of SecretAccessKey.
func (s *AWSServiceAccountKeyInfo) GetSecretAccessKey() string {
	return s.SecretAccessKey
}

// GetKeyARN returns the value of KeyARN.
func (s *AWSServiceAccountKeyInfo) GetKeyARN() string {
	return s.KeyARN
}

// SetAccessKeyID sets the value of AccessKeyID.
func (s *AWSServiceAccountKeyInfo) SetAccessKeyID(val string) {
	s.AccessKeyID = val
}

// SetSecretAccessKey sets the value of SecretAccessKey.
func (s *AWSServiceAccountKeyInfo) SetSecretAccessKey(val string) {
	s.SecretAccessKey = val
}

// SetKeyARN sets the value of KeyARN.
func (s *AWSServiceAccountKeyInfo) SetKeyARN(val string) {
	s.KeyARN = val
}

type AWSServiceAccountKeyInfoProviderName string

const (
	AWSServiceAccountKeyInfoProviderNameAWSSa AWSServiceAccountKeyInfoProviderName = "aws_sa"
)

// AllValues returns all AWSServiceAccountKeyInfoProviderName values.
func (AWSServiceAccountKeyInfoProviderName) AllValues() []AWSServiceAccountKeyInfoProviderName {
	return []AWSServiceAccountKeyInfoProviderName{
		AWSServiceAccountKeyInfoProviderNameAWSSa,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AWSServiceAccountKeyInfoProviderName) MarshalText() ([]byte, error) {
	switch s {
	case AWSServiceAccountKeyInfoProviderNameAWSSa:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AWSServiceAccountKeyInfoProviderName) UnmarshalText(data []byte) error {
	switch AWSServiceAccountKeyInfoProviderName(data) {
	case AWSServiceAccountKeyInfoProviderNameAWSSa:
		*s = AWSServiceAccountKeyInfoProviderNameAWSSa
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An individual capsule data-plane log entry. If adding a new read log entry, the session should  be
// omitted (the server will fill it in).
// Ref: #/components/schemas/AccessLogEntry
type AccessLogEntry struct {
	ID LogEntryID `json:"id"`
	// The time of a read operation, in UTC.
	Time      time.Time               `json:"time" db:"-"`
	Domain    DomainID                `json:"domain"`
	Capsule   CapsuleID               `json:"capsule"`
	Operation AccessLogEntryOperation `json:"operation"`
	Session   SessionID               `json:"session"`
	// The location URL that this capsule resided in during the operation, if known.
	Location OptString `json:"location"`
	// Information available if the operation is of type "create".
	CreateInfo OptAccessLogEntryCreateInfo `json:"createInfo"`
	// Information available if the operation is of type "open".
	OpenInfo OptAccessLogEntryOpenInfo `json:"openInfo"`
	// Information available if the operation is of type "read". allowedTags are those that were allowed
	// without transformation during the read. redactedTags are those that were redacted during the read.
	// tokenizedTags are those that were tokenized during the read.
	ReadInfo OptAccessLogEntryReadInfo `json:"readInfo"`
}

// GetID returns the value of ID.
func (s *AccessLogEntry) GetID() LogEntryID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *AccessLogEntry) GetTime() time.Time {
	return s.Time
}

// GetDomain returns the value of Domain.
func (s *AccessLogEntry) GetDomain() DomainID {
	return s.Domain
}

// GetCapsule returns the value of Capsule.
func (s *AccessLogEntry) GetCapsule() CapsuleID {
	return s.Capsule
}

// GetOperation returns the value of Operation.
func (s *AccessLogEntry) GetOperation() AccessLogEntryOperation {
	return s.Operation
}

// GetSession returns the value of Session.
func (s *AccessLogEntry) GetSession() SessionID {
	return s.Session
}

// GetLocation returns the value of Location.
func (s *AccessLogEntry) GetLocation() OptString {
	return s.Location
}

// GetCreateInfo returns the value of CreateInfo.
func (s *AccessLogEntry) GetCreateInfo() OptAccessLogEntryCreateInfo {
	return s.CreateInfo
}

// GetOpenInfo returns the value of OpenInfo.
func (s *AccessLogEntry) GetOpenInfo() OptAccessLogEntryOpenInfo {
	return s.OpenInfo
}

// GetReadInfo returns the value of ReadInfo.
func (s *AccessLogEntry) GetReadInfo() OptAccessLogEntryReadInfo {
	return s.ReadInfo
}

// SetID sets the value of ID.
func (s *AccessLogEntry) SetID(val LogEntryID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *AccessLogEntry) SetTime(val time.Time) {
	s.Time = val
}

// SetDomain sets the value of Domain.
func (s *AccessLogEntry) SetDomain(val DomainID) {
	s.Domain = val
}

// SetCapsule sets the value of Capsule.
func (s *AccessLogEntry) SetCapsule(val CapsuleID) {
	s.Capsule = val
}

// SetOperation sets the value of Operation.
func (s *AccessLogEntry) SetOperation(val AccessLogEntryOperation) {
	s.Operation = val
}

// SetSession sets the value of Session.
func (s *AccessLogEntry) SetSession(val SessionID) {
	s.Session = val
}

// SetLocation sets the value of Location.
func (s *AccessLogEntry) SetLocation(val OptString) {
	s.Location = val
}

// SetCreateInfo sets the value of CreateInfo.
func (s *AccessLogEntry) SetCreateInfo(val OptAccessLogEntryCreateInfo) {
	s.CreateInfo = val
}

// SetOpenInfo sets the value of OpenInfo.
func (s *AccessLogEntry) SetOpenInfo(val OptAccessLogEntryOpenInfo) {
	s.OpenInfo = val
}

// SetReadInfo sets the value of ReadInfo.
func (s *AccessLogEntry) SetReadInfo(val OptAccessLogEntryReadInfo) {
	s.ReadInfo = val
}

// Information available if the operation is of type "create".
type AccessLogEntryCreateInfo struct {
	WriteContext WriteContextReference `json:"writeContext"`
}

// GetWriteContext returns the value of WriteContext.
func (s *AccessLogEntryCreateInfo) GetWriteContext() WriteContextReference {
	return s.WriteContext
}

// SetWriteContext sets the value of WriteContext.
func (s *AccessLogEntryCreateInfo) SetWriteContext(val WriteContextReference) {
	s.WriteContext = val
}

// Information available if the operation is of type "open".
type AccessLogEntryOpenInfo struct {
	ReadContext ReadContextReference `json:"readContext"`
}

// GetReadContext returns the value of ReadContext.
func (s *AccessLogEntryOpenInfo) GetReadContext() ReadContextReference {
	return s.ReadContext
}

// SetReadContext sets the value of ReadContext.
func (s *AccessLogEntryOpenInfo) SetReadContext(val ReadContextReference) {
	s.ReadContext = val
}

type AccessLogEntryOperation string

const (
	AccessLogEntryOperationOpen   AccessLogEntryOperation = "open"
	AccessLogEntryOperationRead   AccessLogEntryOperation = "read"
	AccessLogEntryOperationCreate AccessLogEntryOperation = "create"
)

// AllValues returns all AccessLogEntryOperation values.
func (AccessLogEntryOperation) AllValues() []AccessLogEntryOperation {
	return []AccessLogEntryOperation{
		AccessLogEntryOperationOpen,
		AccessLogEntryOperationRead,
		AccessLogEntryOperationCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccessLogEntryOperation) MarshalText() ([]byte, error) {
	switch s {
	case AccessLogEntryOperationOpen:
		return []byte(s), nil
	case AccessLogEntryOperationRead:
		return []byte(s), nil
	case AccessLogEntryOperationCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccessLogEntryOperation) UnmarshalText(data []byte) error {
	switch AccessLogEntryOperation(data) {
	case AccessLogEntryOperationOpen:
		*s = AccessLogEntryOperationOpen
		return nil
	case AccessLogEntryOperationRead:
		*s = AccessLogEntryOperationRead
		return nil
	case AccessLogEntryOperationCreate:
		*s = AccessLogEntryOperationCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information available if the operation is of type "read". allowedTags are those that were allowed
// without transformation during the read. redactedTags are those that were redacted during the read.
// tokenizedTags are those that were tokenized during the read.
type AccessLogEntryReadInfo struct {
	// The client-specified parameters representing the user on whose behalf this read is being carried
	// out. Valid only for operation = read.
	Parameters    AccessLogEntryReadInfoParameters `json:"parameters"`
	ReadContext   ReadContextReference             `json:"readContext"`
	AllowedTags   TagSummary                       `json:"allowedTags"`
	RedactedTags  TagSummary                       `json:"redactedTags"`
	TokenizedTags TagSummary                       `json:"tokenizedTags"`
	// The number of records returned by the read, including those with allowed, redacted or tokenized
	// spans.
	ReturnedRecords int `json:"returnedRecords"`
	// The number of records that were completely filtered out during the read operation.
	FilteredRecords int `json:"filteredRecords"`
}

// GetParameters returns the value of Parameters.
func (s *AccessLogEntryReadInfo) GetParameters() AccessLogEntryReadInfoParameters {
	return s.Parameters
}

// GetReadContext returns the value of ReadContext.
func (s *AccessLogEntryReadInfo) GetReadContext() ReadContextReference {
	return s.ReadContext
}

// GetAllowedTags returns the value of AllowedTags.
func (s *AccessLogEntryReadInfo) GetAllowedTags() TagSummary {
	return s.AllowedTags
}

// GetRedactedTags returns the value of RedactedTags.
func (s *AccessLogEntryReadInfo) GetRedactedTags() TagSummary {
	return s.RedactedTags
}

// GetTokenizedTags returns the value of TokenizedTags.
func (s *AccessLogEntryReadInfo) GetTokenizedTags() TagSummary {
	return s.TokenizedTags
}

// GetReturnedRecords returns the value of ReturnedRecords.
func (s *AccessLogEntryReadInfo) GetReturnedRecords() int {
	return s.ReturnedRecords
}

// GetFilteredRecords returns the value of FilteredRecords.
func (s *AccessLogEntryReadInfo) GetFilteredRecords() int {
	return s.FilteredRecords
}

// SetParameters sets the value of Parameters.
func (s *AccessLogEntryReadInfo) SetParameters(val AccessLogEntryReadInfoParameters) {
	s.Parameters = val
}

// SetReadContext sets the value of ReadContext.
func (s *AccessLogEntryReadInfo) SetReadContext(val ReadContextReference) {
	s.ReadContext = val
}

// SetAllowedTags sets the value of AllowedTags.
func (s *AccessLogEntryReadInfo) SetAllowedTags(val TagSummary) {
	s.AllowedTags = val
}

// SetRedactedTags sets the value of RedactedTags.
func (s *AccessLogEntryReadInfo) SetRedactedTags(val TagSummary) {
	s.RedactedTags = val
}

// SetTokenizedTags sets the value of TokenizedTags.
func (s *AccessLogEntryReadInfo) SetTokenizedTags(val TagSummary) {
	s.TokenizedTags = val
}

// SetReturnedRecords sets the value of ReturnedRecords.
func (s *AccessLogEntryReadInfo) SetReturnedRecords(val int) {
	s.ReturnedRecords = val
}

// SetFilteredRecords sets the value of FilteredRecords.
func (s *AccessLogEntryReadInfo) SetFilteredRecords(val int) {
	s.FilteredRecords = val
}

// The client-specified parameters representing the user on whose behalf this read is being carried
// out. Valid only for operation = read.
type AccessLogEntryReadInfoParameters map[string]string

func (s *AccessLogEntryReadInfoParameters) init() AccessLogEntryReadInfoParameters {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// The results for a query of the capsule access log.
// Ref: #/components/schemas/AccessLogResults
type AccessLogResults struct {
	Results []AccessLogEntry `json:"results"`
	// If true, there are more results. Query again with start_from_id equal to  the last result's ID to
	// get more results.
	HasMore bool `json:"has_more"`
}

// GetResults returns the value of Results.
func (s *AccessLogResults) GetResults() []AccessLogEntry {
	return s.Results
}

// GetHasMore returns the value of HasMore.
func (s *AccessLogResults) GetHasMore() bool {
	return s.HasMore
}

// SetResults sets the value of Results.
func (s *AccessLogResults) SetResults(val []AccessLogEntry) {
	s.Results = val
}

// SetHasMore sets the value of HasMore.
func (s *AccessLogResults) SetHasMore(val bool) {
	s.HasMore = val
}

func (*AccessLogResults) domainQueryAccessLogRes()              {}
func (*AccessLogResults) domainQueryAccessLogSingleCapsuleRes() {}

// The stored key ID to use as the active root encryption key.
// Ref: #/components/schemas/ActiveRootEncryptionKeyID
type ActiveRootEncryptionKeyID struct {
	KeyID RootEncryptionKeyID `json:"keyID"`
}

// GetKeyID returns the value of KeyID.
func (s *ActiveRootEncryptionKeyID) GetKeyID() RootEncryptionKeyID {
	return s.KeyID
}

// SetKeyID sets the value of KeyID.
func (s *ActiveRootEncryptionKeyID) SetKeyID(val RootEncryptionKeyID) {
	s.KeyID = val
}

// A request to add a capsule log entry.
// Ref: #/components/schemas/AddCapsuleLogEntryRequest
type AddCapsuleLogEntryRequest struct {
	OpenToken CapsuleOperationToken `json:"openToken"`
	Entry     NewAccessLogEntry     `json:"entry"`
}

// GetOpenToken returns the value of OpenToken.
func (s *AddCapsuleLogEntryRequest) GetOpenToken() CapsuleOperationToken {
	return s.OpenToken
}

// GetEntry returns the value of Entry.
func (s *AddCapsuleLogEntryRequest) GetEntry() NewAccessLogEntry {
	return s.Entry
}

// SetOpenToken sets the value of OpenToken.
func (s *AddCapsuleLogEntryRequest) SetOpenToken(val CapsuleOperationToken) {
	s.OpenToken = val
}

// SetEntry sets the value of Entry.
func (s *AddCapsuleLogEntryRequest) SetEntry(val NewAccessLogEntry) {
	s.Entry = val
}

// A request to add read contexts.
// Ref: #/components/schemas/AddReadContext
type AddReadContext struct {
	// A short, single sentence description of this read context.
	Summary string `json:"summary"`
	// A longer form description of this read context.
	Description string `json:"description"`
	// If true, skip creation of audit log events on read.
	DisableReadLogging OptBool `json:"disableReadLogging"`
	// Number of seconds for which cached encryption keys will be
	// considered valid by the client.
	KeyCacheTTL    OptInt32                  `json:"keyCacheTTL"`
	RequiredHooks  []ReadContextRequiredHook `json:"requiredHooks"`
	ReadParameters []ReadContextParameter    `json:"readParameters"`
}

// GetSummary returns the value of Summary.
func (s *AddReadContext) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *AddReadContext) GetDescription() string {
	return s.Description
}

// GetDisableReadLogging returns the value of DisableReadLogging.
func (s *AddReadContext) GetDisableReadLogging() OptBool {
	return s.DisableReadLogging
}

// GetKeyCacheTTL returns the value of KeyCacheTTL.
func (s *AddReadContext) GetKeyCacheTTL() OptInt32 {
	return s.KeyCacheTTL
}

// GetRequiredHooks returns the value of RequiredHooks.
func (s *AddReadContext) GetRequiredHooks() []ReadContextRequiredHook {
	return s.RequiredHooks
}

// GetReadParameters returns the value of ReadParameters.
func (s *AddReadContext) GetReadParameters() []ReadContextParameter {
	return s.ReadParameters
}

// SetSummary sets the value of Summary.
func (s *AddReadContext) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *AddReadContext) SetDescription(val string) {
	s.Description = val
}

// SetDisableReadLogging sets the value of DisableReadLogging.
func (s *AddReadContext) SetDisableReadLogging(val OptBool) {
	s.DisableReadLogging = val
}

// SetKeyCacheTTL sets the value of KeyCacheTTL.
func (s *AddReadContext) SetKeyCacheTTL(val OptInt32) {
	s.KeyCacheTTL = val
}

// SetRequiredHooks sets the value of RequiredHooks.
func (s *AddReadContext) SetRequiredHooks(val []ReadContextRequiredHook) {
	s.RequiredHooks = val
}

// SetReadParameters sets the value of ReadParameters.
func (s *AddReadContext) SetReadParameters(val []ReadContextParameter) {
	s.ReadParameters = val
}

// Information for adding/updating a write context.
// Ref: #/components/schemas/AddWriteContext
type AddWriteContext struct {
	// A short, single sentence description of this write context.
	Summary string `json:"summary"`
	// A longer form description of this write context.
	Description string                 `json:"description"`
	Config      WriteContextConfigInfo `json:"config"`
}

// GetSummary returns the value of Summary.
func (s *AddWriteContext) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *AddWriteContext) GetDescription() string {
	return s.Description
}

// GetConfig returns the value of Config.
func (s *AddWriteContext) GetConfig() WriteContextConfigInfo {
	return s.Config
}

// SetSummary sets the value of Summary.
func (s *AddWriteContext) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *AddWriteContext) SetDescription(val string) {
	s.Description = val
}

// SetConfig sets the value of Config.
func (s *AddWriteContext) SetConfig(val WriteContextConfigInfo) {
	s.Config = val
}

// The details required to use an AWS KMS root encryption key that has been  delegated to
// Antimatter's AWS account. This will use Antimatter's service  account during set up of the AWS
// client.
// Ref: #/components/schemas/AntimatterDelegatedAWSKeyInfo
type AntimatterDelegatedAWSKeyInfo struct {
	// The key ARN to be used.
	KeyARN string `json:"keyARN"`
}

// GetKeyARN returns the value of KeyARN.
func (s *AntimatterDelegatedAWSKeyInfo) GetKeyARN() string {
	return s.KeyARN
}

// SetKeyARN sets the value of KeyARN.
func (s *AntimatterDelegatedAWSKeyInfo) SetKeyARN(val string) {
	s.KeyARN = val
}

type AntimatterDelegatedAWSKeyInfoProviderName string

const (
	AntimatterDelegatedAWSKeyInfoProviderNameAWSAm AntimatterDelegatedAWSKeyInfoProviderName = "aws_am"
)

// AllValues returns all AntimatterDelegatedAWSKeyInfoProviderName values.
func (AntimatterDelegatedAWSKeyInfoProviderName) AllValues() []AntimatterDelegatedAWSKeyInfoProviderName {
	return []AntimatterDelegatedAWSKeyInfoProviderName{
		AntimatterDelegatedAWSKeyInfoProviderNameAWSAm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AntimatterDelegatedAWSKeyInfoProviderName) MarshalText() ([]byte, error) {
	switch s {
	case AntimatterDelegatedAWSKeyInfoProviderNameAWSAm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AntimatterDelegatedAWSKeyInfoProviderName) UnmarshalText(data []byte) error {
	switch AntimatterDelegatedAWSKeyInfoProviderName(data) {
	case AntimatterDelegatedAWSKeyInfoProviderNameAWSAm:
		*s = AntimatterDelegatedAWSKeyInfoProviderNameAWSAm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The details required to use an GCP Key root encryption key that has been  delegated to
// Antimatter's GCP service account. This will use Antimatter's  service account during set up of the
// GCP client.
// Ref: #/components/schemas/AntimatterDelegatedGCPKeyInfo
type AntimatterDelegatedGCPKeyInfo struct {
	// The Google project ID.
	ProjectID string `json:"projectID"`
	// Location of Google keyring.
	Location string `json:"location"`
	// The Google keyring's ID at location.
	KeyringID string `json:"keyringID"`
	// The key ID that should be used in the Google keyring.
	KeyID string `json:"keyID"`
}

// GetProjectID returns the value of ProjectID.
func (s *AntimatterDelegatedGCPKeyInfo) GetProjectID() string {
	return s.ProjectID
}

// GetLocation returns the value of Location.
func (s *AntimatterDelegatedGCPKeyInfo) GetLocation() string {
	return s.Location
}

// GetKeyringID returns the value of KeyringID.
func (s *AntimatterDelegatedGCPKeyInfo) GetKeyringID() string {
	return s.KeyringID
}

// GetKeyID returns the value of KeyID.
func (s *AntimatterDelegatedGCPKeyInfo) GetKeyID() string {
	return s.KeyID
}

// SetProjectID sets the value of ProjectID.
func (s *AntimatterDelegatedGCPKeyInfo) SetProjectID(val string) {
	s.ProjectID = val
}

// SetLocation sets the value of Location.
func (s *AntimatterDelegatedGCPKeyInfo) SetLocation(val string) {
	s.Location = val
}

// SetKeyringID sets the value of KeyringID.
func (s *AntimatterDelegatedGCPKeyInfo) SetKeyringID(val string) {
	s.KeyringID = val
}

// SetKeyID sets the value of KeyID.
func (s *AntimatterDelegatedGCPKeyInfo) SetKeyID(val string) {
	s.KeyID = val
}

type AntimatterDelegatedGCPKeyInfoProviderName string

const (
	AntimatterDelegatedGCPKeyInfoProviderNameGcpAm AntimatterDelegatedGCPKeyInfoProviderName = "gcp_am"
)

// AllValues returns all AntimatterDelegatedGCPKeyInfoProviderName values.
func (AntimatterDelegatedGCPKeyInfoProviderName) AllValues() []AntimatterDelegatedGCPKeyInfoProviderName {
	return []AntimatterDelegatedGCPKeyInfoProviderName{
		AntimatterDelegatedGCPKeyInfoProviderNameGcpAm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AntimatterDelegatedGCPKeyInfoProviderName) MarshalText() ([]byte, error) {
	switch s {
	case AntimatterDelegatedGCPKeyInfoProviderNameGcpAm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AntimatterDelegatedGCPKeyInfoProviderName) UnmarshalText(data []byte) error {
	switch AntimatterDelegatedGCPKeyInfoProviderName(data) {
	case AntimatterDelegatedGCPKeyInfoProviderNameGcpAm:
		*s = AntimatterDelegatedGCPKeyInfoProviderNameGcpAm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AvailableDelegatedRootEncryptionKeyProvider
type AvailableDelegatedRootEncryptionKeyProvider struct {
	Name           string `json:"name"`
	ShortName      string `json:"shortName"`
	Description    string `json:"description"`
	AccountDetails string `json:"accountDetails"`
}

// GetName returns the value of Name.
func (s *AvailableDelegatedRootEncryptionKeyProvider) GetName() string {
	return s.Name
}

// GetShortName returns the value of ShortName.
func (s *AvailableDelegatedRootEncryptionKeyProvider) GetShortName() string {
	return s.ShortName
}

// GetDescription returns the value of Description.
func (s *AvailableDelegatedRootEncryptionKeyProvider) GetDescription() string {
	return s.Description
}

// GetAccountDetails returns the value of AccountDetails.
func (s *AvailableDelegatedRootEncryptionKeyProvider) GetAccountDetails() string {
	return s.AccountDetails
}

// SetName sets the value of Name.
func (s *AvailableDelegatedRootEncryptionKeyProvider) SetName(val string) {
	s.Name = val
}

// SetShortName sets the value of ShortName.
func (s *AvailableDelegatedRootEncryptionKeyProvider) SetShortName(val string) {
	s.ShortName = val
}

// SetDescription sets the value of Description.
func (s *AvailableDelegatedRootEncryptionKeyProvider) SetDescription(val string) {
	s.Description = val
}

// SetAccountDetails sets the value of AccountDetails.
func (s *AvailableDelegatedRootEncryptionKeyProvider) SetAccountDetails(val string) {
	s.AccountDetails = val
}

type AvailableDelegatedRootEncryptionKeyProviderType string

const (
	AvailableDelegatedRootEncryptionKeyProviderTypeDelegatedRootEncryptionKeyProvider AvailableDelegatedRootEncryptionKeyProviderType = "DelegatedRootEncryptionKeyProvider"
)

// AllValues returns all AvailableDelegatedRootEncryptionKeyProviderType values.
func (AvailableDelegatedRootEncryptionKeyProviderType) AllValues() []AvailableDelegatedRootEncryptionKeyProviderType {
	return []AvailableDelegatedRootEncryptionKeyProviderType{
		AvailableDelegatedRootEncryptionKeyProviderTypeDelegatedRootEncryptionKeyProvider,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AvailableDelegatedRootEncryptionKeyProviderType) MarshalText() ([]byte, error) {
	switch s {
	case AvailableDelegatedRootEncryptionKeyProviderTypeDelegatedRootEncryptionKeyProvider:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AvailableDelegatedRootEncryptionKeyProviderType) UnmarshalText(data []byte) error {
	switch AvailableDelegatedRootEncryptionKeyProviderType(data) {
	case AvailableDelegatedRootEncryptionKeyProviderTypeDelegatedRootEncryptionKeyProvider:
		*s = AvailableDelegatedRootEncryptionKeyProviderTypeDelegatedRootEncryptionKeyProvider
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AvailableRootEncryptionKeyProviders
type AvailableRootEncryptionKeyProviders struct {
	Providers []AvailableRootEncryptionKeyProvidersProvidersItem `json:"providers"`
}

// GetProviders returns the value of Providers.
func (s *AvailableRootEncryptionKeyProviders) GetProviders() []AvailableRootEncryptionKeyProvidersProvidersItem {
	return s.Providers
}

// SetProviders sets the value of Providers.
func (s *AvailableRootEncryptionKeyProviders) SetProviders(val []AvailableRootEncryptionKeyProvidersProvidersItem) {
	s.Providers = val
}

func (*AvailableRootEncryptionKeyProviders) domainGetExternalRootEncryptionKeyProvidersRes() {}

// AvailableRootEncryptionKeyProvidersProvidersItem represents sum type.
type AvailableRootEncryptionKeyProvidersProvidersItem struct {
	Type                                             AvailableRootEncryptionKeyProvidersProvidersItemType // switch on this field
	AvailableDelegatedRootEncryptionKeyProvider      AvailableDelegatedRootEncryptionKeyProvider
	AvailableServiceAccountRootEncryptionKeyProvider AvailableServiceAccountRootEncryptionKeyProvider
}

// AvailableRootEncryptionKeyProvidersProvidersItemType is oneOf type of AvailableRootEncryptionKeyProvidersProvidersItem.
type AvailableRootEncryptionKeyProvidersProvidersItemType string

// Possible values for AvailableRootEncryptionKeyProvidersProvidersItemType.
const (
	AvailableDelegatedRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem      AvailableRootEncryptionKeyProvidersProvidersItemType = "DelegatedRootEncryptionKeyProvider"
	AvailableServiceAccountRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem AvailableRootEncryptionKeyProvidersProvidersItemType = "ServiceAccountRootEncryptionKeyProvider"
)

// IsAvailableDelegatedRootEncryptionKeyProvider reports whether AvailableRootEncryptionKeyProvidersProvidersItem is AvailableDelegatedRootEncryptionKeyProvider.
func (s AvailableRootEncryptionKeyProvidersProvidersItem) IsAvailableDelegatedRootEncryptionKeyProvider() bool {
	return s.Type == AvailableDelegatedRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem
}

// IsAvailableServiceAccountRootEncryptionKeyProvider reports whether AvailableRootEncryptionKeyProvidersProvidersItem is AvailableServiceAccountRootEncryptionKeyProvider.
func (s AvailableRootEncryptionKeyProvidersProvidersItem) IsAvailableServiceAccountRootEncryptionKeyProvider() bool {
	return s.Type == AvailableServiceAccountRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem
}

// SetAvailableDelegatedRootEncryptionKeyProvider sets AvailableRootEncryptionKeyProvidersProvidersItem to AvailableDelegatedRootEncryptionKeyProvider.
func (s *AvailableRootEncryptionKeyProvidersProvidersItem) SetAvailableDelegatedRootEncryptionKeyProvider(v AvailableDelegatedRootEncryptionKeyProvider) {
	s.Type = AvailableDelegatedRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem
	s.AvailableDelegatedRootEncryptionKeyProvider = v
}

// GetAvailableDelegatedRootEncryptionKeyProvider returns AvailableDelegatedRootEncryptionKeyProvider and true boolean if AvailableRootEncryptionKeyProvidersProvidersItem is AvailableDelegatedRootEncryptionKeyProvider.
func (s AvailableRootEncryptionKeyProvidersProvidersItem) GetAvailableDelegatedRootEncryptionKeyProvider() (v AvailableDelegatedRootEncryptionKeyProvider, ok bool) {
	if !s.IsAvailableDelegatedRootEncryptionKeyProvider() {
		return v, false
	}
	return s.AvailableDelegatedRootEncryptionKeyProvider, true
}

// NewAvailableDelegatedRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem returns new AvailableRootEncryptionKeyProvidersProvidersItem from AvailableDelegatedRootEncryptionKeyProvider.
func NewAvailableDelegatedRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem(v AvailableDelegatedRootEncryptionKeyProvider) AvailableRootEncryptionKeyProvidersProvidersItem {
	var s AvailableRootEncryptionKeyProvidersProvidersItem
	s.SetAvailableDelegatedRootEncryptionKeyProvider(v)
	return s
}

// SetAvailableServiceAccountRootEncryptionKeyProvider sets AvailableRootEncryptionKeyProvidersProvidersItem to AvailableServiceAccountRootEncryptionKeyProvider.
func (s *AvailableRootEncryptionKeyProvidersProvidersItem) SetAvailableServiceAccountRootEncryptionKeyProvider(v AvailableServiceAccountRootEncryptionKeyProvider) {
	s.Type = AvailableServiceAccountRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem
	s.AvailableServiceAccountRootEncryptionKeyProvider = v
}

// GetAvailableServiceAccountRootEncryptionKeyProvider returns AvailableServiceAccountRootEncryptionKeyProvider and true boolean if AvailableRootEncryptionKeyProvidersProvidersItem is AvailableServiceAccountRootEncryptionKeyProvider.
func (s AvailableRootEncryptionKeyProvidersProvidersItem) GetAvailableServiceAccountRootEncryptionKeyProvider() (v AvailableServiceAccountRootEncryptionKeyProvider, ok bool) {
	if !s.IsAvailableServiceAccountRootEncryptionKeyProvider() {
		return v, false
	}
	return s.AvailableServiceAccountRootEncryptionKeyProvider, true
}

// NewAvailableServiceAccountRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem returns new AvailableRootEncryptionKeyProvidersProvidersItem from AvailableServiceAccountRootEncryptionKeyProvider.
func NewAvailableServiceAccountRootEncryptionKeyProviderAvailableRootEncryptionKeyProvidersProvidersItem(v AvailableServiceAccountRootEncryptionKeyProvider) AvailableRootEncryptionKeyProvidersProvidersItem {
	var s AvailableRootEncryptionKeyProvidersProvidersItem
	s.SetAvailableServiceAccountRootEncryptionKeyProvider(v)
	return s
}

// Ref: #/components/schemas/AvailableServiceAccountRootEncryptionKeyProvider
type AvailableServiceAccountRootEncryptionKeyProvider struct {
	Name        string `json:"name"`
	ShortName   string `json:"shortName"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) GetName() string {
	return s.Name
}

// GetShortName returns the value of ShortName.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) GetShortName() string {
	return s.ShortName
}

// GetDescription returns the value of Description.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) SetName(val string) {
	s.Name = val
}

// SetShortName sets the value of ShortName.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) SetShortName(val string) {
	s.ShortName = val
}

// SetDescription sets the value of Description.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) SetDescription(val string) {
	s.Description = val
}

type AvailableServiceAccountRootEncryptionKeyProviderType string

const (
	AvailableServiceAccountRootEncryptionKeyProviderTypeServiceAccountRootEncryptionKeyProvider AvailableServiceAccountRootEncryptionKeyProviderType = "ServiceAccountRootEncryptionKeyProvider"
)

// AllValues returns all AvailableServiceAccountRootEncryptionKeyProviderType values.
func (AvailableServiceAccountRootEncryptionKeyProviderType) AllValues() []AvailableServiceAccountRootEncryptionKeyProviderType {
	return []AvailableServiceAccountRootEncryptionKeyProviderType{
		AvailableServiceAccountRootEncryptionKeyProviderTypeServiceAccountRootEncryptionKeyProvider,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AvailableServiceAccountRootEncryptionKeyProviderType) MarshalText() ([]byte, error) {
	switch s {
	case AvailableServiceAccountRootEncryptionKeyProviderTypeServiceAccountRootEncryptionKeyProvider:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AvailableServiceAccountRootEncryptionKeyProviderType) UnmarshalText(data []byte) error {
	switch AvailableServiceAccountRootEncryptionKeyProviderType(data) {
	case AvailableServiceAccountRootEncryptionKeyProviderTypeServiceAccountRootEncryptionKeyProvider:
		*s = AvailableServiceAccountRootEncryptionKeyProviderTypeServiceAccountRootEncryptionKeyProvider
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BYOKKeyInfo
type BYOKKeyInfo struct {
	// The base64-encoded key material to use as the basis for an
	// encryption key.
	Key []byte `json:"key"`
}

// GetKey returns the value of Key.
func (s *BYOKKeyInfo) GetKey() []byte {
	return s.Key
}

// SetKey sets the value of Key.
func (s *BYOKKeyInfo) SetKey(val []byte) {
	s.Key = val
}

type BYOKKeyInfoProviderName string

const (
	BYOKKeyInfoProviderNameByok BYOKKeyInfoProviderName = "byok"
)

// AllValues returns all BYOKKeyInfoProviderName values.
func (BYOKKeyInfoProviderName) AllValues() []BYOKKeyInfoProviderName {
	return []BYOKKeyInfoProviderName{
		BYOKKeyInfoProviderNameByok,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BYOKKeyInfoProviderName) MarshalText() ([]byte, error) {
	switch s {
	case BYOKKeyInfoProviderNameByok:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BYOKKeyInfoProviderName) UnmarshalText(data []byte) error {
	switch BYOKKeyInfoProviderName(data) {
	case BYOKKeyInfoProviderNameByok:
		*s = BYOKKeyInfoProviderNameByok
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A capability is attached to authenticated domain identities by an identity provider, and confers
// additional permissions upon the identity. This is done by writing domain policy rules that
// reference the capability.
// Ref: #/components/schemas/Capability
type Capability struct {
	Name  CapabilityName `json:"name"`
	Value OptString      `json:"value"`
}

// GetName returns the value of Name.
func (s *Capability) GetName() CapabilityName {
	return s.Name
}

// GetValue returns the value of Value.
func (s *Capability) GetValue() OptString {
	return s.Value
}

// SetName sets the value of Name.
func (s *Capability) SetName(val CapabilityName) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *Capability) SetValue(val OptString) {
	s.Value = val
}

// A capability is attached to authenticated domain identities by an identity provider, and confers
// additional permissions upon the identity. This is done by writing domain policy rules that
// reference the capability.
// Ref: #/components/schemas/CapabilityDefinition
type CapabilityDefinition struct {
	Name CapabilityReference `json:"name"`
	// A unary capability does not have a value.
	Unary bool `json:"unary"`
	// A short, single sentence description of this capability.
	Summary string `json:"summary"`
	// A longer form description of this capability.
	Description string `json:"description"`
	// Is this capability imported from a peer domain. Imported capabilities cannot be assigned to users,
	// but can be referenced from domain policy rules.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
}

// GetName returns the value of Name.
func (s *CapabilityDefinition) GetName() CapabilityReference {
	return s.Name
}

// GetUnary returns the value of Unary.
func (s *CapabilityDefinition) GetUnary() bool {
	return s.Unary
}

// GetSummary returns the value of Summary.
func (s *CapabilityDefinition) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *CapabilityDefinition) GetDescription() string {
	return s.Description
}

// GetImported returns the value of Imported.
func (s *CapabilityDefinition) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *CapabilityDefinition) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *CapabilityDefinition) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// SetName sets the value of Name.
func (s *CapabilityDefinition) SetName(val CapabilityReference) {
	s.Name = val
}

// SetUnary sets the value of Unary.
func (s *CapabilityDefinition) SetUnary(val bool) {
	s.Unary = val
}

// SetSummary sets the value of Summary.
func (s *CapabilityDefinition) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *CapabilityDefinition) SetDescription(val string) {
	s.Description = val
}

// SetImported sets the value of Imported.
func (s *CapabilityDefinition) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *CapabilityDefinition) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *CapabilityDefinition) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

func (*CapabilityDefinition) domainGetCapabilityRes() {}

// A list of capability definitions.
// Ref: #/components/schemas/CapabilityDefinitionList
type CapabilityDefinitionList struct {
	Capabilities []CapabilityDefinition `json:"capabilities"`
}

// GetCapabilities returns the value of Capabilities.
func (s *CapabilityDefinitionList) GetCapabilities() []CapabilityDefinition {
	return s.Capabilities
}

// SetCapabilities sets the value of Capabilities.
func (s *CapabilityDefinitionList) SetCapabilities(val []CapabilityDefinition) {
	s.Capabilities = val
}

func (*CapabilityDefinitionList) domainGetCapabilitiesRes() {}

// A list of capabilities.
// Ref: #/components/schemas/CapabilityList
type CapabilityList struct {
	Capabilities []Capability `json:"capabilities"`
}

// GetCapabilities returns the value of Capabilities.
func (s *CapabilityList) GetCapabilities() []Capability {
	return s.Capabilities
}

// SetCapabilities sets the value of Capabilities.
func (s *CapabilityList) SetCapabilities(val []Capability) {
	s.Capabilities = val
}

type CapabilityName string

type CapabilityReference string

// A rule that refers to a domain identity capability. These rules are ANDed together.
// Ref: #/components/schemas/CapabilityRule
type CapabilityRule struct {
	// A list of capability matching patterns. Elements are ANDed together.
	MatchExpressions []CapabilityRuleMatchExpressionsItem `json:"matchExpressions"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *CapabilityRule) GetMatchExpressions() []CapabilityRuleMatchExpressionsItem {
	return s.MatchExpressions
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *CapabilityRule) SetMatchExpressions(val []CapabilityRuleMatchExpressionsItem) {
	s.MatchExpressions = val
}

type CapabilityRuleMatchExpressionsItem struct {
	Name     CapabilityReference                        `json:"name"`
	Operator CapabilityRuleMatchExpressionsItemOperator `json:"operator"`
	Values   []string                                   `json:"values"`
}

// GetName returns the value of Name.
func (s *CapabilityRuleMatchExpressionsItem) GetName() CapabilityReference {
	return s.Name
}

// GetOperator returns the value of Operator.
func (s *CapabilityRuleMatchExpressionsItem) GetOperator() CapabilityRuleMatchExpressionsItemOperator {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *CapabilityRuleMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// SetName sets the value of Name.
func (s *CapabilityRuleMatchExpressionsItem) SetName(val CapabilityReference) {
	s.Name = val
}

// SetOperator sets the value of Operator.
func (s *CapabilityRuleMatchExpressionsItem) SetOperator(val CapabilityRuleMatchExpressionsItemOperator) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *CapabilityRuleMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

type CapabilityRuleMatchExpressionsItemOperator string

const (
	CapabilityRuleMatchExpressionsItemOperatorIn        CapabilityRuleMatchExpressionsItemOperator = "In"
	CapabilityRuleMatchExpressionsItemOperatorNotIn     CapabilityRuleMatchExpressionsItemOperator = "NotIn"
	CapabilityRuleMatchExpressionsItemOperatorExists    CapabilityRuleMatchExpressionsItemOperator = "Exists"
	CapabilityRuleMatchExpressionsItemOperatorNotExists CapabilityRuleMatchExpressionsItemOperator = "NotExists"
)

// AllValues returns all CapabilityRuleMatchExpressionsItemOperator values.
func (CapabilityRuleMatchExpressionsItemOperator) AllValues() []CapabilityRuleMatchExpressionsItemOperator {
	return []CapabilityRuleMatchExpressionsItemOperator{
		CapabilityRuleMatchExpressionsItemOperatorIn,
		CapabilityRuleMatchExpressionsItemOperatorNotIn,
		CapabilityRuleMatchExpressionsItemOperatorExists,
		CapabilityRuleMatchExpressionsItemOperatorNotExists,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapabilityRuleMatchExpressionsItemOperator) MarshalText() ([]byte, error) {
	switch s {
	case CapabilityRuleMatchExpressionsItemOperatorIn:
		return []byte(s), nil
	case CapabilityRuleMatchExpressionsItemOperatorNotIn:
		return []byte(s), nil
	case CapabilityRuleMatchExpressionsItemOperatorExists:
		return []byte(s), nil
	case CapabilityRuleMatchExpressionsItemOperatorNotExists:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapabilityRuleMatchExpressionsItemOperator) UnmarshalText(data []byte) error {
	switch CapabilityRuleMatchExpressionsItemOperator(data) {
	case CapabilityRuleMatchExpressionsItemOperatorIn:
		*s = CapabilityRuleMatchExpressionsItemOperatorIn
		return nil
	case CapabilityRuleMatchExpressionsItemOperatorNotIn:
		*s = CapabilityRuleMatchExpressionsItemOperatorNotIn
		return nil
	case CapabilityRuleMatchExpressionsItemOperatorExists:
		*s = CapabilityRuleMatchExpressionsItemOperatorExists
		return nil
	case CapabilityRuleMatchExpressionsItemOperatorNotExists:
		*s = CapabilityRuleMatchExpressionsItemOperatorNotExists
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The response for the creation of a new capsule.
// Ref: #/components/schemas/CapsuleCreateResponse
type CapsuleCreateResponse struct {
	ID CapsuleID `json:"id"`
	// A CBOR encoded encryption key for the capsule.
	DataKey []byte `json:"dataKey"`
	// A CBOR encoded encryption key for the capsule.
	EncryptedDataKey []byte `json:"encryptedDataKey"`
	// The ID of the encryption key used to encrypt the data key.
	KeyEncryptionKeyID        int64                  `json:"keyEncryptionKeyID"`
	CreateToken               CapsuleOperationToken  `json:"createToken"`
	WriteContextConfiguration WriteContextConfigInfo `json:"writeContextConfiguration"`
}

// GetID returns the value of ID.
func (s *CapsuleCreateResponse) GetID() CapsuleID {
	return s.ID
}

// GetDataKey returns the value of DataKey.
func (s *CapsuleCreateResponse) GetDataKey() []byte {
	return s.DataKey
}

// GetEncryptedDataKey returns the value of EncryptedDataKey.
func (s *CapsuleCreateResponse) GetEncryptedDataKey() []byte {
	return s.EncryptedDataKey
}

// GetKeyEncryptionKeyID returns the value of KeyEncryptionKeyID.
func (s *CapsuleCreateResponse) GetKeyEncryptionKeyID() int64 {
	return s.KeyEncryptionKeyID
}

// GetCreateToken returns the value of CreateToken.
func (s *CapsuleCreateResponse) GetCreateToken() CapsuleOperationToken {
	return s.CreateToken
}

// GetWriteContextConfiguration returns the value of WriteContextConfiguration.
func (s *CapsuleCreateResponse) GetWriteContextConfiguration() WriteContextConfigInfo {
	return s.WriteContextConfiguration
}

// SetID sets the value of ID.
func (s *CapsuleCreateResponse) SetID(val CapsuleID) {
	s.ID = val
}

// SetDataKey sets the value of DataKey.
func (s *CapsuleCreateResponse) SetDataKey(val []byte) {
	s.DataKey = val
}

// SetEncryptedDataKey sets the value of EncryptedDataKey.
func (s *CapsuleCreateResponse) SetEncryptedDataKey(val []byte) {
	s.EncryptedDataKey = val
}

// SetKeyEncryptionKeyID sets the value of KeyEncryptionKeyID.
func (s *CapsuleCreateResponse) SetKeyEncryptionKeyID(val int64) {
	s.KeyEncryptionKeyID = val
}

// SetCreateToken sets the value of CreateToken.
func (s *CapsuleCreateResponse) SetCreateToken(val CapsuleOperationToken) {
	s.CreateToken = val
}

// SetWriteContextConfiguration sets the value of WriteContextConfiguration.
func (s *CapsuleCreateResponse) SetWriteContextConfiguration(val WriteContextConfigInfo) {
	s.WriteContextConfiguration = val
}

func (*CapsuleCreateResponse) domainCreateCapsuleRes() {}

// CapsuleGetByIdMovedPermanently is response for CapsuleGetById operation.
type CapsuleGetByIdMovedPermanently struct {
	Location OptString
}

// GetLocation returns the value of Location.
func (s *CapsuleGetByIdMovedPermanently) GetLocation() OptString {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *CapsuleGetByIdMovedPermanently) SetLocation(val OptString) {
	s.Location = val
}

func (*CapsuleGetByIdMovedPermanently) capsuleGetByIdRes() {}

type CapsuleID string

// A summary of the capsule.
// Ref: #/components/schemas/CapsuleInfo
type CapsuleInfo struct {
	ID          CapsuleID  `json:"id"`
	Domain      DomainID   `json:"domain"`
	CapsuleTags []Tag      `json:"capsuleTags"`
	SpanTags    TagSummary `json:"spanTags"`
	// How big this capsule is.
	Size int64 `json:"size"`
	// When this capsule was sealed.
	Created time.Time `json:"created"`
	// Generated key used to order and paginate on.
	PageKey OptString `json:"pageKey"`
}

// GetID returns the value of ID.
func (s *CapsuleInfo) GetID() CapsuleID {
	return s.ID
}

// GetDomain returns the value of Domain.
func (s *CapsuleInfo) GetDomain() DomainID {
	return s.Domain
}

// GetCapsuleTags returns the value of CapsuleTags.
func (s *CapsuleInfo) GetCapsuleTags() []Tag {
	return s.CapsuleTags
}

// GetSpanTags returns the value of SpanTags.
func (s *CapsuleInfo) GetSpanTags() TagSummary {
	return s.SpanTags
}

// GetSize returns the value of Size.
func (s *CapsuleInfo) GetSize() int64 {
	return s.Size
}

// GetCreated returns the value of Created.
func (s *CapsuleInfo) GetCreated() time.Time {
	return s.Created
}

// GetPageKey returns the value of PageKey.
func (s *CapsuleInfo) GetPageKey() OptString {
	return s.PageKey
}

// SetID sets the value of ID.
func (s *CapsuleInfo) SetID(val CapsuleID) {
	s.ID = val
}

// SetDomain sets the value of Domain.
func (s *CapsuleInfo) SetDomain(val DomainID) {
	s.Domain = val
}

// SetCapsuleTags sets the value of CapsuleTags.
func (s *CapsuleInfo) SetCapsuleTags(val []Tag) {
	s.CapsuleTags = val
}

// SetSpanTags sets the value of SpanTags.
func (s *CapsuleInfo) SetSpanTags(val TagSummary) {
	s.SpanTags = val
}

// SetSize sets the value of Size.
func (s *CapsuleInfo) SetSize(val int64) {
	s.Size = val
}

// SetCreated sets the value of Created.
func (s *CapsuleInfo) SetCreated(val time.Time) {
	s.Created = val
}

// SetPageKey sets the value of PageKey.
func (s *CapsuleInfo) SetPageKey(val OptString) {
	s.PageKey = val
}

func (*CapsuleInfo) domainGetCapsuleInfoRes() {}

// List of capsules.
// Ref: #/components/schemas/CapsuleList
type CapsuleList struct {
	Results []CapsuleInfo `json:"results"`
	// If true, there are more results than presented in this response.
	HasMore bool `json:"has_more"`
}

// GetResults returns the value of Results.
func (s *CapsuleList) GetResults() []CapsuleInfo {
	return s.Results
}

// GetHasMore returns the value of HasMore.
func (s *CapsuleList) GetHasMore() bool {
	return s.HasMore
}

// SetResults sets the value of Results.
func (s *CapsuleList) SetResults(val []CapsuleInfo) {
	s.Results = val
}

// SetHasMore sets the value of HasMore.
func (s *CapsuleList) SetHasMore(val bool) {
	s.HasMore = val
}

func (*CapsuleList) domainListCapsulesRes() {}

// A request to open (decrypt) a capsule.
// Ref: #/components/schemas/CapsuleOpenRequest
type CapsuleOpenRequest struct {
	// A CBOR encoded encrypted decryption key for the capsule.
	EncryptedDek []byte `json:"encryptedDek"`
	// Encryption key ID.
	KeyID int64 `json:"keyID"`
}

// GetEncryptedDek returns the value of EncryptedDek.
func (s *CapsuleOpenRequest) GetEncryptedDek() []byte {
	return s.EncryptedDek
}

// GetKeyID returns the value of KeyID.
func (s *CapsuleOpenRequest) GetKeyID() int64 {
	return s.KeyID
}

// SetEncryptedDek sets the value of EncryptedDek.
func (s *CapsuleOpenRequest) SetEncryptedDek(val []byte) {
	s.EncryptedDek = val
}

// SetKeyID sets the value of KeyID.
func (s *CapsuleOpenRequest) SetKeyID(val int64) {
	s.KeyID = val
}

// Contains key material for a capsule.
// Ref: #/components/schemas/CapsuleOpenResponse
type CapsuleOpenResponse struct {
	// A CBOR encoded decryption key for the capsule.
	DecryptionKey []byte `json:"decryptionKey"`
	// The material required for enacting read context configuration (e.g. wasm stuff).
	ReadContextConfiguration CapsuleOpenResponseReadContextConfiguration `json:"readContextConfiguration"`
	OpenToken                CapsuleOperationToken                       `json:"openToken"`
	// The tags for this capsule.
	CapsuleTags []Tag `json:"capsuleTags"`
}

// GetDecryptionKey returns the value of DecryptionKey.
func (s *CapsuleOpenResponse) GetDecryptionKey() []byte {
	return s.DecryptionKey
}

// GetReadContextConfiguration returns the value of ReadContextConfiguration.
func (s *CapsuleOpenResponse) GetReadContextConfiguration() CapsuleOpenResponseReadContextConfiguration {
	return s.ReadContextConfiguration
}

// GetOpenToken returns the value of OpenToken.
func (s *CapsuleOpenResponse) GetOpenToken() CapsuleOperationToken {
	return s.OpenToken
}

// GetCapsuleTags returns the value of CapsuleTags.
func (s *CapsuleOpenResponse) GetCapsuleTags() []Tag {
	return s.CapsuleTags
}

// SetDecryptionKey sets the value of DecryptionKey.
func (s *CapsuleOpenResponse) SetDecryptionKey(val []byte) {
	s.DecryptionKey = val
}

// SetReadContextConfiguration sets the value of ReadContextConfiguration.
func (s *CapsuleOpenResponse) SetReadContextConfiguration(val CapsuleOpenResponseReadContextConfiguration) {
	s.ReadContextConfiguration = val
}

// SetOpenToken sets the value of OpenToken.
func (s *CapsuleOpenResponse) SetOpenToken(val CapsuleOperationToken) {
	s.OpenToken = val
}

// SetCapsuleTags sets the value of CapsuleTags.
func (s *CapsuleOpenResponse) SetCapsuleTags(val []Tag) {
	s.CapsuleTags = val
}

func (*CapsuleOpenResponse) domainOpenCapsuleRes() {}

// The material required for enacting read context configuration (e.g. wasm stuff).
type CapsuleOpenResponseReadContextConfiguration struct {
	// If true, skip creation of audit log events on read.
	DisableReadLogging OptBool `json:"disableReadLogging"`
	// Number of seconds for which cached encryption keys will be
	// considered valid by the client.
	KeyCacheTTL OptInt32 `json:"keyCacheTTL"`
	// A bundled version of the Rego policy associated with this open event.
	PolicyAssembly []byte `json:"policyAssembly"`
}

// GetDisableReadLogging returns the value of DisableReadLogging.
func (s *CapsuleOpenResponseReadContextConfiguration) GetDisableReadLogging() OptBool {
	return s.DisableReadLogging
}

// GetKeyCacheTTL returns the value of KeyCacheTTL.
func (s *CapsuleOpenResponseReadContextConfiguration) GetKeyCacheTTL() OptInt32 {
	return s.KeyCacheTTL
}

// GetPolicyAssembly returns the value of PolicyAssembly.
func (s *CapsuleOpenResponseReadContextConfiguration) GetPolicyAssembly() []byte {
	return s.PolicyAssembly
}

// SetDisableReadLogging sets the value of DisableReadLogging.
func (s *CapsuleOpenResponseReadContextConfiguration) SetDisableReadLogging(val OptBool) {
	s.DisableReadLogging = val
}

// SetKeyCacheTTL sets the value of KeyCacheTTL.
func (s *CapsuleOpenResponseReadContextConfiguration) SetKeyCacheTTL(val OptInt32) {
	s.KeyCacheTTL = val
}

// SetPolicyAssembly sets the value of PolicyAssembly.
func (s *CapsuleOpenResponseReadContextConfiguration) SetPolicyAssembly(val []byte) {
	s.PolicyAssembly = val
}

type CapsuleOperationToken string

// Information applied when sealing a capsule (marking it as complete).
// Ref: #/components/schemas/CapsuleSealRequest
type CapsuleSealRequest struct {
	CapsuleTags []Tag      `json:"capsuleTags"`
	SpanTags    TagSummary `json:"spanTags"`
	// How big this capsule is.
	Size        int64                 `json:"size"`
	CreateToken CapsuleOperationToken `json:"createToken"`
}

// GetCapsuleTags returns the value of CapsuleTags.
func (s *CapsuleSealRequest) GetCapsuleTags() []Tag {
	return s.CapsuleTags
}

// GetSpanTags returns the value of SpanTags.
func (s *CapsuleSealRequest) GetSpanTags() TagSummary {
	return s.SpanTags
}

// GetSize returns the value of Size.
func (s *CapsuleSealRequest) GetSize() int64 {
	return s.Size
}

// GetCreateToken returns the value of CreateToken.
func (s *CapsuleSealRequest) GetCreateToken() CapsuleOperationToken {
	return s.CreateToken
}

// SetCapsuleTags sets the value of CapsuleTags.
func (s *CapsuleSealRequest) SetCapsuleTags(val []Tag) {
	s.CapsuleTags = val
}

// SetSpanTags sets the value of SpanTags.
func (s *CapsuleSealRequest) SetSpanTags(val TagSummary) {
	s.SpanTags = val
}

// SetSize sets the value of Size.
func (s *CapsuleSealRequest) SetSize(val int64) {
	s.Size = val
}

// SetCreateToken sets the value of CreateToken.
func (s *CapsuleSealRequest) SetCreateToken(val CapsuleOperationToken) {
	s.CreateToken = val
}

// Returned when attempting to delete a resource that is still in use by  other resources.
// Ref: #/components/schemas/ConflictError
type ConflictError struct {
	// Which resource type cannot be deleted.
	ResourceType string `json:"resourceType"`
	// The identifier for the resource we cannot delete.
	Identifier string `json:"identifier"`
	// A free form message describing one or more of the resources that depend upon the resource,
	// preventing it's deletion.
	Message string `json:"message"`
}

// GetResourceType returns the value of ResourceType.
func (s *ConflictError) GetResourceType() string {
	return s.ResourceType
}

// GetIdentifier returns the value of Identifier.
func (s *ConflictError) GetIdentifier() string {
	return s.Identifier
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetResourceType sets the value of ResourceType.
func (s *ConflictError) SetResourceType(val string) {
	s.ResourceType = val
}

// SetIdentifier sets the value of Identifier.
func (s *ConflictError) SetIdentifier(val string) {
	s.Identifier = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) domainCreatePeerDomainRes()              {}
func (*ConflictError) domainDeleteCapabilityRes()              {}
func (*ConflictError) domainExternalRootEncryptionKeyTestRes() {}
func (*ConflictError) domainPutCapabilityRes()                 {}
func (*ConflictError) domainReadContextFlushRes()              {}
func (*ConflictError) domainUpsertSpanTagsRes()                {}

// Configuration options for creating a new subdomain.
// Ref: #/components/schemas/CreatePeerDomain
type CreatePeerDomain struct {
	// A list of names for this domain. These can be used to look up this domain later by using
	// domainFromNickname. All nicknames for peer domains must be unique within a domain.
	Nicknames            []string       `json:"nicknames"`
	ImportAliasForParent OptImportAlias `json:"importAliasForParent"`
	ImportAliasForChild  ImportAlias    `json:"importAliasForChild"`
	// The default display name used for this domain. The display name is also treated as a nickname and
	// so can be used from domainFromNickname.
	DisplayNameForParent OptString `json:"displayNameForParent"`
	// The default display name used for this domain. The display name is also treated as a nickname and
	// so can be used from domainFromNickname.
	DisplayNameForChild   string  `json:"displayNameForChild"`
	LinkAll               OptBool `json:"linkAll"`
	LinkIdentityProviders OptBool `json:"linkIdentityProviders"`
	LinkFacts             OptBool `json:"linkFacts"`
	LinkReadContexts      OptBool `json:"linkReadContexts"`
	LinkWriteContexts     OptBool `json:"linkWriteContexts"`
	LinkCapabilities      OptBool `json:"linkCapabilities"`
	LinkDomainPolicy      OptBool `json:"linkDomainPolicy"`
	LinkCapsuleAccessLog  OptBool `json:"linkCapsuleAccessLog"`
	LinkControlLog        OptBool `json:"linkControlLog"`
	LinkCapsuleManifest   OptBool `json:"linkCapsuleManifest"`
}

// GetNicknames returns the value of Nicknames.
func (s *CreatePeerDomain) GetNicknames() []string {
	return s.Nicknames
}

// GetImportAliasForParent returns the value of ImportAliasForParent.
func (s *CreatePeerDomain) GetImportAliasForParent() OptImportAlias {
	return s.ImportAliasForParent
}

// GetImportAliasForChild returns the value of ImportAliasForChild.
func (s *CreatePeerDomain) GetImportAliasForChild() ImportAlias {
	return s.ImportAliasForChild
}

// GetDisplayNameForParent returns the value of DisplayNameForParent.
func (s *CreatePeerDomain) GetDisplayNameForParent() OptString {
	return s.DisplayNameForParent
}

// GetDisplayNameForChild returns the value of DisplayNameForChild.
func (s *CreatePeerDomain) GetDisplayNameForChild() string {
	return s.DisplayNameForChild
}

// GetLinkAll returns the value of LinkAll.
func (s *CreatePeerDomain) GetLinkAll() OptBool {
	return s.LinkAll
}

// GetLinkIdentityProviders returns the value of LinkIdentityProviders.
func (s *CreatePeerDomain) GetLinkIdentityProviders() OptBool {
	return s.LinkIdentityProviders
}

// GetLinkFacts returns the value of LinkFacts.
func (s *CreatePeerDomain) GetLinkFacts() OptBool {
	return s.LinkFacts
}

// GetLinkReadContexts returns the value of LinkReadContexts.
func (s *CreatePeerDomain) GetLinkReadContexts() OptBool {
	return s.LinkReadContexts
}

// GetLinkWriteContexts returns the value of LinkWriteContexts.
func (s *CreatePeerDomain) GetLinkWriteContexts() OptBool {
	return s.LinkWriteContexts
}

// GetLinkCapabilities returns the value of LinkCapabilities.
func (s *CreatePeerDomain) GetLinkCapabilities() OptBool {
	return s.LinkCapabilities
}

// GetLinkDomainPolicy returns the value of LinkDomainPolicy.
func (s *CreatePeerDomain) GetLinkDomainPolicy() OptBool {
	return s.LinkDomainPolicy
}

// GetLinkCapsuleAccessLog returns the value of LinkCapsuleAccessLog.
func (s *CreatePeerDomain) GetLinkCapsuleAccessLog() OptBool {
	return s.LinkCapsuleAccessLog
}

// GetLinkControlLog returns the value of LinkControlLog.
func (s *CreatePeerDomain) GetLinkControlLog() OptBool {
	return s.LinkControlLog
}

// GetLinkCapsuleManifest returns the value of LinkCapsuleManifest.
func (s *CreatePeerDomain) GetLinkCapsuleManifest() OptBool {
	return s.LinkCapsuleManifest
}

// SetNicknames sets the value of Nicknames.
func (s *CreatePeerDomain) SetNicknames(val []string) {
	s.Nicknames = val
}

// SetImportAliasForParent sets the value of ImportAliasForParent.
func (s *CreatePeerDomain) SetImportAliasForParent(val OptImportAlias) {
	s.ImportAliasForParent = val
}

// SetImportAliasForChild sets the value of ImportAliasForChild.
func (s *CreatePeerDomain) SetImportAliasForChild(val ImportAlias) {
	s.ImportAliasForChild = val
}

// SetDisplayNameForParent sets the value of DisplayNameForParent.
func (s *CreatePeerDomain) SetDisplayNameForParent(val OptString) {
	s.DisplayNameForParent = val
}

// SetDisplayNameForChild sets the value of DisplayNameForChild.
func (s *CreatePeerDomain) SetDisplayNameForChild(val string) {
	s.DisplayNameForChild = val
}

// SetLinkAll sets the value of LinkAll.
func (s *CreatePeerDomain) SetLinkAll(val OptBool) {
	s.LinkAll = val
}

// SetLinkIdentityProviders sets the value of LinkIdentityProviders.
func (s *CreatePeerDomain) SetLinkIdentityProviders(val OptBool) {
	s.LinkIdentityProviders = val
}

// SetLinkFacts sets the value of LinkFacts.
func (s *CreatePeerDomain) SetLinkFacts(val OptBool) {
	s.LinkFacts = val
}

// SetLinkReadContexts sets the value of LinkReadContexts.
func (s *CreatePeerDomain) SetLinkReadContexts(val OptBool) {
	s.LinkReadContexts = val
}

// SetLinkWriteContexts sets the value of LinkWriteContexts.
func (s *CreatePeerDomain) SetLinkWriteContexts(val OptBool) {
	s.LinkWriteContexts = val
}

// SetLinkCapabilities sets the value of LinkCapabilities.
func (s *CreatePeerDomain) SetLinkCapabilities(val OptBool) {
	s.LinkCapabilities = val
}

// SetLinkDomainPolicy sets the value of LinkDomainPolicy.
func (s *CreatePeerDomain) SetLinkDomainPolicy(val OptBool) {
	s.LinkDomainPolicy = val
}

// SetLinkCapsuleAccessLog sets the value of LinkCapsuleAccessLog.
func (s *CreatePeerDomain) SetLinkCapsuleAccessLog(val OptBool) {
	s.LinkCapsuleAccessLog = val
}

// SetLinkControlLog sets the value of LinkControlLog.
func (s *CreatePeerDomain) SetLinkControlLog(val OptBool) {
	s.LinkControlLog = val
}

// SetLinkCapsuleManifest sets the value of LinkCapsuleManifest.
func (s *CreatePeerDomain) SetLinkCapsuleManifest(val OptBool) {
	s.LinkCapsuleManifest = val
}

// A request to classify PII in a batch of records.
// Ref: #/components/schemas/DataTaggingHookInput
type DataTaggingHookInput struct {
	// A batch of values to be processed. Every element within a record must belong to the same record.
	Records []DataTaggingHookInputRecordsItem `json:"records"`
}

// GetRecords returns the value of Records.
func (s *DataTaggingHookInput) GetRecords() []DataTaggingHookInputRecordsItem {
	return s.Records
}

// SetRecords sets the value of Records.
func (s *DataTaggingHookInput) SetRecords(val []DataTaggingHookInputRecordsItem) {
	s.Records = val
}

type DataTaggingHookInputRecordsItem struct {
	// A batch of values associated with the same record (eg columns of a row), to be processed.
	Elements []DataTaggingHookInputRecordsItemElementsItem `json:"elements"`
}

// GetElements returns the value of Elements.
func (s *DataTaggingHookInputRecordsItem) GetElements() []DataTaggingHookInputRecordsItemElementsItem {
	return s.Elements
}

// SetElements sets the value of Elements.
func (s *DataTaggingHookInputRecordsItem) SetElements(val []DataTaggingHookInputRecordsItemElementsItem) {
	s.Elements = val
}

type DataTaggingHookInputRecordsItemElementsItem struct {
	// The main content to be classified.
	Content string `json:"content"`
	// If appropriate, the JSON path of the content in a larger object. If the content lies in a tabular
	// form, the first (and perhaps only) element of this path should be the column name.
	Path string `json:"path"`
}

// GetContent returns the value of Content.
func (s *DataTaggingHookInputRecordsItemElementsItem) GetContent() string {
	return s.Content
}

// GetPath returns the value of Path.
func (s *DataTaggingHookInputRecordsItemElementsItem) GetPath() string {
	return s.Path
}

// SetContent sets the value of Content.
func (s *DataTaggingHookInputRecordsItemElementsItem) SetContent(val string) {
	s.Content = val
}

// SetPath sets the value of Path.
func (s *DataTaggingHookInputRecordsItemElementsItem) SetPath(val string) {
	s.Path = val
}

// A response from invoking a data tagging hook.
// Ref: #/components/schemas/DataTaggingHookResponse
type DataTaggingHookResponse struct {
	Version string `json:"version"`
	// The records that have been processed, one per input record.
	Records []DataTaggingHookResponseRecordsItem `json:"records"`
}

// GetVersion returns the value of Version.
func (s *DataTaggingHookResponse) GetVersion() string {
	return s.Version
}

// GetRecords returns the value of Records.
func (s *DataTaggingHookResponse) GetRecords() []DataTaggingHookResponseRecordsItem {
	return s.Records
}

// SetVersion sets the value of Version.
func (s *DataTaggingHookResponse) SetVersion(val string) {
	s.Version = val
}

// SetRecords sets the value of Records.
func (s *DataTaggingHookResponse) SetRecords(val []DataTaggingHookResponseRecordsItem) {
	s.Records = val
}

func (*DataTaggingHookResponse) domainDataTaggingHookInvokeRes() {}

type DataTaggingHookResponseRecordsItem struct {
	// The elements that have been processed, matching what was given as input.
	Elements []TagSet `json:"elements"`
}

// GetElements returns the value of Elements.
func (s *DataTaggingHookResponseRecordsItem) GetElements() []TagSet {
	return s.Elements
}

// SetElements sets the value of Elements.
func (s *DataTaggingHookResponseRecordsItem) SetElements(val []TagSet) {
	s.Elements = val
}

// Ref: #/components/schemas/DeleteTags
type DeleteTags struct {
	// The names of the tags to delete.
	Names []string `json:"names"`
}

// GetNames returns the value of Names.
func (s *DeleteTags) GetNames() []string {
	return s.Names
}

// SetNames sets the value of Names.
func (s *DeleteTags) SetNames(val []string) {
	s.Names = val
}

// Information about a domain.
// Ref: #/components/schemas/Domain
type Domain struct {
	ID DomainID `json:"id"`
}

// GetID returns the value of ID.
func (s *Domain) GetID() DomainID {
	return s.ID
}

// SetID sets the value of ID.
func (s *Domain) SetID(val DomainID) {
	s.ID = val
}

func (*Domain) domainGetPeerRes() {}

// DomainAddAccessLogEntryForbidden is response for DomainAddAccessLogEntry operation.
type DomainAddAccessLogEntryForbidden struct{}

func (*DomainAddAccessLogEntryForbidden) domainAddAccessLogEntryRes() {}

// DomainAddAccessLogEntryOK is response for DomainAddAccessLogEntry operation.
type DomainAddAccessLogEntryOK struct{}

func (*DomainAddAccessLogEntryOK) domainAddAccessLogEntryRes() {}

type DomainAddReadContextRuleOK struct {
	ID OptRuleID `json:"id"`
}

// GetID returns the value of ID.
func (s *DomainAddReadContextRuleOK) GetID() OptRuleID {
	return s.ID
}

// SetID sets the value of ID.
func (s *DomainAddReadContextRuleOK) SetID(val OptRuleID) {
	s.ID = val
}

func (*DomainAddReadContextRuleOK) domainAddReadContextRuleRes() {}

// An object containing external credentials that can be transmuted into a domain identity token.
// Ref: #/components/schemas/DomainAuthenticate
type DomainAuthenticate struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *DomainAuthenticate) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *DomainAuthenticate) SetToken(val string) {
	s.Token = val
}

// A domain identity token.
// Ref: #/components/schemas/DomainAuthenticateResponse
type DomainAuthenticateResponse struct {
	Token string `json:"token"`
	// The token expiration, in UTC.
	Expiry OptDateTime `json:"expiry"`
}

// GetToken returns the value of Token.
func (s *DomainAuthenticateResponse) GetToken() string {
	return s.Token
}

// GetExpiry returns the value of Expiry.
func (s *DomainAuthenticateResponse) GetExpiry() OptDateTime {
	return s.Expiry
}

// SetToken sets the value of Token.
func (s *DomainAuthenticateResponse) SetToken(val string) {
	s.Token = val
}

// SetExpiry sets the value of Expiry.
func (s *DomainAuthenticateResponse) SetExpiry(val OptDateTime) {
	s.Expiry = val
}

func (*DomainAuthenticateResponse) domainAuthenticateRes() {}

// DomainContactIssueVerifyOK is response for DomainContactIssueVerify operation.
type DomainContactIssueVerifyOK struct{}

func (*DomainContactIssueVerifyOK) domainContactIssueVerifyRes() {}

// Parameters to request new validation request.
type DomainContactIssueVerifyReq struct {
	AdminEmail string `json:"adminEmail"`
}

// GetAdminEmail returns the value of AdminEmail.
func (s *DomainContactIssueVerifyReq) GetAdminEmail() string {
	return s.AdminEmail
}

// SetAdminEmail sets the value of AdminEmail.
func (s *DomainContactIssueVerifyReq) SetAdminEmail(val string) {
	s.AdminEmail = val
}

// Results for a domain control log query.
// Ref: #/components/schemas/DomainControlLogEntry
type DomainControlLogEntry struct {
	Domain DomainID   `json:"domain"`
	ID     LogEntryID `json:"id"`
	// The time of an operation, in UTC.
	Time        time.Time                        `json:"time" db:"-"`
	Session     SessionID                        `json:"session"`
	URL         string                           `json:"url"`
	Summary     string                           `json:"summary"`
	Description DomainControlLogEntryDescription `json:"description"`
}

// GetDomain returns the value of Domain.
func (s *DomainControlLogEntry) GetDomain() DomainID {
	return s.Domain
}

// GetID returns the value of ID.
func (s *DomainControlLogEntry) GetID() LogEntryID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *DomainControlLogEntry) GetTime() time.Time {
	return s.Time
}

// GetSession returns the value of Session.
func (s *DomainControlLogEntry) GetSession() SessionID {
	return s.Session
}

// GetURL returns the value of URL.
func (s *DomainControlLogEntry) GetURL() string {
	return s.URL
}

// GetSummary returns the value of Summary.
func (s *DomainControlLogEntry) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *DomainControlLogEntry) GetDescription() DomainControlLogEntryDescription {
	return s.Description
}

// SetDomain sets the value of Domain.
func (s *DomainControlLogEntry) SetDomain(val DomainID) {
	s.Domain = val
}

// SetID sets the value of ID.
func (s *DomainControlLogEntry) SetID(val LogEntryID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *DomainControlLogEntry) SetTime(val time.Time) {
	s.Time = val
}

// SetSession sets the value of Session.
func (s *DomainControlLogEntry) SetSession(val SessionID) {
	s.Session = val
}

// SetURL sets the value of URL.
func (s *DomainControlLogEntry) SetURL(val string) {
	s.URL = val
}

// SetSummary sets the value of Summary.
func (s *DomainControlLogEntry) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *DomainControlLogEntry) SetDescription(val DomainControlLogEntryDescription) {
	s.Description = val
}

type DomainControlLogEntryDescription map[string]string

func (s *DomainControlLogEntryDescription) init() DomainControlLogEntryDescription {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// The results for a query of the capsule access log.
// Ref: #/components/schemas/DomainControlLogResults
type DomainControlLogResults struct {
	Results []DomainControlLogEntry `json:"results"`
	// If true, there are more results. Query again with start_from_id equal to  the last result's ID to
	// get more results.
	HasMore bool `json:"has_more"`
}

// GetResults returns the value of Results.
func (s *DomainControlLogResults) GetResults() []DomainControlLogEntry {
	return s.Results
}

// GetHasMore returns the value of HasMore.
func (s *DomainControlLogResults) GetHasMore() bool {
	return s.HasMore
}

// SetResults sets the value of Results.
func (s *DomainControlLogResults) SetResults(val []DomainControlLogEntry) {
	s.Results = val
}

// SetHasMore sets the value of HasMore.
func (s *DomainControlLogResults) SetHasMore(val bool) {
	s.HasMore = val
}

func (*DomainControlLogResults) domainQueryControlLogRes() {}

type DomainCreateCapsuleReq struct{}

// DomainDeleteCapabilityOK is response for DomainDeleteCapability operation.
type DomainDeleteCapabilityOK struct{}

func (*DomainDeleteCapabilityOK) domainDeleteCapabilityRes() {}

// DomainDeleteCapsuleTagsOK is response for DomainDeleteCapsuleTags operation.
type DomainDeleteCapsuleTagsOK struct{}

func (*DomainDeleteCapsuleTagsOK) domainDeleteCapsuleTagsRes() {}

// DomainDeleteExternalRootEncryptionKeyOK is response for DomainDeleteExternalRootEncryptionKey operation.
type DomainDeleteExternalRootEncryptionKeyOK struct{}

func (*DomainDeleteExternalRootEncryptionKeyOK) domainDeleteExternalRootEncryptionKeyRes() {}

// DomainDeleteFactByIDMethodNotAllowed is response for DomainDeleteFactByID operation.
type DomainDeleteFactByIDMethodNotAllowed struct{}

func (*DomainDeleteFactByIDMethodNotAllowed) domainDeleteFactByIDRes() {}

// DomainDeleteFactByIDOK is response for DomainDeleteFactByID operation.
type DomainDeleteFactByIDOK struct{}

func (*DomainDeleteFactByIDOK) domainDeleteFactByIDRes() {}

// DomainDeleteFactTypeOK is response for DomainDeleteFactType operation.
type DomainDeleteFactTypeOK struct{}

func (*DomainDeleteFactTypeOK) domainDeleteFactTypeRes() {}

// DomainDeleteIdentityProviderOK is response for DomainDeleteIdentityProvider operation.
type DomainDeleteIdentityProviderOK struct{}

func (*DomainDeleteIdentityProviderOK) domainDeleteIdentityProviderRes() {}

// DomainDeleteIdentityProviderPrincipalOK is response for DomainDeleteIdentityProviderPrincipal operation.
type DomainDeleteIdentityProviderPrincipalOK struct{}

func (*DomainDeleteIdentityProviderPrincipalOK) domainDeleteIdentityProviderPrincipalRes() {}

// DomainDeletePeerOK is response for DomainDeletePeer operation.
type DomainDeletePeerOK struct{}

func (*DomainDeletePeerOK) domainDeletePeerRes() {}

// DomainDeletePolicyRuleOK is response for DomainDeletePolicyRule operation.
type DomainDeletePolicyRuleOK struct{}

func (*DomainDeletePolicyRuleOK) domainDeletePolicyRuleRes() {}

// DomainDeleteReadContextOK is response for DomainDeleteReadContext operation.
type DomainDeleteReadContextOK struct{}

func (*DomainDeleteReadContextOK) domainDeleteReadContextRes() {}

// DomainDeleteReadContextRuleOK is response for DomainDeleteReadContextRule operation.
type DomainDeleteReadContextRuleOK struct{}

func (*DomainDeleteReadContextRuleOK) domainDeleteReadContextRuleRes() {}

// DomainDeleteWriteContextOK is response for DomainDeleteWriteContext operation.
type DomainDeleteWriteContextOK struct{}

func (*DomainDeleteWriteContextOK) domainDeleteWriteContextRes() {}

// DomainDeleteWriteContextRegexRuleOK is response for DomainDeleteWriteContextRegexRule operation.
type DomainDeleteWriteContextRegexRuleOK struct{}

func (*DomainDeleteWriteContextRegexRuleOK) domainDeleteWriteContextRegexRuleRes() {}

type DomainExternalRootEncryptionKeyTestReq struct{}

// A list of defined fact types in the domain.
// Ref: #/components/schemas/DomainFactList
type DomainFactList struct {
	FactTypes []FactTypeDefinition `json:"factTypes"`
}

// GetFactTypes returns the value of FactTypes.
func (s *DomainFactList) GetFactTypes() []FactTypeDefinition {
	return s.FactTypes
}

// SetFactTypes sets the value of FactTypes.
func (s *DomainFactList) SetFactTypes(val []FactTypeDefinition) {
	s.FactTypes = val
}

func (*DomainFactList) domainListFactTypesRes() {}

// DomainFlushEncryptionKeysOK is response for DomainFlushEncryptionKeys operation.
type DomainFlushEncryptionKeysOK struct{}

func (*DomainFlushEncryptionKeysOK) domainFlushEncryptionKeysRes() {}

type DomainFlushEncryptionKeysReq struct{}

type DomainGetWriteContextRegexRulesOKApplicationJSON []WriteContextRegexRule

func (*DomainGetWriteContextRegexRulesOKApplicationJSON) domainGetWriteContextRegexRulesRes() {}

// A list of available hooks in this domain.
// Ref: #/components/schemas/DomainHooksList
type DomainHooksList struct {
	Hooks []DomainHooksListHooksItem `json:"hooks"`
}

// GetHooks returns the value of Hooks.
func (s *DomainHooksList) GetHooks() []DomainHooksListHooksItem {
	return s.Hooks
}

// SetHooks sets the value of Hooks.
func (s *DomainHooksList) SetHooks(val []DomainHooksListHooksItem) {
	s.Hooks = val
}

func (*DomainHooksList) domainListHooksRes() {}

type DomainHooksListHooksItem struct {
	Name        HookName `json:"name"`
	URL         string   `json:"url"`
	Version     string   `json:"version"`
	Summary     string   `json:"summary"`
	Description string   `json:"description"`
	// Tags that this hook emits that apply to spans of data within the capsule.
	OutputSpanTags []string `json:"outputSpanTags"`
	// Tags that this hook emits that apply to the entire capsule.
	OutputCapsuleTags []string `json:"outputCapsuleTags"`
}

// GetName returns the value of Name.
func (s *DomainHooksListHooksItem) GetName() HookName {
	return s.Name
}

// GetURL returns the value of URL.
func (s *DomainHooksListHooksItem) GetURL() string {
	return s.URL
}

// GetVersion returns the value of Version.
func (s *DomainHooksListHooksItem) GetVersion() string {
	return s.Version
}

// GetSummary returns the value of Summary.
func (s *DomainHooksListHooksItem) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *DomainHooksListHooksItem) GetDescription() string {
	return s.Description
}

// GetOutputSpanTags returns the value of OutputSpanTags.
func (s *DomainHooksListHooksItem) GetOutputSpanTags() []string {
	return s.OutputSpanTags
}

// GetOutputCapsuleTags returns the value of OutputCapsuleTags.
func (s *DomainHooksListHooksItem) GetOutputCapsuleTags() []string {
	return s.OutputCapsuleTags
}

// SetName sets the value of Name.
func (s *DomainHooksListHooksItem) SetName(val HookName) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *DomainHooksListHooksItem) SetURL(val string) {
	s.URL = val
}

// SetVersion sets the value of Version.
func (s *DomainHooksListHooksItem) SetVersion(val string) {
	s.Version = val
}

// SetSummary sets the value of Summary.
func (s *DomainHooksListHooksItem) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *DomainHooksListHooksItem) SetDescription(val string) {
	s.Description = val
}

// SetOutputSpanTags sets the value of OutputSpanTags.
func (s *DomainHooksListHooksItem) SetOutputSpanTags(val []string) {
	s.OutputSpanTags = val
}

// SetOutputCapsuleTags sets the value of OutputCapsuleTags.
func (s *DomainHooksListHooksItem) SetOutputCapsuleTags(val []string) {
	s.OutputCapsuleTags = val
}

type DomainID string

type DomainIdentity struct {
	Token string
}

// GetToken returns the value of Token.
func (s *DomainIdentity) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *DomainIdentity) SetToken(val string) {
	s.Token = val
}

// Details for an API key principal.
// Ref: #/components/schemas/DomainIdentityAPIKeyPrincipalParams
type DomainIdentityAPIKeyPrincipalParams struct {
	ApiKeyID OptString `json:"apiKeyID"`
	// An optional comment for the API key principal.
	Comment OptString `json:"comment"`
}

// GetApiKeyID returns the value of ApiKeyID.
func (s *DomainIdentityAPIKeyPrincipalParams) GetApiKeyID() OptString {
	return s.ApiKeyID
}

// GetComment returns the value of Comment.
func (s *DomainIdentityAPIKeyPrincipalParams) GetComment() OptString {
	return s.Comment
}

// SetApiKeyID sets the value of ApiKeyID.
func (s *DomainIdentityAPIKeyPrincipalParams) SetApiKeyID(val OptString) {
	s.ApiKeyID = val
}

// SetComment sets the value of Comment.
func (s *DomainIdentityAPIKeyPrincipalParams) SetComment(val OptString) {
	s.Comment = val
}

type DomainIdentityAPIKeyPrincipalParamsType string

const (
	DomainIdentityAPIKeyPrincipalParamsTypeAPIKey DomainIdentityAPIKeyPrincipalParamsType = "APIKey"
)

// AllValues returns all DomainIdentityAPIKeyPrincipalParamsType values.
func (DomainIdentityAPIKeyPrincipalParamsType) AllValues() []DomainIdentityAPIKeyPrincipalParamsType {
	return []DomainIdentityAPIKeyPrincipalParamsType{
		DomainIdentityAPIKeyPrincipalParamsTypeAPIKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIdentityAPIKeyPrincipalParamsType) MarshalText() ([]byte, error) {
	switch s {
	case DomainIdentityAPIKeyPrincipalParamsTypeAPIKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIdentityAPIKeyPrincipalParamsType) UnmarshalText(data []byte) error {
	switch DomainIdentityAPIKeyPrincipalParamsType(data) {
	case DomainIdentityAPIKeyPrincipalParamsTypeAPIKey:
		*s = DomainIdentityAPIKeyPrincipalParamsTypeAPIKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details for an email principal.
// Ref: #/components/schemas/DomainIdentityEmailPrincipalParams
type DomainIdentityEmailPrincipalParams struct {
	Email string `json:"email"`
	// An optional comment for the email principal.
	Comment OptString `json:"comment"`
}

// GetEmail returns the value of Email.
func (s *DomainIdentityEmailPrincipalParams) GetEmail() string {
	return s.Email
}

// GetComment returns the value of Comment.
func (s *DomainIdentityEmailPrincipalParams) GetComment() OptString {
	return s.Comment
}

// SetEmail sets the value of Email.
func (s *DomainIdentityEmailPrincipalParams) SetEmail(val string) {
	s.Email = val
}

// SetComment sets the value of Comment.
func (s *DomainIdentityEmailPrincipalParams) SetComment(val OptString) {
	s.Comment = val
}

type DomainIdentityEmailPrincipalParamsType string

const (
	DomainIdentityEmailPrincipalParamsTypeEmail DomainIdentityEmailPrincipalParamsType = "Email"
)

// AllValues returns all DomainIdentityEmailPrincipalParamsType values.
func (DomainIdentityEmailPrincipalParamsType) AllValues() []DomainIdentityEmailPrincipalParamsType {
	return []DomainIdentityEmailPrincipalParamsType{
		DomainIdentityEmailPrincipalParamsTypeEmail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIdentityEmailPrincipalParamsType) MarshalText() ([]byte, error) {
	switch s {
	case DomainIdentityEmailPrincipalParamsTypeEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIdentityEmailPrincipalParamsType) UnmarshalText(data []byte) error {
	switch DomainIdentityEmailPrincipalParamsType(data) {
	case DomainIdentityEmailPrincipalParamsTypeEmail:
		*s = DomainIdentityEmailPrincipalParamsTypeEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional details for a hosted domain principal.
// Ref: #/components/schemas/DomainIdentityHostedDomainPrincipalParams
type DomainIdentityHostedDomainPrincipalParams struct {
	HostedDomain string `json:"hostedDomain"`
	// An optional comment for the hosted domain principal.
	Comment OptString `json:"comment"`
}

// GetHostedDomain returns the value of HostedDomain.
func (s *DomainIdentityHostedDomainPrincipalParams) GetHostedDomain() string {
	return s.HostedDomain
}

// GetComment returns the value of Comment.
func (s *DomainIdentityHostedDomainPrincipalParams) GetComment() OptString {
	return s.Comment
}

// SetHostedDomain sets the value of HostedDomain.
func (s *DomainIdentityHostedDomainPrincipalParams) SetHostedDomain(val string) {
	s.HostedDomain = val
}

// SetComment sets the value of Comment.
func (s *DomainIdentityHostedDomainPrincipalParams) SetComment(val OptString) {
	s.Comment = val
}

type DomainIdentityHostedDomainPrincipalParamsType string

const (
	DomainIdentityHostedDomainPrincipalParamsTypeHostedDomain DomainIdentityHostedDomainPrincipalParamsType = "HostedDomain"
)

// AllValues returns all DomainIdentityHostedDomainPrincipalParamsType values.
func (DomainIdentityHostedDomainPrincipalParamsType) AllValues() []DomainIdentityHostedDomainPrincipalParamsType {
	return []DomainIdentityHostedDomainPrincipalParamsType{
		DomainIdentityHostedDomainPrincipalParamsTypeHostedDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIdentityHostedDomainPrincipalParamsType) MarshalText() ([]byte, error) {
	switch s {
	case DomainIdentityHostedDomainPrincipalParamsTypeHostedDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIdentityHostedDomainPrincipalParamsType) UnmarshalText(data []byte) error {
	switch DomainIdentityHostedDomainPrincipalParamsType(data) {
	case DomainIdentityHostedDomainPrincipalParamsTypeHostedDomain:
		*s = DomainIdentityHostedDomainPrincipalParamsTypeHostedDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DomainIdentityPrincipalDetails
// DomainIdentityPrincipalDetails represents sum type.
type DomainIdentityPrincipalDetails struct {
	Type                                      DomainIdentityPrincipalDetailsType // switch on this field
	DomainIdentityAPIKeyPrincipalParams       DomainIdentityAPIKeyPrincipalParams
	DomainIdentityEmailPrincipalParams        DomainIdentityEmailPrincipalParams
	DomainIdentityHostedDomainPrincipalParams DomainIdentityHostedDomainPrincipalParams
}

// DomainIdentityPrincipalDetailsType is oneOf type of DomainIdentityPrincipalDetails.
type DomainIdentityPrincipalDetailsType string

// Possible values for DomainIdentityPrincipalDetailsType.
const (
	DomainIdentityAPIKeyPrincipalParamsDomainIdentityPrincipalDetails       DomainIdentityPrincipalDetailsType = "APIKey"
	DomainIdentityEmailPrincipalParamsDomainIdentityPrincipalDetails        DomainIdentityPrincipalDetailsType = "Email"
	DomainIdentityHostedDomainPrincipalParamsDomainIdentityPrincipalDetails DomainIdentityPrincipalDetailsType = "HostedDomain"
)

// IsDomainIdentityAPIKeyPrincipalParams reports whether DomainIdentityPrincipalDetails is DomainIdentityAPIKeyPrincipalParams.
func (s DomainIdentityPrincipalDetails) IsDomainIdentityAPIKeyPrincipalParams() bool {
	return s.Type == DomainIdentityAPIKeyPrincipalParamsDomainIdentityPrincipalDetails
}

// IsDomainIdentityEmailPrincipalParams reports whether DomainIdentityPrincipalDetails is DomainIdentityEmailPrincipalParams.
func (s DomainIdentityPrincipalDetails) IsDomainIdentityEmailPrincipalParams() bool {
	return s.Type == DomainIdentityEmailPrincipalParamsDomainIdentityPrincipalDetails
}

// IsDomainIdentityHostedDomainPrincipalParams reports whether DomainIdentityPrincipalDetails is DomainIdentityHostedDomainPrincipalParams.
func (s DomainIdentityPrincipalDetails) IsDomainIdentityHostedDomainPrincipalParams() bool {
	return s.Type == DomainIdentityHostedDomainPrincipalParamsDomainIdentityPrincipalDetails
}

// SetDomainIdentityAPIKeyPrincipalParams sets DomainIdentityPrincipalDetails to DomainIdentityAPIKeyPrincipalParams.
func (s *DomainIdentityPrincipalDetails) SetDomainIdentityAPIKeyPrincipalParams(v DomainIdentityAPIKeyPrincipalParams) {
	s.Type = DomainIdentityAPIKeyPrincipalParamsDomainIdentityPrincipalDetails
	s.DomainIdentityAPIKeyPrincipalParams = v
}

// GetDomainIdentityAPIKeyPrincipalParams returns DomainIdentityAPIKeyPrincipalParams and true boolean if DomainIdentityPrincipalDetails is DomainIdentityAPIKeyPrincipalParams.
func (s DomainIdentityPrincipalDetails) GetDomainIdentityAPIKeyPrincipalParams() (v DomainIdentityAPIKeyPrincipalParams, ok bool) {
	if !s.IsDomainIdentityAPIKeyPrincipalParams() {
		return v, false
	}
	return s.DomainIdentityAPIKeyPrincipalParams, true
}

// NewDomainIdentityAPIKeyPrincipalParamsDomainIdentityPrincipalDetails returns new DomainIdentityPrincipalDetails from DomainIdentityAPIKeyPrincipalParams.
func NewDomainIdentityAPIKeyPrincipalParamsDomainIdentityPrincipalDetails(v DomainIdentityAPIKeyPrincipalParams) DomainIdentityPrincipalDetails {
	var s DomainIdentityPrincipalDetails
	s.SetDomainIdentityAPIKeyPrincipalParams(v)
	return s
}

// SetDomainIdentityEmailPrincipalParams sets DomainIdentityPrincipalDetails to DomainIdentityEmailPrincipalParams.
func (s *DomainIdentityPrincipalDetails) SetDomainIdentityEmailPrincipalParams(v DomainIdentityEmailPrincipalParams) {
	s.Type = DomainIdentityEmailPrincipalParamsDomainIdentityPrincipalDetails
	s.DomainIdentityEmailPrincipalParams = v
}

// GetDomainIdentityEmailPrincipalParams returns DomainIdentityEmailPrincipalParams and true boolean if DomainIdentityPrincipalDetails is DomainIdentityEmailPrincipalParams.
func (s DomainIdentityPrincipalDetails) GetDomainIdentityEmailPrincipalParams() (v DomainIdentityEmailPrincipalParams, ok bool) {
	if !s.IsDomainIdentityEmailPrincipalParams() {
		return v, false
	}
	return s.DomainIdentityEmailPrincipalParams, true
}

// NewDomainIdentityEmailPrincipalParamsDomainIdentityPrincipalDetails returns new DomainIdentityPrincipalDetails from DomainIdentityEmailPrincipalParams.
func NewDomainIdentityEmailPrincipalParamsDomainIdentityPrincipalDetails(v DomainIdentityEmailPrincipalParams) DomainIdentityPrincipalDetails {
	var s DomainIdentityPrincipalDetails
	s.SetDomainIdentityEmailPrincipalParams(v)
	return s
}

// SetDomainIdentityHostedDomainPrincipalParams sets DomainIdentityPrincipalDetails to DomainIdentityHostedDomainPrincipalParams.
func (s *DomainIdentityPrincipalDetails) SetDomainIdentityHostedDomainPrincipalParams(v DomainIdentityHostedDomainPrincipalParams) {
	s.Type = DomainIdentityHostedDomainPrincipalParamsDomainIdentityPrincipalDetails
	s.DomainIdentityHostedDomainPrincipalParams = v
}

// GetDomainIdentityHostedDomainPrincipalParams returns DomainIdentityHostedDomainPrincipalParams and true boolean if DomainIdentityPrincipalDetails is DomainIdentityHostedDomainPrincipalParams.
func (s DomainIdentityPrincipalDetails) GetDomainIdentityHostedDomainPrincipalParams() (v DomainIdentityHostedDomainPrincipalParams, ok bool) {
	if !s.IsDomainIdentityHostedDomainPrincipalParams() {
		return v, false
	}
	return s.DomainIdentityHostedDomainPrincipalParams, true
}

// NewDomainIdentityHostedDomainPrincipalParamsDomainIdentityPrincipalDetails returns new DomainIdentityPrincipalDetails from DomainIdentityHostedDomainPrincipalParams.
func NewDomainIdentityHostedDomainPrincipalParamsDomainIdentityPrincipalDetails(v DomainIdentityHostedDomainPrincipalParams) DomainIdentityPrincipalDetails {
	var s DomainIdentityPrincipalDetails
	s.SetDomainIdentityHostedDomainPrincipalParams(v)
	return s
}

// Ref: #/components/schemas/DomainIdentityProviderDetails
// DomainIdentityProviderDetails represents sum type.
type DomainIdentityProviderDetails struct {
	Type                                     DomainIdentityProviderDetailsType // switch on this field
	GoogleOAuthDomainIdentityProviderDetails GoogleOAuthDomainIdentityProviderDetails
	APIKeyDomainIdentityProviderDetails      APIKeyDomainIdentityProviderDetails
}

// DomainIdentityProviderDetailsType is oneOf type of DomainIdentityProviderDetails.
type DomainIdentityProviderDetailsType string

// Possible values for DomainIdentityProviderDetailsType.
const (
	GoogleOAuthDomainIdentityProviderDetailsDomainIdentityProviderDetails DomainIdentityProviderDetailsType = "GoogleOAuth"
	APIKeyDomainIdentityProviderDetailsDomainIdentityProviderDetails      DomainIdentityProviderDetailsType = "APIKey"
)

// IsGoogleOAuthDomainIdentityProviderDetails reports whether DomainIdentityProviderDetails is GoogleOAuthDomainIdentityProviderDetails.
func (s DomainIdentityProviderDetails) IsGoogleOAuthDomainIdentityProviderDetails() bool {
	return s.Type == GoogleOAuthDomainIdentityProviderDetailsDomainIdentityProviderDetails
}

// IsAPIKeyDomainIdentityProviderDetails reports whether DomainIdentityProviderDetails is APIKeyDomainIdentityProviderDetails.
func (s DomainIdentityProviderDetails) IsAPIKeyDomainIdentityProviderDetails() bool {
	return s.Type == APIKeyDomainIdentityProviderDetailsDomainIdentityProviderDetails
}

// SetGoogleOAuthDomainIdentityProviderDetails sets DomainIdentityProviderDetails to GoogleOAuthDomainIdentityProviderDetails.
func (s *DomainIdentityProviderDetails) SetGoogleOAuthDomainIdentityProviderDetails(v GoogleOAuthDomainIdentityProviderDetails) {
	s.Type = GoogleOAuthDomainIdentityProviderDetailsDomainIdentityProviderDetails
	s.GoogleOAuthDomainIdentityProviderDetails = v
}

// GetGoogleOAuthDomainIdentityProviderDetails returns GoogleOAuthDomainIdentityProviderDetails and true boolean if DomainIdentityProviderDetails is GoogleOAuthDomainIdentityProviderDetails.
func (s DomainIdentityProviderDetails) GetGoogleOAuthDomainIdentityProviderDetails() (v GoogleOAuthDomainIdentityProviderDetails, ok bool) {
	if !s.IsGoogleOAuthDomainIdentityProviderDetails() {
		return v, false
	}
	return s.GoogleOAuthDomainIdentityProviderDetails, true
}

// NewGoogleOAuthDomainIdentityProviderDetailsDomainIdentityProviderDetails returns new DomainIdentityProviderDetails from GoogleOAuthDomainIdentityProviderDetails.
func NewGoogleOAuthDomainIdentityProviderDetailsDomainIdentityProviderDetails(v GoogleOAuthDomainIdentityProviderDetails) DomainIdentityProviderDetails {
	var s DomainIdentityProviderDetails
	s.SetGoogleOAuthDomainIdentityProviderDetails(v)
	return s
}

// SetAPIKeyDomainIdentityProviderDetails sets DomainIdentityProviderDetails to APIKeyDomainIdentityProviderDetails.
func (s *DomainIdentityProviderDetails) SetAPIKeyDomainIdentityProviderDetails(v APIKeyDomainIdentityProviderDetails) {
	s.Type = APIKeyDomainIdentityProviderDetailsDomainIdentityProviderDetails
	s.APIKeyDomainIdentityProviderDetails = v
}

// GetAPIKeyDomainIdentityProviderDetails returns APIKeyDomainIdentityProviderDetails and true boolean if DomainIdentityProviderDetails is APIKeyDomainIdentityProviderDetails.
func (s DomainIdentityProviderDetails) GetAPIKeyDomainIdentityProviderDetails() (v APIKeyDomainIdentityProviderDetails, ok bool) {
	if !s.IsAPIKeyDomainIdentityProviderDetails() {
		return v, false
	}
	return s.APIKeyDomainIdentityProviderDetails, true
}

// NewAPIKeyDomainIdentityProviderDetailsDomainIdentityProviderDetails returns new DomainIdentityProviderDetails from APIKeyDomainIdentityProviderDetails.
func NewAPIKeyDomainIdentityProviderDetailsDomainIdentityProviderDetails(v APIKeyDomainIdentityProviderDetails) DomainIdentityProviderDetails {
	var s DomainIdentityProviderDetails
	s.SetAPIKeyDomainIdentityProviderDetails(v)
	return s
}

// Information about an identity provider. This may be an imported provider or a provider in this
// domain.
// Ref: #/components/schemas/DomainIdentityProviderInfo
type DomainIdentityProviderInfo struct {
	Name IdentityProviderReference  `json:"name"`
	Type DomainIdentityProviderType `json:"type"`
	// Is this identity provider imported from a peer domain.
	Imported            bool                                  `json:"imported"`
	SourceDomainID      OptDomainID                           `json:"sourceDomainID"`
	SourceDomainName    OptString                             `json:"sourceDomainName"`
	SupportedPrincipals []DomainIdentityProviderPrincipalType `json:"supportedPrincipals"`
	Details             OptDomainIdentityProviderDetails      `json:"details"`
}

// GetName returns the value of Name.
func (s *DomainIdentityProviderInfo) GetName() IdentityProviderReference {
	return s.Name
}

// GetType returns the value of Type.
func (s *DomainIdentityProviderInfo) GetType() DomainIdentityProviderType {
	return s.Type
}

// GetImported returns the value of Imported.
func (s *DomainIdentityProviderInfo) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *DomainIdentityProviderInfo) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *DomainIdentityProviderInfo) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// GetSupportedPrincipals returns the value of SupportedPrincipals.
func (s *DomainIdentityProviderInfo) GetSupportedPrincipals() []DomainIdentityProviderPrincipalType {
	return s.SupportedPrincipals
}

// GetDetails returns the value of Details.
func (s *DomainIdentityProviderInfo) GetDetails() OptDomainIdentityProviderDetails {
	return s.Details
}

// SetName sets the value of Name.
func (s *DomainIdentityProviderInfo) SetName(val IdentityProviderReference) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *DomainIdentityProviderInfo) SetType(val DomainIdentityProviderType) {
	s.Type = val
}

// SetImported sets the value of Imported.
func (s *DomainIdentityProviderInfo) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *DomainIdentityProviderInfo) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *DomainIdentityProviderInfo) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

// SetSupportedPrincipals sets the value of SupportedPrincipals.
func (s *DomainIdentityProviderInfo) SetSupportedPrincipals(val []DomainIdentityProviderPrincipalType) {
	s.SupportedPrincipals = val
}

// SetDetails sets the value of Details.
func (s *DomainIdentityProviderInfo) SetDetails(val OptDomainIdentityProviderDetails) {
	s.Details = val
}

func (*DomainIdentityProviderInfo) domainGetIdentityProviderRes()    {}
func (*DomainIdentityProviderInfo) domainUpsertIdentityProviderRes() {}

// A list of identity providers.
// Ref: #/components/schemas/DomainIdentityProviderList
type DomainIdentityProviderList struct {
	// A list of identity providers configured in a domain.
	IdentityProviders []DomainIdentityProviderInfo `json:"identityProviders"`
}

// GetIdentityProviders returns the value of IdentityProviders.
func (s *DomainIdentityProviderList) GetIdentityProviders() []DomainIdentityProviderInfo {
	return s.IdentityProviders
}

// SetIdentityProviders sets the value of IdentityProviders.
func (s *DomainIdentityProviderList) SetIdentityProviders(val []DomainIdentityProviderInfo) {
	s.IdentityProviders = val
}

func (*DomainIdentityProviderList) domainListIdentityProvidersRes() {}

// A list of principals in an identity provider.
// Ref: #/components/schemas/DomainIdentityProviderPrincipalList
type DomainIdentityProviderPrincipalList struct {
	Principals []PrincipalSummary `json:"principals"`
}

// GetPrincipals returns the value of Principals.
func (s *DomainIdentityProviderPrincipalList) GetPrincipals() []PrincipalSummary {
	return s.Principals
}

// SetPrincipals sets the value of Principals.
func (s *DomainIdentityProviderPrincipalList) SetPrincipals(val []PrincipalSummary) {
	s.Principals = val
}

func (*DomainIdentityProviderPrincipalList) domainGetIdentityProviderPrincipalsRes() {}

// Details to create a domain identity principal.
// Ref: #/components/schemas/DomainIdentityProviderPrincipalParams
type DomainIdentityProviderPrincipalParams struct {
	Capabilities []Capability                   `json:"capabilities"`
	Details      DomainIdentityPrincipalDetails `json:"details"`
}

// GetCapabilities returns the value of Capabilities.
func (s *DomainIdentityProviderPrincipalParams) GetCapabilities() []Capability {
	return s.Capabilities
}

// GetDetails returns the value of Details.
func (s *DomainIdentityProviderPrincipalParams) GetDetails() DomainIdentityPrincipalDetails {
	return s.Details
}

// SetCapabilities sets the value of Capabilities.
func (s *DomainIdentityProviderPrincipalParams) SetCapabilities(val []Capability) {
	s.Capabilities = val
}

// SetDetails sets the value of Details.
func (s *DomainIdentityProviderPrincipalParams) SetDetails(val DomainIdentityPrincipalDetails) {
	s.Details = val
}

// Principal type supported by an identity provider.
// Ref: #/components/schemas/DomainIdentityProviderPrincipalType
type DomainIdentityProviderPrincipalType string

const (
	DomainIdentityProviderPrincipalTypeAPIKey       DomainIdentityProviderPrincipalType = "APIKey"
	DomainIdentityProviderPrincipalTypeEmail        DomainIdentityProviderPrincipalType = "Email"
	DomainIdentityProviderPrincipalTypeHostedDomain DomainIdentityProviderPrincipalType = "HostedDomain"
)

// AllValues returns all DomainIdentityProviderPrincipalType values.
func (DomainIdentityProviderPrincipalType) AllValues() []DomainIdentityProviderPrincipalType {
	return []DomainIdentityProviderPrincipalType{
		DomainIdentityProviderPrincipalTypeAPIKey,
		DomainIdentityProviderPrincipalTypeEmail,
		DomainIdentityProviderPrincipalTypeHostedDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIdentityProviderPrincipalType) MarshalText() ([]byte, error) {
	switch s {
	case DomainIdentityProviderPrincipalTypeAPIKey:
		return []byte(s), nil
	case DomainIdentityProviderPrincipalTypeEmail:
		return []byte(s), nil
	case DomainIdentityProviderPrincipalTypeHostedDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIdentityProviderPrincipalType) UnmarshalText(data []byte) error {
	switch DomainIdentityProviderPrincipalType(data) {
	case DomainIdentityProviderPrincipalTypeAPIKey:
		*s = DomainIdentityProviderPrincipalTypeAPIKey
		return nil
	case DomainIdentityProviderPrincipalTypeEmail:
		*s = DomainIdentityProviderPrincipalTypeEmail
		return nil
	case DomainIdentityProviderPrincipalTypeHostedDomain:
		*s = DomainIdentityProviderPrincipalTypeHostedDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the identity provider.
// Ref: #/components/schemas/DomainIdentityProviderType
type DomainIdentityProviderType string

const (
	DomainIdentityProviderTypeGoogleOAuth       DomainIdentityProviderType = "GoogleOAuth"
	DomainIdentityProviderTypeGCPServiceAccount DomainIdentityProviderType = "GCPServiceAccount"
	DomainIdentityProviderTypeAPIKey            DomainIdentityProviderType = "APIKey"
)

// AllValues returns all DomainIdentityProviderType values.
func (DomainIdentityProviderType) AllValues() []DomainIdentityProviderType {
	return []DomainIdentityProviderType{
		DomainIdentityProviderTypeGoogleOAuth,
		DomainIdentityProviderTypeGCPServiceAccount,
		DomainIdentityProviderTypeAPIKey,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainIdentityProviderType) MarshalText() ([]byte, error) {
	switch s {
	case DomainIdentityProviderTypeGoogleOAuth:
		return []byte(s), nil
	case DomainIdentityProviderTypeGCPServiceAccount:
		return []byte(s), nil
	case DomainIdentityProviderTypeAPIKey:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainIdentityProviderType) UnmarshalText(data []byte) error {
	switch DomainIdentityProviderType(data) {
	case DomainIdentityProviderTypeGoogleOAuth:
		*s = DomainIdentityProviderTypeGoogleOAuth
		return nil
	case DomainIdentityProviderTypeGCPServiceAccount:
		*s = DomainIdentityProviderTypeGCPServiceAccount
		return nil
	case DomainIdentityProviderTypeAPIKey:
		*s = DomainIdentityProviderTypeAPIKey
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DomainInsertIdentityProviderPrincipalOK struct {
	PrincipalID PrincipalID `json:"principalID"`
	ApiKey      OptString   `json:"apiKey"`
}

// GetPrincipalID returns the value of PrincipalID.
func (s *DomainInsertIdentityProviderPrincipalOK) GetPrincipalID() PrincipalID {
	return s.PrincipalID
}

// GetApiKey returns the value of ApiKey.
func (s *DomainInsertIdentityProviderPrincipalOK) GetApiKey() OptString {
	return s.ApiKey
}

// SetPrincipalID sets the value of PrincipalID.
func (s *DomainInsertIdentityProviderPrincipalOK) SetPrincipalID(val PrincipalID) {
	s.PrincipalID = val
}

// SetApiKey sets the value of ApiKey.
func (s *DomainInsertIdentityProviderPrincipalOK) SetApiKey(val OptString) {
	s.ApiKey = val
}

func (*DomainInsertIdentityProviderPrincipalOK) domainInsertIdentityProviderPrincipalRes() {}

type DomainInsertWriteContextRegexRuleOK struct {
	RuleID RuleID `json:"ruleID"`
}

// GetRuleID returns the value of RuleID.
func (s *DomainInsertWriteContextRegexRuleOK) GetRuleID() RuleID {
	return s.RuleID
}

// SetRuleID sets the value of RuleID.
func (s *DomainInsertWriteContextRegexRuleOK) SetRuleID(val RuleID) {
	s.RuleID = val
}

func (*DomainInsertWriteContextRegexRuleOK) domainInsertWriteContextRegexRuleRes() {}

type DomainListCapsulesSortOn string

const (
	DomainListCapsulesSortOnCreated DomainListCapsulesSortOn = "created"
	DomainListCapsulesSortOnID      DomainListCapsulesSortOn = "id"
	DomainListCapsulesSortOnSize    DomainListCapsulesSortOn = "size"
)

// AllValues returns all DomainListCapsulesSortOn values.
func (DomainListCapsulesSortOn) AllValues() []DomainListCapsulesSortOn {
	return []DomainListCapsulesSortOn{
		DomainListCapsulesSortOnCreated,
		DomainListCapsulesSortOnID,
		DomainListCapsulesSortOnSize,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainListCapsulesSortOn) MarshalText() ([]byte, error) {
	switch s {
	case DomainListCapsulesSortOnCreated:
		return []byte(s), nil
	case DomainListCapsulesSortOnID:
		return []byte(s), nil
	case DomainListCapsulesSortOnSize:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainListCapsulesSortOn) UnmarshalText(data []byte) error {
	switch DomainListCapsulesSortOn(data) {
	case DomainListCapsulesSortOnCreated:
		*s = DomainListCapsulesSortOnCreated
		return nil
	case DomainListCapsulesSortOnID:
		*s = DomainListCapsulesSortOnID
		return nil
	case DomainListCapsulesSortOnSize:
		*s = DomainListCapsulesSortOnSize
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration of a domain peer. If the import alias is absent, the domain ID, without the initial
// "dm-" prefix, will be used.
// Ref: #/components/schemas/DomainPeerConfig
type DomainPeerConfig struct {
	// A list of identity providers that this peer domain may import from us.
	ExportIdentityProviders []IdentityProviderName `json:"exportIdentityProviders"`
	// If present and true, this overrides exportIdentityProviders and exports all identity providers.
	ExportAllIdentityProviders OptBool `json:"exportAllIdentityProviders"`
	// A list of fact types that this peer domain may import from us.
	ExportFacts []FactTypeName `json:"exportFacts"`
	// If present and true, this overrides exportFacts and exports all fact types.
	ExportAllFacts OptBool `json:"exportAllFacts"`
	// A list of read contexts that this peer domain may import from us.
	ExportReadContexts []ReadContextName `json:"exportReadContexts"`
	// If present and true, this overrides exportReadContexts and exports all read contexts.
	ExportAllReadContexts OptBool `json:"exportAllReadContexts"`
	// A list of write contexts that this peer domain may import from us.
	ExportWriteContexts []WriteContextName `json:"exportWriteContexts"`
	// If present and true, this overrides exportWriteContexts and exports all write contexts.
	ExportAllWriteContexts OptBool `json:"exportAllWriteContexts"`
	// A list of capabilities that this peer may import from us.
	ExportCapabilities []CapabilityName `json:"exportCapabilities"`
	// If present and true, this overrides exportCapabilities and exports all capabilities.
	ExportAllCapabilities OptBool `json:"exportAllCapabilities"`
	// Export domain policy to the target domain. Export of individual policy rules can be configured by
	// restricting which capabilities and facts are exported, as rules referencing unexported facts and
	// capabilities will not be exported.
	ExportDomainPolicy OptBool `json:"exportDomainPolicy"`
	// Allow the target domain to query the capsule access log for this domain.
	ExportCapsuleAccessLog OptBool `json:"exportCapsuleAccessLog"`
	// Allow the target domain to query the control audit log for this domain.
	ExportControlLog OptBool `json:"exportControlLog"`
	// Allow the target domain to query the list of capsules and their tags.
	ExportCapsuleManifest OptBool `json:"exportCapsuleManifest"`
	// Let this peer domain bill us for its usage. Admins/users in the peer domain may not see any
	// sensitive billing information, they may just "forward" the bill to our domain.
	ExportBilling OptBool `json:"exportBilling"`
	// Let this peer domain forward all admin communications to the admin contact for our domain.
	// Admins/users in the peer domain may not see the admin contact details, they can just "forward"
	// communication to the admin contact of our domain.
	ExportAdminContact OptBool `json:"exportAdminContact"`
	// A list of names for this domain. These can be used to look up this domain later by using
	// domainFromNickname. All nicknames for a peer domain must be unique within a domain.
	Nicknames   []string       `json:"nicknames"`
	ImportAlias OptImportAlias `json:"importAlias"`
	// Forward all charges incurred from operations in our domain to the peer domain. If this is set to
	// true, the configured billing details in our domain have no effect.
	ForwardBilling OptBool `json:"forwardBilling"`
	// Forward all admin communications (account reset, billing, etc) that would be sent to the admin of
	// our domain, to this peer domain instead. If this is set to true, the list of admin contacts
	// configured in our domain is completely ignored.
	ForwardAdminCommunications OptBool `json:"forwardAdminCommunications"`
	// A list of identity providers to import from the peer domain.
	ImportIdentityProviders []IdentityProviderName `json:"importIdentityProviders"`
	// If present and true, this overrides importIdentityProviders and imports all available
	// identityProviders contexts.
	ImportAllIdentityProviders OptBool `json:"importAllIdentityProviders"`
	// A list of facts types to import from the peer domain.
	ImportFacts []FactTypeName `json:"importFacts"`
	// If present and true, this overrides importFacts and imports all available facts.
	ImportAllFacts OptBool `json:"importAllFacts"`
	// A list of read contexts to import from the peer domain.
	ImportReadContexts []ReadContextName `json:"importReadContexts"`
	// If present and true, this overrides importReadContexts and imports all available read contexts.
	ImportAllReadContexts OptBool `json:"importAllReadContexts"`
	// A list of write contexts to import from the peer domain.
	ImportWriteContexts []WriteContextName `json:"importWriteContexts"`
	// If present and true, this overrides importWriteContexts and imports all available write contexts.
	ImportAllWriteContexts OptBool `json:"importAllWriteContexts"`
	// A list of capabilities to import from the peer domain.
	ImportCapabilities []CapabilityName `json:"importCapabilities"`
	// If present and true, this overrides importCapabilities and imports  all available capabilities.
	ImportAllCapabilities OptBool `json:"importAllCapabilities"`
	// Import all domain policy (limited by the imported capabilities and facts) into this domain.
	ImportDomainPolicy OptBool `json:"importDomainPolicy"`
	// For read contexts and domain policy, is the peer domain higher precedence  (<0) or lower
	// precedence (>0) than the rules configured in the current domain (0). The precedence is also used
	// to order the imported read context rules and domain policy rules with respect to policy imported
	// from other peers. Note  that imported policy is always executed as an atomic unit, so interleaving
	//  of imported rules and rules that exist in this domain is not possible.
	ImportPrecedence OptInt `json:"importPrecedence"`
	// When querying the capsule access log, should results from this peer domain automatically be merged
	// in.
	ImportCapsuleAccessLog OptBool `json:"importCapsuleAccessLog"`
	// When querying the control audit log, should results from this peer domain automatically be merged
	// in.
	ImportControlLog OptBool `json:"importControlLog"`
	// When querying for capsules, should results from this peer domain automatically be merged in.
	ImportCapsuleManifest OptBool `json:"importCapsuleManifest"`
	// The default display name used for this domain. The display name is also treated as a nickname and
	// so can be used from domainFromNickname.
	DisplayName string `json:"displayName"`
}

// GetExportIdentityProviders returns the value of ExportIdentityProviders.
func (s *DomainPeerConfig) GetExportIdentityProviders() []IdentityProviderName {
	return s.ExportIdentityProviders
}

// GetExportAllIdentityProviders returns the value of ExportAllIdentityProviders.
func (s *DomainPeerConfig) GetExportAllIdentityProviders() OptBool {
	return s.ExportAllIdentityProviders
}

// GetExportFacts returns the value of ExportFacts.
func (s *DomainPeerConfig) GetExportFacts() []FactTypeName {
	return s.ExportFacts
}

// GetExportAllFacts returns the value of ExportAllFacts.
func (s *DomainPeerConfig) GetExportAllFacts() OptBool {
	return s.ExportAllFacts
}

// GetExportReadContexts returns the value of ExportReadContexts.
func (s *DomainPeerConfig) GetExportReadContexts() []ReadContextName {
	return s.ExportReadContexts
}

// GetExportAllReadContexts returns the value of ExportAllReadContexts.
func (s *DomainPeerConfig) GetExportAllReadContexts() OptBool {
	return s.ExportAllReadContexts
}

// GetExportWriteContexts returns the value of ExportWriteContexts.
func (s *DomainPeerConfig) GetExportWriteContexts() []WriteContextName {
	return s.ExportWriteContexts
}

// GetExportAllWriteContexts returns the value of ExportAllWriteContexts.
func (s *DomainPeerConfig) GetExportAllWriteContexts() OptBool {
	return s.ExportAllWriteContexts
}

// GetExportCapabilities returns the value of ExportCapabilities.
func (s *DomainPeerConfig) GetExportCapabilities() []CapabilityName {
	return s.ExportCapabilities
}

// GetExportAllCapabilities returns the value of ExportAllCapabilities.
func (s *DomainPeerConfig) GetExportAllCapabilities() OptBool {
	return s.ExportAllCapabilities
}

// GetExportDomainPolicy returns the value of ExportDomainPolicy.
func (s *DomainPeerConfig) GetExportDomainPolicy() OptBool {
	return s.ExportDomainPolicy
}

// GetExportCapsuleAccessLog returns the value of ExportCapsuleAccessLog.
func (s *DomainPeerConfig) GetExportCapsuleAccessLog() OptBool {
	return s.ExportCapsuleAccessLog
}

// GetExportControlLog returns the value of ExportControlLog.
func (s *DomainPeerConfig) GetExportControlLog() OptBool {
	return s.ExportControlLog
}

// GetExportCapsuleManifest returns the value of ExportCapsuleManifest.
func (s *DomainPeerConfig) GetExportCapsuleManifest() OptBool {
	return s.ExportCapsuleManifest
}

// GetExportBilling returns the value of ExportBilling.
func (s *DomainPeerConfig) GetExportBilling() OptBool {
	return s.ExportBilling
}

// GetExportAdminContact returns the value of ExportAdminContact.
func (s *DomainPeerConfig) GetExportAdminContact() OptBool {
	return s.ExportAdminContact
}

// GetNicknames returns the value of Nicknames.
func (s *DomainPeerConfig) GetNicknames() []string {
	return s.Nicknames
}

// GetImportAlias returns the value of ImportAlias.
func (s *DomainPeerConfig) GetImportAlias() OptImportAlias {
	return s.ImportAlias
}

// GetForwardBilling returns the value of ForwardBilling.
func (s *DomainPeerConfig) GetForwardBilling() OptBool {
	return s.ForwardBilling
}

// GetForwardAdminCommunications returns the value of ForwardAdminCommunications.
func (s *DomainPeerConfig) GetForwardAdminCommunications() OptBool {
	return s.ForwardAdminCommunications
}

// GetImportIdentityProviders returns the value of ImportIdentityProviders.
func (s *DomainPeerConfig) GetImportIdentityProviders() []IdentityProviderName {
	return s.ImportIdentityProviders
}

// GetImportAllIdentityProviders returns the value of ImportAllIdentityProviders.
func (s *DomainPeerConfig) GetImportAllIdentityProviders() OptBool {
	return s.ImportAllIdentityProviders
}

// GetImportFacts returns the value of ImportFacts.
func (s *DomainPeerConfig) GetImportFacts() []FactTypeName {
	return s.ImportFacts
}

// GetImportAllFacts returns the value of ImportAllFacts.
func (s *DomainPeerConfig) GetImportAllFacts() OptBool {
	return s.ImportAllFacts
}

// GetImportReadContexts returns the value of ImportReadContexts.
func (s *DomainPeerConfig) GetImportReadContexts() []ReadContextName {
	return s.ImportReadContexts
}

// GetImportAllReadContexts returns the value of ImportAllReadContexts.
func (s *DomainPeerConfig) GetImportAllReadContexts() OptBool {
	return s.ImportAllReadContexts
}

// GetImportWriteContexts returns the value of ImportWriteContexts.
func (s *DomainPeerConfig) GetImportWriteContexts() []WriteContextName {
	return s.ImportWriteContexts
}

// GetImportAllWriteContexts returns the value of ImportAllWriteContexts.
func (s *DomainPeerConfig) GetImportAllWriteContexts() OptBool {
	return s.ImportAllWriteContexts
}

// GetImportCapabilities returns the value of ImportCapabilities.
func (s *DomainPeerConfig) GetImportCapabilities() []CapabilityName {
	return s.ImportCapabilities
}

// GetImportAllCapabilities returns the value of ImportAllCapabilities.
func (s *DomainPeerConfig) GetImportAllCapabilities() OptBool {
	return s.ImportAllCapabilities
}

// GetImportDomainPolicy returns the value of ImportDomainPolicy.
func (s *DomainPeerConfig) GetImportDomainPolicy() OptBool {
	return s.ImportDomainPolicy
}

// GetImportPrecedence returns the value of ImportPrecedence.
func (s *DomainPeerConfig) GetImportPrecedence() OptInt {
	return s.ImportPrecedence
}

// GetImportCapsuleAccessLog returns the value of ImportCapsuleAccessLog.
func (s *DomainPeerConfig) GetImportCapsuleAccessLog() OptBool {
	return s.ImportCapsuleAccessLog
}

// GetImportControlLog returns the value of ImportControlLog.
func (s *DomainPeerConfig) GetImportControlLog() OptBool {
	return s.ImportControlLog
}

// GetImportCapsuleManifest returns the value of ImportCapsuleManifest.
func (s *DomainPeerConfig) GetImportCapsuleManifest() OptBool {
	return s.ImportCapsuleManifest
}

// GetDisplayName returns the value of DisplayName.
func (s *DomainPeerConfig) GetDisplayName() string {
	return s.DisplayName
}

// SetExportIdentityProviders sets the value of ExportIdentityProviders.
func (s *DomainPeerConfig) SetExportIdentityProviders(val []IdentityProviderName) {
	s.ExportIdentityProviders = val
}

// SetExportAllIdentityProviders sets the value of ExportAllIdentityProviders.
func (s *DomainPeerConfig) SetExportAllIdentityProviders(val OptBool) {
	s.ExportAllIdentityProviders = val
}

// SetExportFacts sets the value of ExportFacts.
func (s *DomainPeerConfig) SetExportFacts(val []FactTypeName) {
	s.ExportFacts = val
}

// SetExportAllFacts sets the value of ExportAllFacts.
func (s *DomainPeerConfig) SetExportAllFacts(val OptBool) {
	s.ExportAllFacts = val
}

// SetExportReadContexts sets the value of ExportReadContexts.
func (s *DomainPeerConfig) SetExportReadContexts(val []ReadContextName) {
	s.ExportReadContexts = val
}

// SetExportAllReadContexts sets the value of ExportAllReadContexts.
func (s *DomainPeerConfig) SetExportAllReadContexts(val OptBool) {
	s.ExportAllReadContexts = val
}

// SetExportWriteContexts sets the value of ExportWriteContexts.
func (s *DomainPeerConfig) SetExportWriteContexts(val []WriteContextName) {
	s.ExportWriteContexts = val
}

// SetExportAllWriteContexts sets the value of ExportAllWriteContexts.
func (s *DomainPeerConfig) SetExportAllWriteContexts(val OptBool) {
	s.ExportAllWriteContexts = val
}

// SetExportCapabilities sets the value of ExportCapabilities.
func (s *DomainPeerConfig) SetExportCapabilities(val []CapabilityName) {
	s.ExportCapabilities = val
}

// SetExportAllCapabilities sets the value of ExportAllCapabilities.
func (s *DomainPeerConfig) SetExportAllCapabilities(val OptBool) {
	s.ExportAllCapabilities = val
}

// SetExportDomainPolicy sets the value of ExportDomainPolicy.
func (s *DomainPeerConfig) SetExportDomainPolicy(val OptBool) {
	s.ExportDomainPolicy = val
}

// SetExportCapsuleAccessLog sets the value of ExportCapsuleAccessLog.
func (s *DomainPeerConfig) SetExportCapsuleAccessLog(val OptBool) {
	s.ExportCapsuleAccessLog = val
}

// SetExportControlLog sets the value of ExportControlLog.
func (s *DomainPeerConfig) SetExportControlLog(val OptBool) {
	s.ExportControlLog = val
}

// SetExportCapsuleManifest sets the value of ExportCapsuleManifest.
func (s *DomainPeerConfig) SetExportCapsuleManifest(val OptBool) {
	s.ExportCapsuleManifest = val
}

// SetExportBilling sets the value of ExportBilling.
func (s *DomainPeerConfig) SetExportBilling(val OptBool) {
	s.ExportBilling = val
}

// SetExportAdminContact sets the value of ExportAdminContact.
func (s *DomainPeerConfig) SetExportAdminContact(val OptBool) {
	s.ExportAdminContact = val
}

// SetNicknames sets the value of Nicknames.
func (s *DomainPeerConfig) SetNicknames(val []string) {
	s.Nicknames = val
}

// SetImportAlias sets the value of ImportAlias.
func (s *DomainPeerConfig) SetImportAlias(val OptImportAlias) {
	s.ImportAlias = val
}

// SetForwardBilling sets the value of ForwardBilling.
func (s *DomainPeerConfig) SetForwardBilling(val OptBool) {
	s.ForwardBilling = val
}

// SetForwardAdminCommunications sets the value of ForwardAdminCommunications.
func (s *DomainPeerConfig) SetForwardAdminCommunications(val OptBool) {
	s.ForwardAdminCommunications = val
}

// SetImportIdentityProviders sets the value of ImportIdentityProviders.
func (s *DomainPeerConfig) SetImportIdentityProviders(val []IdentityProviderName) {
	s.ImportIdentityProviders = val
}

// SetImportAllIdentityProviders sets the value of ImportAllIdentityProviders.
func (s *DomainPeerConfig) SetImportAllIdentityProviders(val OptBool) {
	s.ImportAllIdentityProviders = val
}

// SetImportFacts sets the value of ImportFacts.
func (s *DomainPeerConfig) SetImportFacts(val []FactTypeName) {
	s.ImportFacts = val
}

// SetImportAllFacts sets the value of ImportAllFacts.
func (s *DomainPeerConfig) SetImportAllFacts(val OptBool) {
	s.ImportAllFacts = val
}

// SetImportReadContexts sets the value of ImportReadContexts.
func (s *DomainPeerConfig) SetImportReadContexts(val []ReadContextName) {
	s.ImportReadContexts = val
}

// SetImportAllReadContexts sets the value of ImportAllReadContexts.
func (s *DomainPeerConfig) SetImportAllReadContexts(val OptBool) {
	s.ImportAllReadContexts = val
}

// SetImportWriteContexts sets the value of ImportWriteContexts.
func (s *DomainPeerConfig) SetImportWriteContexts(val []WriteContextName) {
	s.ImportWriteContexts = val
}

// SetImportAllWriteContexts sets the value of ImportAllWriteContexts.
func (s *DomainPeerConfig) SetImportAllWriteContexts(val OptBool) {
	s.ImportAllWriteContexts = val
}

// SetImportCapabilities sets the value of ImportCapabilities.
func (s *DomainPeerConfig) SetImportCapabilities(val []CapabilityName) {
	s.ImportCapabilities = val
}

// SetImportAllCapabilities sets the value of ImportAllCapabilities.
func (s *DomainPeerConfig) SetImportAllCapabilities(val OptBool) {
	s.ImportAllCapabilities = val
}

// SetImportDomainPolicy sets the value of ImportDomainPolicy.
func (s *DomainPeerConfig) SetImportDomainPolicy(val OptBool) {
	s.ImportDomainPolicy = val
}

// SetImportPrecedence sets the value of ImportPrecedence.
func (s *DomainPeerConfig) SetImportPrecedence(val OptInt) {
	s.ImportPrecedence = val
}

// SetImportCapsuleAccessLog sets the value of ImportCapsuleAccessLog.
func (s *DomainPeerConfig) SetImportCapsuleAccessLog(val OptBool) {
	s.ImportCapsuleAccessLog = val
}

// SetImportControlLog sets the value of ImportControlLog.
func (s *DomainPeerConfig) SetImportControlLog(val OptBool) {
	s.ImportControlLog = val
}

// SetImportCapsuleManifest sets the value of ImportCapsuleManifest.
func (s *DomainPeerConfig) SetImportCapsuleManifest(val OptBool) {
	s.ImportCapsuleManifest = val
}

// SetDisplayName sets the value of DisplayName.
func (s *DomainPeerConfig) SetDisplayName(val string) {
	s.DisplayName = val
}

func (*DomainPeerConfig) domainGetPeerConfigRes() {}

// Information about the domains that this domain is peered with.
// Ref: #/components/schemas/DomainPeerList
type DomainPeerList struct {
	Peers []DomainPeerListPeersItem `json:"peers"`
}

// GetPeers returns the value of Peers.
func (s *DomainPeerList) GetPeers() []DomainPeerListPeersItem {
	return s.Peers
}

// SetPeers sets the value of Peers.
func (s *DomainPeerList) SetPeers(val []DomainPeerListPeersItem) {
	s.Peers = val
}

func (*DomainPeerList) domainListPeersRes() {}

type DomainPeerListPeersItem struct {
	ID    DomainID    `json:"id"`
	Alias ImportAlias `json:"alias"`
}

// GetID returns the value of ID.
func (s *DomainPeerListPeersItem) GetID() DomainID {
	return s.ID
}

// GetAlias returns the value of Alias.
func (s *DomainPeerListPeersItem) GetAlias() ImportAlias {
	return s.Alias
}

// SetID sets the value of ID.
func (s *DomainPeerListPeersItem) SetID(val DomainID) {
	s.ID = val
}

// SetAlias sets the value of Alias.
func (s *DomainPeerListPeersItem) SetAlias(val ImportAlias) {
	s.Alias = val
}

// A domain's policy. These rules govern who can view, edit or use which parts of a domain's
// configuration. Rules are executed in order of ascending priority number, and the execution stops
// with the first matching rule. If no rules match, the default action is 'deny'. If domain edit
// policy rules are imported from other domains in the peering configuration, the rules in those
// domains are independently evaluated to yield an allow/deny result and the final result from every
// domain, including this one, will be ANDed together. Thus, a deny in any domain yields an overall
// deny, and allow is only returned if all domains return allow.
// Ref: #/components/schemas/DomainPolicy
type DomainPolicy struct {
	Rules []DomainPolicyRule `json:"rules"`
}

// GetRules returns the value of Rules.
func (s *DomainPolicy) GetRules() []DomainPolicyRule {
	return s.Rules
}

// SetRules sets the value of Rules.
func (s *DomainPolicy) SetRules(val []DomainPolicyRule) {
	s.Rules = val
}

func (*DomainPolicy) domainListPolicyRulesRes()     {}
func (*DomainPolicy) domainRenumberPolicyRulesRes() {}

// DomainPolicyFlushOK is response for DomainPolicyFlush operation.
type DomainPolicyFlushOK struct{}

func (*DomainPolicyFlushOK) domainPolicyFlushRes() {}

// A rule governing the domain's policy. All domain identity capabilities must match (AND) for the
// action to take effect. If the domainIdentity or facts sections are omitted, they match all domain
// identities and any fact configurations respectively.
// Ref: #/components/schemas/DomainPolicyRule
type DomainPolicyRule struct {
	ID             RuleReference     `json:"id"`
	DomainIdentity OptCapabilityRule `json:"domainIdentity"`
	Facts          FactPolicyRules   `json:"facts"`
	// The path this rule governs. This pattern may contain glob expressions (e.g. '*' and '**').
	Path      string              `json:"path"`
	Operation PolicyRuleOperation `json:"operation"`
	Result    PolicyRuleResult    `json:"result"`
	// This rule's priority. Lower priority numbers rules are evaluated first.
	Priority int `json:"priority"`
	// If this rule is disabled or not.
	Disabled bool `json:"disabled"`
	// True if this write context is imported.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
	// For imported rules, whether this rule is evaluated before (<0) or after (>0) the current domain's
	// rules. Always 0 for non-imported rules.
	Precedence int `json:"precedence"`
	// If the rule was created referencing a resource that was valid at the time of the rule's creation,
	// but has since become invalid (e.g. if it was a peered resource and the peering has changed) then
	// the rule will be ignored during policy evaluation, and "invalid" will be true when listing the
	// domain policy rules.
	Invalid OptBool `json:"invalid"`
}

// GetID returns the value of ID.
func (s *DomainPolicyRule) GetID() RuleReference {
	return s.ID
}

// GetDomainIdentity returns the value of DomainIdentity.
func (s *DomainPolicyRule) GetDomainIdentity() OptCapabilityRule {
	return s.DomainIdentity
}

// GetFacts returns the value of Facts.
func (s *DomainPolicyRule) GetFacts() FactPolicyRules {
	return s.Facts
}

// GetPath returns the value of Path.
func (s *DomainPolicyRule) GetPath() string {
	return s.Path
}

// GetOperation returns the value of Operation.
func (s *DomainPolicyRule) GetOperation() PolicyRuleOperation {
	return s.Operation
}

// GetResult returns the value of Result.
func (s *DomainPolicyRule) GetResult() PolicyRuleResult {
	return s.Result
}

// GetPriority returns the value of Priority.
func (s *DomainPolicyRule) GetPriority() int {
	return s.Priority
}

// GetDisabled returns the value of Disabled.
func (s *DomainPolicyRule) GetDisabled() bool {
	return s.Disabled
}

// GetImported returns the value of Imported.
func (s *DomainPolicyRule) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *DomainPolicyRule) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *DomainPolicyRule) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// GetPrecedence returns the value of Precedence.
func (s *DomainPolicyRule) GetPrecedence() int {
	return s.Precedence
}

// GetInvalid returns the value of Invalid.
func (s *DomainPolicyRule) GetInvalid() OptBool {
	return s.Invalid
}

// SetID sets the value of ID.
func (s *DomainPolicyRule) SetID(val RuleReference) {
	s.ID = val
}

// SetDomainIdentity sets the value of DomainIdentity.
func (s *DomainPolicyRule) SetDomainIdentity(val OptCapabilityRule) {
	s.DomainIdentity = val
}

// SetFacts sets the value of Facts.
func (s *DomainPolicyRule) SetFacts(val FactPolicyRules) {
	s.Facts = val
}

// SetPath sets the value of Path.
func (s *DomainPolicyRule) SetPath(val string) {
	s.Path = val
}

// SetOperation sets the value of Operation.
func (s *DomainPolicyRule) SetOperation(val PolicyRuleOperation) {
	s.Operation = val
}

// SetResult sets the value of Result.
func (s *DomainPolicyRule) SetResult(val PolicyRuleResult) {
	s.Result = val
}

// SetPriority sets the value of Priority.
func (s *DomainPolicyRule) SetPriority(val int) {
	s.Priority = val
}

// SetDisabled sets the value of Disabled.
func (s *DomainPolicyRule) SetDisabled(val bool) {
	s.Disabled = val
}

// SetImported sets the value of Imported.
func (s *DomainPolicyRule) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *DomainPolicyRule) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *DomainPolicyRule) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

// SetPrecedence sets the value of Precedence.
func (s *DomainPolicyRule) SetPrecedence(val int) {
	s.Precedence = val
}

// SetInvalid sets the value of Invalid.
func (s *DomainPolicyRule) SetInvalid(val OptBool) {
	s.Invalid = val
}

func (*DomainPolicyRule) domainCreatePolicyRuleRes() {}

// Private information about a domain.
// Ref: #/components/schemas/DomainPrivateInfo
type DomainPrivateInfo struct {
	// User friendly display name.
	DefaultDisplayName string   `json:"defaultDisplayName"`
	ID                 DomainID `json:"id"`
	// A list of identity providers configured in a domain.
	IdentityProviders []DomainIdentityProviderInfo `json:"identityProviders"`
}

// GetDefaultDisplayName returns the value of DefaultDisplayName.
func (s *DomainPrivateInfo) GetDefaultDisplayName() string {
	return s.DefaultDisplayName
}

// GetID returns the value of ID.
func (s *DomainPrivateInfo) GetID() DomainID {
	return s.ID
}

// GetIdentityProviders returns the value of IdentityProviders.
func (s *DomainPrivateInfo) GetIdentityProviders() []DomainIdentityProviderInfo {
	return s.IdentityProviders
}

// SetDefaultDisplayName sets the value of DefaultDisplayName.
func (s *DomainPrivateInfo) SetDefaultDisplayName(val string) {
	s.DefaultDisplayName = val
}

// SetID sets the value of ID.
func (s *DomainPrivateInfo) SetID(val DomainID) {
	s.ID = val
}

// SetIdentityProviders sets the value of IdentityProviders.
func (s *DomainPrivateInfo) SetIdentityProviders(val []DomainIdentityProviderInfo) {
	s.IdentityProviders = val
}

func (*DomainPrivateInfo) domainGetPrivateInfoRes() {}

// Public information about a domain.
// Ref: #/components/schemas/DomainPublicInfo
type DomainPublicInfo struct {
	// User friendly display name.
	DefaultDisplayName string   `json:"defaultDisplayName"`
	ID                 DomainID `json:"id"`
	// A list of identity providers configured in a domain.
	IdentityProviders []DomainIdentityProviderInfo `json:"identityProviders"`
}

// GetDefaultDisplayName returns the value of DefaultDisplayName.
func (s *DomainPublicInfo) GetDefaultDisplayName() string {
	return s.DefaultDisplayName
}

// GetID returns the value of ID.
func (s *DomainPublicInfo) GetID() DomainID {
	return s.ID
}

// GetIdentityProviders returns the value of IdentityProviders.
func (s *DomainPublicInfo) GetIdentityProviders() []DomainIdentityProviderInfo {
	return s.IdentityProviders
}

// SetDefaultDisplayName sets the value of DefaultDisplayName.
func (s *DomainPublicInfo) SetDefaultDisplayName(val string) {
	s.DefaultDisplayName = val
}

// SetID sets the value of ID.
func (s *DomainPublicInfo) SetID(val DomainID) {
	s.ID = val
}

// SetIdentityProviders sets the value of IdentityProviders.
func (s *DomainPublicInfo) SetIdentityProviders(val []DomainIdentityProviderInfo) {
	s.IdentityProviders = val
}

func (*DomainPublicInfo) domainGetPublicInfoRes() {}

// DomainPutCapabilityOK is response for DomainPutCapability operation.
type DomainPutCapabilityOK struct{}

func (*DomainPutCapabilityOK) domainPutCapabilityRes() {}

// DomainPutFactTypeOK is response for DomainPutFactType operation.
type DomainPutFactTypeOK struct{}

func (*DomainPutFactTypeOK) domainPutFactTypeRes() {}

type DomainQueryAccessLogOperationType string

const (
	DomainQueryAccessLogOperationTypeCreate DomainQueryAccessLogOperationType = "create"
	DomainQueryAccessLogOperationTypeOpen   DomainQueryAccessLogOperationType = "open"
	DomainQueryAccessLogOperationTypeRead   DomainQueryAccessLogOperationType = "read"
	DomainQueryAccessLogOperationTypeWrite  DomainQueryAccessLogOperationType = "write"
)

// AllValues returns all DomainQueryAccessLogOperationType values.
func (DomainQueryAccessLogOperationType) AllValues() []DomainQueryAccessLogOperationType {
	return []DomainQueryAccessLogOperationType{
		DomainQueryAccessLogOperationTypeCreate,
		DomainQueryAccessLogOperationTypeOpen,
		DomainQueryAccessLogOperationTypeRead,
		DomainQueryAccessLogOperationTypeWrite,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainQueryAccessLogOperationType) MarshalText() ([]byte, error) {
	switch s {
	case DomainQueryAccessLogOperationTypeCreate:
		return []byte(s), nil
	case DomainQueryAccessLogOperationTypeOpen:
		return []byte(s), nil
	case DomainQueryAccessLogOperationTypeRead:
		return []byte(s), nil
	case DomainQueryAccessLogOperationTypeWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainQueryAccessLogOperationType) UnmarshalText(data []byte) error {
	switch DomainQueryAccessLogOperationType(data) {
	case DomainQueryAccessLogOperationTypeCreate:
		*s = DomainQueryAccessLogOperationTypeCreate
		return nil
	case DomainQueryAccessLogOperationTypeOpen:
		*s = DomainQueryAccessLogOperationTypeOpen
		return nil
	case DomainQueryAccessLogOperationTypeRead:
		*s = DomainQueryAccessLogOperationTypeRead
		return nil
	case DomainQueryAccessLogOperationTypeWrite:
		*s = DomainQueryAccessLogOperationTypeWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DomainQueryAccessLogSingleCapsuleOperationType string

const (
	DomainQueryAccessLogSingleCapsuleOperationTypeCreate DomainQueryAccessLogSingleCapsuleOperationType = "create"
	DomainQueryAccessLogSingleCapsuleOperationTypeOpen   DomainQueryAccessLogSingleCapsuleOperationType = "open"
	DomainQueryAccessLogSingleCapsuleOperationTypeRead   DomainQueryAccessLogSingleCapsuleOperationType = "read"
	DomainQueryAccessLogSingleCapsuleOperationTypeWrite  DomainQueryAccessLogSingleCapsuleOperationType = "write"
)

// AllValues returns all DomainQueryAccessLogSingleCapsuleOperationType values.
func (DomainQueryAccessLogSingleCapsuleOperationType) AllValues() []DomainQueryAccessLogSingleCapsuleOperationType {
	return []DomainQueryAccessLogSingleCapsuleOperationType{
		DomainQueryAccessLogSingleCapsuleOperationTypeCreate,
		DomainQueryAccessLogSingleCapsuleOperationTypeOpen,
		DomainQueryAccessLogSingleCapsuleOperationTypeRead,
		DomainQueryAccessLogSingleCapsuleOperationTypeWrite,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainQueryAccessLogSingleCapsuleOperationType) MarshalText() ([]byte, error) {
	switch s {
	case DomainQueryAccessLogSingleCapsuleOperationTypeCreate:
		return []byte(s), nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeOpen:
		return []byte(s), nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeRead:
		return []byte(s), nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeWrite:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainQueryAccessLogSingleCapsuleOperationType) UnmarshalText(data []byte) error {
	switch DomainQueryAccessLogSingleCapsuleOperationType(data) {
	case DomainQueryAccessLogSingleCapsuleOperationTypeCreate:
		*s = DomainQueryAccessLogSingleCapsuleOperationTypeCreate
		return nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeOpen:
		*s = DomainQueryAccessLogSingleCapsuleOperationTypeOpen
		return nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeRead:
		*s = DomainQueryAccessLogSingleCapsuleOperationTypeRead
		return nil
	case DomainQueryAccessLogSingleCapsuleOperationTypeWrite:
		*s = DomainQueryAccessLogSingleCapsuleOperationTypeWrite
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DomainReadContextFlushOK is response for DomainReadContextFlush operation.
type DomainReadContextFlushOK struct{}

func (*DomainReadContextFlushOK) domainReadContextFlushRes() {}

// A list of the resources and permissions available.
// Ref: #/components/schemas/DomainResourceSummary
type DomainResourceSummary struct {
	Schema []DomainResourceSummarySchemaItem `json:"schema"`
}

// GetSchema returns the value of Schema.
func (s *DomainResourceSummary) GetSchema() []DomainResourceSummarySchemaItem {
	return s.Schema
}

// SetSchema sets the value of Schema.
func (s *DomainResourceSummary) SetSchema(val []DomainResourceSummarySchemaItem) {
	s.Schema = val
}

func (*DomainResourceSummary) domainListResourcesRes() {}

type DomainResourceSummarySchemaItem struct {
	// The resource path. May contain {placeholder} entries.
	Resource   string                                          `json:"resource"`
	Operations []DomainResourceSummarySchemaItemOperationsItem `json:"operations"`
	// Mapping from placeholder name to list of values.
	PlaceholderValues DomainResourceSummarySchemaItemPlaceholderValues `json:"placeholderValues"`
	// A user-friendly description of this resource.
	Description string `json:"description"`
}

// GetResource returns the value of Resource.
func (s *DomainResourceSummarySchemaItem) GetResource() string {
	return s.Resource
}

// GetOperations returns the value of Operations.
func (s *DomainResourceSummarySchemaItem) GetOperations() []DomainResourceSummarySchemaItemOperationsItem {
	return s.Operations
}

// GetPlaceholderValues returns the value of PlaceholderValues.
func (s *DomainResourceSummarySchemaItem) GetPlaceholderValues() DomainResourceSummarySchemaItemPlaceholderValues {
	return s.PlaceholderValues
}

// GetDescription returns the value of Description.
func (s *DomainResourceSummarySchemaItem) GetDescription() string {
	return s.Description
}

// SetResource sets the value of Resource.
func (s *DomainResourceSummarySchemaItem) SetResource(val string) {
	s.Resource = val
}

// SetOperations sets the value of Operations.
func (s *DomainResourceSummarySchemaItem) SetOperations(val []DomainResourceSummarySchemaItemOperationsItem) {
	s.Operations = val
}

// SetPlaceholderValues sets the value of PlaceholderValues.
func (s *DomainResourceSummarySchemaItem) SetPlaceholderValues(val DomainResourceSummarySchemaItemPlaceholderValues) {
	s.PlaceholderValues = val
}

// SetDescription sets the value of Description.
func (s *DomainResourceSummarySchemaItem) SetDescription(val string) {
	s.Description = val
}

type DomainResourceSummarySchemaItemOperationsItem string

const (
	DomainResourceSummarySchemaItemOperationsItemEdit DomainResourceSummarySchemaItemOperationsItem = "edit"
	DomainResourceSummarySchemaItemOperationsItemView DomainResourceSummarySchemaItemOperationsItem = "view"
	DomainResourceSummarySchemaItemOperationsItemUse  DomainResourceSummarySchemaItemOperationsItem = "use"
)

// AllValues returns all DomainResourceSummarySchemaItemOperationsItem values.
func (DomainResourceSummarySchemaItemOperationsItem) AllValues() []DomainResourceSummarySchemaItemOperationsItem {
	return []DomainResourceSummarySchemaItemOperationsItem{
		DomainResourceSummarySchemaItemOperationsItemEdit,
		DomainResourceSummarySchemaItemOperationsItemView,
		DomainResourceSummarySchemaItemOperationsItemUse,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainResourceSummarySchemaItemOperationsItem) MarshalText() ([]byte, error) {
	switch s {
	case DomainResourceSummarySchemaItemOperationsItemEdit:
		return []byte(s), nil
	case DomainResourceSummarySchemaItemOperationsItemView:
		return []byte(s), nil
	case DomainResourceSummarySchemaItemOperationsItemUse:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainResourceSummarySchemaItemOperationsItem) UnmarshalText(data []byte) error {
	switch DomainResourceSummarySchemaItemOperationsItem(data) {
	case DomainResourceSummarySchemaItemOperationsItemEdit:
		*s = DomainResourceSummarySchemaItemOperationsItemEdit
		return nil
	case DomainResourceSummarySchemaItemOperationsItemView:
		*s = DomainResourceSummarySchemaItemOperationsItemView
		return nil
	case DomainResourceSummarySchemaItemOperationsItemUse:
		*s = DomainResourceSummarySchemaItemOperationsItemUse
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Mapping from placeholder name to list of values.
type DomainResourceSummarySchemaItemPlaceholderValues map[string][]string

func (s *DomainResourceSummarySchemaItemPlaceholderValues) init() DomainResourceSummarySchemaItemPlaceholderValues {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

type DomainRotateRootEncryptionKeysReq struct{}

// DomainSealCapsuleOK is response for DomainSealCapsule operation.
type DomainSealCapsuleOK struct{}

func (*DomainSealCapsuleOK) domainSealCapsuleRes() {}

// DomainSetActiveExternalRootEncryptionKeyOK is response for DomainSetActiveExternalRootEncryptionKey operation.
type DomainSetActiveExternalRootEncryptionKeyOK struct{}

func (*DomainSetActiveExternalRootEncryptionKeyOK) domainSetActiveExternalRootEncryptionKeyRes() {}

// Additional configuration options for a domain.
// Ref: #/components/schemas/DomainSettings
type DomainSettings struct {
	DisasterRecovery OptDomainSettingsDisasterRecovery `json:"disasterRecovery"`
	// A list of admin contact details that have been validated.
	AdminContacts []string `json:"adminContacts"`
	// A list of admin contact details that have been validated.
	ActiveAdminContacts []string `json:"activeAdminContacts"`
	// A list of admin contact details that are pending validation.
	PendingAdminContacts []string `json:"pendingAdminContacts"`
	// User friendly custom display name.
	DefaultDisplayName string `json:"defaultDisplayName"`
}

// GetDisasterRecovery returns the value of DisasterRecovery.
func (s *DomainSettings) GetDisasterRecovery() OptDomainSettingsDisasterRecovery {
	return s.DisasterRecovery
}

// GetAdminContacts returns the value of AdminContacts.
func (s *DomainSettings) GetAdminContacts() []string {
	return s.AdminContacts
}

// GetActiveAdminContacts returns the value of ActiveAdminContacts.
func (s *DomainSettings) GetActiveAdminContacts() []string {
	return s.ActiveAdminContacts
}

// GetPendingAdminContacts returns the value of PendingAdminContacts.
func (s *DomainSettings) GetPendingAdminContacts() []string {
	return s.PendingAdminContacts
}

// GetDefaultDisplayName returns the value of DefaultDisplayName.
func (s *DomainSettings) GetDefaultDisplayName() string {
	return s.DefaultDisplayName
}

// SetDisasterRecovery sets the value of DisasterRecovery.
func (s *DomainSettings) SetDisasterRecovery(val OptDomainSettingsDisasterRecovery) {
	s.DisasterRecovery = val
}

// SetAdminContacts sets the value of AdminContacts.
func (s *DomainSettings) SetAdminContacts(val []string) {
	s.AdminContacts = val
}

// SetActiveAdminContacts sets the value of ActiveAdminContacts.
func (s *DomainSettings) SetActiveAdminContacts(val []string) {
	s.ActiveAdminContacts = val
}

// SetPendingAdminContacts sets the value of PendingAdminContacts.
func (s *DomainSettings) SetPendingAdminContacts(val []string) {
	s.PendingAdminContacts = val
}

// SetDefaultDisplayName sets the value of DefaultDisplayName.
func (s *DomainSettings) SetDefaultDisplayName(val string) {
	s.DefaultDisplayName = val
}

func (*DomainSettings) domainGetSettingsRes()   {}
func (*DomainSettings) domainPatchSettingsRes() {}

type DomainSettingsDisasterRecovery struct {
	// Add a Disaster Recovery header to all encrypted capsules. If set to true, a DR public key must be
	// set.
	Enable OptBool `json:"enable"`
	// An Antimatter Disaster Recovery public key to use if enable is true.
	PublicKey OptString `json:"publicKey"`
}

// GetEnable returns the value of Enable.
func (s *DomainSettingsDisasterRecovery) GetEnable() OptBool {
	return s.Enable
}

// GetPublicKey returns the value of PublicKey.
func (s *DomainSettingsDisasterRecovery) GetPublicKey() OptString {
	return s.PublicKey
}

// SetEnable sets the value of Enable.
func (s *DomainSettingsDisasterRecovery) SetEnable(val OptBool) {
	s.Enable = val
}

// SetPublicKey sets the value of PublicKey.
func (s *DomainSettingsDisasterRecovery) SetPublicKey(val OptString) {
	s.PublicKey = val
}

// A JSON patch to apply to the domain settings.
// Ref: #/components/schemas/DomainSettingsPatch
type DomainSettingsPatch struct {
	Patch PatchRequest `json:"patch"`
}

// GetPatch returns the value of Patch.
func (s *DomainSettingsPatch) GetPatch() PatchRequest {
	return s.Patch
}

// SetPatch sets the value of Patch.
func (s *DomainSettingsPatch) SetPatch(val PatchRequest) {
	s.Patch = val
}

// Information about the status of the domain.
// Ref: #/components/schemas/DomainStatus
type DomainStatus struct {
	Notifications []DomainStatusNotificationsItem `json:"notifications"`
}

// GetNotifications returns the value of Notifications.
func (s *DomainStatus) GetNotifications() []DomainStatusNotificationsItem {
	return s.Notifications
}

// SetNotifications sets the value of Notifications.
func (s *DomainStatus) SetNotifications(val []DomainStatusNotificationsItem) {
	s.Notifications = val
}

func (*DomainStatus) domainGetStatusRes() {}

type DomainStatusNotificationsItem struct {
	Summary     string                            `json:"summary"`
	Description string                            `json:"description"`
	Type        DomainStatusNotificationsItemType `json:"type"`
}

// GetSummary returns the value of Summary.
func (s *DomainStatusNotificationsItem) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *DomainStatusNotificationsItem) GetDescription() string {
	return s.Description
}

// GetType returns the value of Type.
func (s *DomainStatusNotificationsItem) GetType() DomainStatusNotificationsItemType {
	return s.Type
}

// SetSummary sets the value of Summary.
func (s *DomainStatusNotificationsItem) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *DomainStatusNotificationsItem) SetDescription(val string) {
	s.Description = val
}

// SetType sets the value of Type.
func (s *DomainStatusNotificationsItem) SetType(val DomainStatusNotificationsItemType) {
	s.Type = val
}

type DomainStatusNotificationsItemType string

const (
	DomainStatusNotificationsItemTypeInfo  DomainStatusNotificationsItemType = "info"
	DomainStatusNotificationsItemTypeAlert DomainStatusNotificationsItemType = "alert"
)

// AllValues returns all DomainStatusNotificationsItemType values.
func (DomainStatusNotificationsItemType) AllValues() []DomainStatusNotificationsItemType {
	return []DomainStatusNotificationsItemType{
		DomainStatusNotificationsItemTypeInfo,
		DomainStatusNotificationsItemTypeAlert,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DomainStatusNotificationsItemType) MarshalText() ([]byte, error) {
	switch s {
	case DomainStatusNotificationsItemTypeInfo:
		return []byte(s), nil
	case DomainStatusNotificationsItemTypeAlert:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DomainStatusNotificationsItemType) UnmarshalText(data []byte) error {
	switch DomainStatusNotificationsItemType(data) {
	case DomainStatusNotificationsItemTypeInfo:
		*s = DomainStatusNotificationsItemTypeInfo
		return nil
	case DomainStatusNotificationsItemTypeAlert:
		*s = DomainStatusNotificationsItemTypeAlert
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ordered list of the top 100 tags.
// Ref: #/components/schemas/DomainTagInfoResults
type DomainTagInfoResults struct {
	Tags []TagMeta `json:"tags"`
	// If true, there are more results than presented in this response.
	HasMore bool `json:"has_more"`
}

// GetTags returns the value of Tags.
func (s *DomainTagInfoResults) GetTags() []TagMeta {
	return s.Tags
}

// GetHasMore returns the value of HasMore.
func (s *DomainTagInfoResults) GetHasMore() bool {
	return s.HasMore
}

// SetTags sets the value of Tags.
func (s *DomainTagInfoResults) SetTags(val []TagMeta) {
	s.Tags = val
}

// SetHasMore sets the value of HasMore.
func (s *DomainTagInfoResults) SetHasMore(val bool) {
	s.HasMore = val
}

func (*DomainTagInfoResults) domainGetTagInfoRes() {}

// DomainUpdateIdentityProviderPrincipalOK is response for DomainUpdateIdentityProviderPrincipal operation.
type DomainUpdateIdentityProviderPrincipalOK struct{}

func (*DomainUpdateIdentityProviderPrincipalOK) domainUpdateIdentityProviderPrincipalRes() {}

// DomainUpdatePeerOK is response for DomainUpdatePeer operation.
type DomainUpdatePeerOK struct{}

func (*DomainUpdatePeerOK) domainUpdatePeerRes() {}

// DomainUpdatePolicyRuleOK is response for DomainUpdatePolicyRule operation.
type DomainUpdatePolicyRuleOK struct{}

func (*DomainUpdatePolicyRuleOK) domainUpdatePolicyRuleRes() {}

// DomainUpdateReadContextRuleOK is response for DomainUpdateReadContextRule operation.
type DomainUpdateReadContextRuleOK struct{}

func (*DomainUpdateReadContextRuleOK) domainUpdateReadContextRuleRes() {}

// DomainUpsertCapsuleTagsOK is response for DomainUpsertCapsuleTags operation.
type DomainUpsertCapsuleTagsOK struct{}

func (*DomainUpsertCapsuleTagsOK) domainUpsertCapsuleTagsRes() {}

// DomainUpsertReadContextOK is response for DomainUpsertReadContext operation.
type DomainUpsertReadContextOK struct{}

func (*DomainUpsertReadContextOK) domainUpsertReadContextRes() {}

// DomainUpsertSpanTagsOK is response for DomainUpsertSpanTags operation.
type DomainUpsertSpanTagsOK struct{}

func (*DomainUpsertSpanTagsOK) domainUpsertSpanTagsRes() {}

// DomainUpsertWriteContextConfigurationOK is response for DomainUpsertWriteContextConfiguration operation.
type DomainUpsertWriteContextConfigurationOK struct{}

func (*DomainUpsertWriteContextConfigurationOK) domainUpsertWriteContextConfigurationRes() {}

// DomainUpsertWriteContextOK is response for DomainUpsertWriteContext operation.
type DomainUpsertWriteContextOK struct{}

func (*DomainUpsertWriteContextOK) domainUpsertWriteContextRes() {}

// An internal error.
// Ref: #/components/schemas/Error
type Error struct {
	TraceID string `json:"traceID"`
	Message string `json:"message"`
}

// GetTraceID returns the value of TraceID.
func (s *Error) GetTraceID() string {
	return s.TraceID
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetTraceID sets the value of TraceID.
func (s *Error) SetTraceID(val string) {
	s.TraceID = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// A fact is a piece of auxiliary information that can be used as part of an authorization policy.
// They are usually expressed as a statement such as has_role(principal, role_name).
// Ref: #/components/schemas/Fact
type Fact struct {
	ID        FactID            `json:"id"`
	Name      FactTypeReference `json:"name"`
	Arguments []string          `json:"arguments"`
}

// GetID returns the value of ID.
func (s *Fact) GetID() FactID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Fact) GetName() FactTypeReference {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *Fact) GetArguments() []string {
	return s.Arguments
}

// SetID sets the value of ID.
func (s *Fact) SetID(val FactID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Fact) SetName(val FactTypeReference) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *Fact) SetArguments(val []string) {
	s.Arguments = val
}

func (*Fact) domainGetFactByIDRes() {}
func (*Fact) domainUpsertFactRes()  {}

type FactID string

// A list of facts.
// Ref: #/components/schemas/FactList
type FactList struct {
	Facts []Fact `json:"facts"`
}

// GetFacts returns the value of Facts.
func (s *FactList) GetFacts() []Fact {
	return s.Facts
}

// SetFacts sets the value of Facts.
func (s *FactList) SetFacts(val []Fact) {
	s.Facts = val
}

func (*FactList) domainListFactsRes() {}

type FactPolicyRules []FactPolicyRulesItem

type FactPolicyRulesItem struct {
	// Whether this assertion matches when the fact exists or does not exist.
	Operator  FactPolicyRulesItemOperator        `json:"operator"`
	Name      FactTypeReference                  `json:"name"`
	Arguments []FactPolicyRulesItemArgumentsItem `json:"arguments"`
}

// GetOperator returns the value of Operator.
func (s *FactPolicyRulesItem) GetOperator() FactPolicyRulesItemOperator {
	return s.Operator
}

// GetName returns the value of Name.
func (s *FactPolicyRulesItem) GetName() FactTypeReference {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *FactPolicyRulesItem) GetArguments() []FactPolicyRulesItemArgumentsItem {
	return s.Arguments
}

// SetOperator sets the value of Operator.
func (s *FactPolicyRulesItem) SetOperator(val FactPolicyRulesItemOperator) {
	s.Operator = val
}

// SetName sets the value of Name.
func (s *FactPolicyRulesItem) SetName(val FactTypeReference) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *FactPolicyRulesItem) SetArguments(val []FactPolicyRulesItemArgumentsItem) {
	s.Arguments = val
}

type FactPolicyRulesItemArgumentsItem struct {
	// This argument can have any value (don't care).
	Any OptBool `json:"any"`
	// Which value to compare against. If literal, the 'value' field will be used. If 'domainIdentity'
	// then the domain identity will be checked for a capability matching the reference in the
	// 'capability' field.
	Source     OptFactPolicyRulesItemArgumentsItemSource `json:"source"`
	Capability OptCapabilityReference                    `json:"capability"`
	// If source is literal, what is the value.
	Value OptString `json:"value"`
}

// GetAny returns the value of Any.
func (s *FactPolicyRulesItemArgumentsItem) GetAny() OptBool {
	return s.Any
}

// GetSource returns the value of Source.
func (s *FactPolicyRulesItemArgumentsItem) GetSource() OptFactPolicyRulesItemArgumentsItemSource {
	return s.Source
}

// GetCapability returns the value of Capability.
func (s *FactPolicyRulesItemArgumentsItem) GetCapability() OptCapabilityReference {
	return s.Capability
}

// GetValue returns the value of Value.
func (s *FactPolicyRulesItemArgumentsItem) GetValue() OptString {
	return s.Value
}

// SetAny sets the value of Any.
func (s *FactPolicyRulesItemArgumentsItem) SetAny(val OptBool) {
	s.Any = val
}

// SetSource sets the value of Source.
func (s *FactPolicyRulesItemArgumentsItem) SetSource(val OptFactPolicyRulesItemArgumentsItemSource) {
	s.Source = val
}

// SetCapability sets the value of Capability.
func (s *FactPolicyRulesItemArgumentsItem) SetCapability(val OptCapabilityReference) {
	s.Capability = val
}

// SetValue sets the value of Value.
func (s *FactPolicyRulesItemArgumentsItem) SetValue(val OptString) {
	s.Value = val
}

// Which value to compare against. If literal, the 'value' field will be used. If 'domainIdentity'
// then the domain identity will be checked for a capability matching the reference in the
// 'capability' field.
type FactPolicyRulesItemArgumentsItemSource string

const (
	FactPolicyRulesItemArgumentsItemSourceDomainIdentity FactPolicyRulesItemArgumentsItemSource = "domainIdentity"
	FactPolicyRulesItemArgumentsItemSourceLiteral        FactPolicyRulesItemArgumentsItemSource = "literal"
)

// AllValues returns all FactPolicyRulesItemArgumentsItemSource values.
func (FactPolicyRulesItemArgumentsItemSource) AllValues() []FactPolicyRulesItemArgumentsItemSource {
	return []FactPolicyRulesItemArgumentsItemSource{
		FactPolicyRulesItemArgumentsItemSourceDomainIdentity,
		FactPolicyRulesItemArgumentsItemSourceLiteral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FactPolicyRulesItemArgumentsItemSource) MarshalText() ([]byte, error) {
	switch s {
	case FactPolicyRulesItemArgumentsItemSourceDomainIdentity:
		return []byte(s), nil
	case FactPolicyRulesItemArgumentsItemSourceLiteral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FactPolicyRulesItemArgumentsItemSource) UnmarshalText(data []byte) error {
	switch FactPolicyRulesItemArgumentsItemSource(data) {
	case FactPolicyRulesItemArgumentsItemSourceDomainIdentity:
		*s = FactPolicyRulesItemArgumentsItemSourceDomainIdentity
		return nil
	case FactPolicyRulesItemArgumentsItemSourceLiteral:
		*s = FactPolicyRulesItemArgumentsItemSourceLiteral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether this assertion matches when the fact exists or does not exist.
type FactPolicyRulesItemOperator string

const (
	FactPolicyRulesItemOperatorExists    FactPolicyRulesItemOperator = "Exists"
	FactPolicyRulesItemOperatorNotExists FactPolicyRulesItemOperator = "NotExists"
)

// AllValues returns all FactPolicyRulesItemOperator values.
func (FactPolicyRulesItemOperator) AllValues() []FactPolicyRulesItemOperator {
	return []FactPolicyRulesItemOperator{
		FactPolicyRulesItemOperatorExists,
		FactPolicyRulesItemOperatorNotExists,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FactPolicyRulesItemOperator) MarshalText() ([]byte, error) {
	switch s {
	case FactPolicyRulesItemOperatorExists:
		return []byte(s), nil
	case FactPolicyRulesItemOperatorNotExists:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FactPolicyRulesItemOperator) UnmarshalText(data []byte) error {
	switch FactPolicyRulesItemOperator(data) {
	case FactPolicyRulesItemOperatorExists:
		*s = FactPolicyRulesItemOperatorExists
		return nil
	case FactPolicyRulesItemOperatorNotExists:
		*s = FactPolicyRulesItemOperatorNotExists
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A type definition (schema) for a fact.
// Ref: #/components/schemas/FactTypeDefinition
type FactTypeDefinition struct {
	Name        FactTypeReference                 `json:"name"`
	Description string                            `json:"description"`
	Arguments   []FactTypeDefinitionArgumentsItem `json:"arguments"`
	// True if this fact type is imported.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
}

// GetName returns the value of Name.
func (s *FactTypeDefinition) GetName() FactTypeReference {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *FactTypeDefinition) GetDescription() string {
	return s.Description
}

// GetArguments returns the value of Arguments.
func (s *FactTypeDefinition) GetArguments() []FactTypeDefinitionArgumentsItem {
	return s.Arguments
}

// GetImported returns the value of Imported.
func (s *FactTypeDefinition) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *FactTypeDefinition) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *FactTypeDefinition) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// SetName sets the value of Name.
func (s *FactTypeDefinition) SetName(val FactTypeReference) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *FactTypeDefinition) SetDescription(val string) {
	s.Description = val
}

// SetArguments sets the value of Arguments.
func (s *FactTypeDefinition) SetArguments(val []FactTypeDefinitionArgumentsItem) {
	s.Arguments = val
}

// SetImported sets the value of Imported.
func (s *FactTypeDefinition) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *FactTypeDefinition) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *FactTypeDefinition) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

func (*FactTypeDefinition) domainGetFactTypeRes() {}

type FactTypeDefinitionArgumentsItem struct {
	// The name of the argument.
	Name string `json:"name"`
	// The description of the argument.
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *FactTypeDefinitionArgumentsItem) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *FactTypeDefinitionArgumentsItem) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *FactTypeDefinitionArgumentsItem) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *FactTypeDefinitionArgumentsItem) SetDescription(val string) {
	s.Description = val
}

type FactTypeName string

type FactTypeReference string

// Returned when the server is forbidden form performing some action on the user's behalf by a
// third-party service (for example, AWS KMS).
// Ref: #/components/schemas/ForbiddenError
type ForbiddenError struct {
	// A free form message describing the error.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ForbiddenError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ForbiddenError) SetMessage(val string) {
	s.Message = val
}

func (*ForbiddenError) domainCreateCapsuleRes() {}
func (*ForbiddenError) domainOpenCapsuleRes()   {}

// The GCP service account information and details required to use the  provided GCP hosted
// encryption key for cryptographic operations.
// Ref: #/components/schemas/GCPServiceAccountKeyInfo
type GCPServiceAccountKeyInfo struct {
	// The Google service account contents as a base64 encoded  JSON string.
	ServiceAccountCredentials []byte `json:"serviceAccountCredentials"`
	// The Google project ID.
	ProjectID string `json:"projectID"`
	// Location of Google keyring.
	Location string `json:"location"`
	// The Google keyring's ID at location.
	KeyringID string `json:"keyringID"`
	// The key ID that should be used in the Google keyring.
	KeyID string `json:"keyID"`
}

// GetServiceAccountCredentials returns the value of ServiceAccountCredentials.
func (s *GCPServiceAccountKeyInfo) GetServiceAccountCredentials() []byte {
	return s.ServiceAccountCredentials
}

// GetProjectID returns the value of ProjectID.
func (s *GCPServiceAccountKeyInfo) GetProjectID() string {
	return s.ProjectID
}

// GetLocation returns the value of Location.
func (s *GCPServiceAccountKeyInfo) GetLocation() string {
	return s.Location
}

// GetKeyringID returns the value of KeyringID.
func (s *GCPServiceAccountKeyInfo) GetKeyringID() string {
	return s.KeyringID
}

// GetKeyID returns the value of KeyID.
func (s *GCPServiceAccountKeyInfo) GetKeyID() string {
	return s.KeyID
}

// SetServiceAccountCredentials sets the value of ServiceAccountCredentials.
func (s *GCPServiceAccountKeyInfo) SetServiceAccountCredentials(val []byte) {
	s.ServiceAccountCredentials = val
}

// SetProjectID sets the value of ProjectID.
func (s *GCPServiceAccountKeyInfo) SetProjectID(val string) {
	s.ProjectID = val
}

// SetLocation sets the value of Location.
func (s *GCPServiceAccountKeyInfo) SetLocation(val string) {
	s.Location = val
}

// SetKeyringID sets the value of KeyringID.
func (s *GCPServiceAccountKeyInfo) SetKeyringID(val string) {
	s.KeyringID = val
}

// SetKeyID sets the value of KeyID.
func (s *GCPServiceAccountKeyInfo) SetKeyID(val string) {
	s.KeyID = val
}

type GCPServiceAccountKeyInfoProviderName string

const (
	GCPServiceAccountKeyInfoProviderNameGcpSa GCPServiceAccountKeyInfoProviderName = "gcp_sa"
)

// AllValues returns all GCPServiceAccountKeyInfoProviderName values.
func (GCPServiceAccountKeyInfoProviderName) AllValues() []GCPServiceAccountKeyInfoProviderName {
	return []GCPServiceAccountKeyInfoProviderName{
		GCPServiceAccountKeyInfoProviderNameGcpSa,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GCPServiceAccountKeyInfoProviderName) MarshalText() ([]byte, error) {
	switch s {
	case GCPServiceAccountKeyInfoProviderNameGcpSa:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GCPServiceAccountKeyInfoProviderName) UnmarshalText(data []byte) error {
	switch GCPServiceAccountKeyInfoProviderName(data) {
	case GCPServiceAccountKeyInfoProviderNameGcpSa:
		*s = GCPServiceAccountKeyInfoProviderNameGcpSa
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Detailed information about a Google OAuth identity provider. If the clientID is omitted, an
// Antimatter Client ID will be used.
// Ref: #/components/schemas/GoogleOAuthDomainIdentityProviderDetails
type GoogleOAuthDomainIdentityProviderDetails struct {
	ClientID OptString `json:"clientID"`
}

// GetClientID returns the value of ClientID.
func (s *GoogleOAuthDomainIdentityProviderDetails) GetClientID() OptString {
	return s.ClientID
}

// SetClientID sets the value of ClientID.
func (s *GoogleOAuthDomainIdentityProviderDetails) SetClientID(val OptString) {
	s.ClientID = val
}

type GoogleOAuthDomainIdentityProviderDetailsType string

const (
	GoogleOAuthDomainIdentityProviderDetailsTypeGoogleOAuth GoogleOAuthDomainIdentityProviderDetailsType = "GoogleOAuth"
)

// AllValues returns all GoogleOAuthDomainIdentityProviderDetailsType values.
func (GoogleOAuthDomainIdentityProviderDetailsType) AllValues() []GoogleOAuthDomainIdentityProviderDetailsType {
	return []GoogleOAuthDomainIdentityProviderDetailsType{
		GoogleOAuthDomainIdentityProviderDetailsTypeGoogleOAuth,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GoogleOAuthDomainIdentityProviderDetailsType) MarshalText() ([]byte, error) {
	switch s {
	case GoogleOAuthDomainIdentityProviderDetailsTypeGoogleOAuth:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GoogleOAuthDomainIdentityProviderDetailsType) UnmarshalText(data []byte) error {
	switch GoogleOAuthDomainIdentityProviderDetailsType(data) {
	case GoogleOAuthDomainIdentityProviderDetailsTypeGoogleOAuth:
		*s = GoogleOAuthDomainIdentityProviderDetailsTypeGoogleOAuth
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HookName string

type IdentityProviderName string

type IdentityProviderReference string

type ImportAlias string

// Returned when one of the identifiers or arguments in the request is invalid.
// Ref: #/components/schemas/InvalidRequestError
type InvalidRequestError struct {
	// Which field or path in the query is erroneous.
	Field string `json:"field"`
	// A free form message describing the error.
	Message string `json:"message"`
}

// GetField returns the value of Field.
func (s *InvalidRequestError) GetField() string {
	return s.Field
}

// GetMessage returns the value of Message.
func (s *InvalidRequestError) GetMessage() string {
	return s.Message
}

// SetField sets the value of Field.
func (s *InvalidRequestError) SetField(val string) {
	s.Field = val
}

// SetMessage sets the value of Message.
func (s *InvalidRequestError) SetMessage(val string) {
	s.Message = val
}

func (*InvalidRequestError) capsuleGetByIdRes()                              {}
func (*InvalidRequestError) domainAddAccessLogEntryRes()                     {}
func (*InvalidRequestError) domainAddExternalRootEncryptionKeyRes()          {}
func (*InvalidRequestError) domainAddNewRes()                                {}
func (*InvalidRequestError) domainAddReadContextRuleRes()                    {}
func (*InvalidRequestError) domainAuthenticateRes()                          {}
func (*InvalidRequestError) domainContactIssueVerifyRes()                    {}
func (*InvalidRequestError) domainContactVerifyRes()                         {}
func (*InvalidRequestError) domainCreateCapsuleRes()                         {}
func (*InvalidRequestError) domainCreatePeerDomainRes()                      {}
func (*InvalidRequestError) domainCreatePolicyRuleRes()                      {}
func (*InvalidRequestError) domainDataTaggingHookInvokeRes()                 {}
func (*InvalidRequestError) domainDeleteCapabilityRes()                      {}
func (*InvalidRequestError) domainDeleteCapsuleTagsRes()                     {}
func (*InvalidRequestError) domainDeleteExternalRootEncryptionKeyRes()       {}
func (*InvalidRequestError) domainDeleteFactByIDRes()                        {}
func (*InvalidRequestError) domainDeleteFactTypeRes()                        {}
func (*InvalidRequestError) domainDeleteIdentityProviderPrincipalRes()       {}
func (*InvalidRequestError) domainDeleteIdentityProviderRes()                {}
func (*InvalidRequestError) domainDeletePeerRes()                            {}
func (*InvalidRequestError) domainDeletePolicyRuleRes()                      {}
func (*InvalidRequestError) domainDeleteReadContextRes()                     {}
func (*InvalidRequestError) domainDeleteReadContextRuleRes()                 {}
func (*InvalidRequestError) domainDeleteWriteContextRegexRuleRes()           {}
func (*InvalidRequestError) domainDeleteWriteContextRes()                    {}
func (*InvalidRequestError) domainDescribeWriteContextRes()                  {}
func (*InvalidRequestError) domainExternalRootEncryptionKeyTestRes()         {}
func (*InvalidRequestError) domainFlushEncryptionKeysRes()                   {}
func (*InvalidRequestError) domainGetActiveExternalRootEncryptionKeyRes()    {}
func (*InvalidRequestError) domainGetCapabilitiesRes()                       {}
func (*InvalidRequestError) domainGetCapabilityRes()                         {}
func (*InvalidRequestError) domainGetCapsuleInfoRes()                        {}
func (*InvalidRequestError) domainGetExternalRootEncryptionKeyProvidersRes() {}
func (*InvalidRequestError) domainGetFactByIDRes()                           {}
func (*InvalidRequestError) domainGetFactTypeRes()                           {}
func (*InvalidRequestError) domainGetIdentityProviderPrincipalRes()          {}
func (*InvalidRequestError) domainGetIdentityProviderPrincipalsRes()         {}
func (*InvalidRequestError) domainGetIdentityProviderRes()                   {}
func (*InvalidRequestError) domainGetPeerConfigRes()                         {}
func (*InvalidRequestError) domainGetPeerRes()                               {}
func (*InvalidRequestError) domainGetPrivateInfoRes()                        {}
func (*InvalidRequestError) domainGetPublicInfoRes()                         {}
func (*InvalidRequestError) domainGetReadContextRes()                        {}
func (*InvalidRequestError) domainGetSettingsRes()                           {}
func (*InvalidRequestError) domainGetStatusRes()                             {}
func (*InvalidRequestError) domainGetTagInfoRes()                            {}
func (*InvalidRequestError) domainGetWriteContextRegexRulesRes()             {}
func (*InvalidRequestError) domainInsertIdentityProviderPrincipalRes()       {}
func (*InvalidRequestError) domainInsertWriteContextRegexRuleRes()           {}
func (*InvalidRequestError) domainListCapsulesRes()                          {}
func (*InvalidRequestError) domainListExternalRootEncryptionKeyRes()         {}
func (*InvalidRequestError) domainListFactTypesRes()                         {}
func (*InvalidRequestError) domainListFactsRes()                             {}
func (*InvalidRequestError) domainListHooksRes()                             {}
func (*InvalidRequestError) domainListIdentityProvidersRes()                 {}
func (*InvalidRequestError) domainListPeersRes()                             {}
func (*InvalidRequestError) domainListPolicyRulesRes()                       {}
func (*InvalidRequestError) domainListReadContextsRes()                      {}
func (*InvalidRequestError) domainListResourcesRes()                         {}
func (*InvalidRequestError) domainListWriteContextsRes()                     {}
func (*InvalidRequestError) domainOpenCapsuleRes()                           {}
func (*InvalidRequestError) domainPatchSettingsRes()                         {}
func (*InvalidRequestError) domainPolicyFlushRes()                           {}
func (*InvalidRequestError) domainPutCapabilityRes()                         {}
func (*InvalidRequestError) domainPutFactTypeRes()                           {}
func (*InvalidRequestError) domainQueryAccessLogRes()                        {}
func (*InvalidRequestError) domainQueryAccessLogSingleCapsuleRes()           {}
func (*InvalidRequestError) domainQueryControlLogRes()                       {}
func (*InvalidRequestError) domainReadContextFlushRes()                      {}
func (*InvalidRequestError) domainRenumberPolicyRulesRes()                   {}
func (*InvalidRequestError) domainRotateRootEncryptionKeysRes()              {}
func (*InvalidRequestError) domainSealCapsuleRes()                           {}
func (*InvalidRequestError) domainSetActiveExternalRootEncryptionKeyRes()    {}
func (*InvalidRequestError) domainUpdateIdentityProviderPrincipalRes()       {}
func (*InvalidRequestError) domainUpdatePeerRes()                            {}
func (*InvalidRequestError) domainUpdatePolicyRuleRes()                      {}
func (*InvalidRequestError) domainUpdateReadContextRuleRes()                 {}
func (*InvalidRequestError) domainUpsertCapsuleTagsRes()                     {}
func (*InvalidRequestError) domainUpsertFactRes()                            {}
func (*InvalidRequestError) domainUpsertIdentityProviderRes()                {}
func (*InvalidRequestError) domainUpsertReadContextRes()                     {}
func (*InvalidRequestError) domainUpsertSpanTagsRes()                        {}
func (*InvalidRequestError) domainUpsertWriteContextConfigurationRes()       {}
func (*InvalidRequestError) domainUpsertWriteContextRes()                    {}
func (*InvalidRequestError) starredDomainAddRes()                            {}
func (*InvalidRequestError) starredDomainRemoveRes()                         {}

// Ref: #/components/schemas/JSONPatchRequestAdd
type JSONPatchRequestAdd struct {
	// A JSON Pointer path.
	Path string `json:"path"`
	// The value to add.
	Value JSONPatchRequestAddValue `json:"value"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestAdd) GetPath() string {
	return s.Path
}

// GetValue returns the value of Value.
func (s *JSONPatchRequestAdd) GetValue() JSONPatchRequestAddValue {
	return s.Value
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestAdd) SetPath(val string) {
	s.Path = val
}

// SetValue sets the value of Value.
func (s *JSONPatchRequestAdd) SetValue(val JSONPatchRequestAddValue) {
	s.Value = val
}

// The operation to perform.
type JSONPatchRequestAddOp string

const (
	JSONPatchRequestAddOpAdd JSONPatchRequestAddOp = "add"
)

// AllValues returns all JSONPatchRequestAddOp values.
func (JSONPatchRequestAddOp) AllValues() []JSONPatchRequestAddOp {
	return []JSONPatchRequestAddOp{
		JSONPatchRequestAddOpAdd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestAddOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestAddOpAdd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestAddOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestAddOp(data) {
	case JSONPatchRequestAddOpAdd:
		*s = JSONPatchRequestAddOpAdd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The value to add.
// JSONPatchRequestAddValue represents sum type.
type JSONPatchRequestAddValue struct {
	Type    JSONPatchRequestAddValueType // switch on this field
	String  string
	Float64 float64
	Bool    bool
}

// JSONPatchRequestAddValueType is oneOf type of JSONPatchRequestAddValue.
type JSONPatchRequestAddValueType string

// Possible values for JSONPatchRequestAddValueType.
const (
	StringJSONPatchRequestAddValue  JSONPatchRequestAddValueType = "string"
	Float64JSONPatchRequestAddValue JSONPatchRequestAddValueType = "float64"
	BoolJSONPatchRequestAddValue    JSONPatchRequestAddValueType = "bool"
)

// IsString reports whether JSONPatchRequestAddValue is string.
func (s JSONPatchRequestAddValue) IsString() bool { return s.Type == StringJSONPatchRequestAddValue }

// IsFloat64 reports whether JSONPatchRequestAddValue is float64.
func (s JSONPatchRequestAddValue) IsFloat64() bool { return s.Type == Float64JSONPatchRequestAddValue }

// IsBool reports whether JSONPatchRequestAddValue is bool.
func (s JSONPatchRequestAddValue) IsBool() bool { return s.Type == BoolJSONPatchRequestAddValue }

// SetString sets JSONPatchRequestAddValue to string.
func (s *JSONPatchRequestAddValue) SetString(v string) {
	s.Type = StringJSONPatchRequestAddValue
	s.String = v
}

// GetString returns string and true boolean if JSONPatchRequestAddValue is string.
func (s JSONPatchRequestAddValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringJSONPatchRequestAddValue returns new JSONPatchRequestAddValue from string.
func NewStringJSONPatchRequestAddValue(v string) JSONPatchRequestAddValue {
	var s JSONPatchRequestAddValue
	s.SetString(v)
	return s
}

// SetFloat64 sets JSONPatchRequestAddValue to float64.
func (s *JSONPatchRequestAddValue) SetFloat64(v float64) {
	s.Type = Float64JSONPatchRequestAddValue
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if JSONPatchRequestAddValue is float64.
func (s JSONPatchRequestAddValue) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64JSONPatchRequestAddValue returns new JSONPatchRequestAddValue from float64.
func NewFloat64JSONPatchRequestAddValue(v float64) JSONPatchRequestAddValue {
	var s JSONPatchRequestAddValue
	s.SetFloat64(v)
	return s
}

// SetBool sets JSONPatchRequestAddValue to bool.
func (s *JSONPatchRequestAddValue) SetBool(v bool) {
	s.Type = BoolJSONPatchRequestAddValue
	s.Bool = v
}

// GetBool returns bool and true boolean if JSONPatchRequestAddValue is bool.
func (s JSONPatchRequestAddValue) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolJSONPatchRequestAddValue returns new JSONPatchRequestAddValue from bool.
func NewBoolJSONPatchRequestAddValue(v bool) JSONPatchRequestAddValue {
	var s JSONPatchRequestAddValue
	s.SetBool(v)
	return s
}

// Ref: #/components/schemas/JSONPatchRequestCopy
type JSONPatchRequestCopy struct {
	// A JSON Pointer path.
	Path string `json:"path"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestCopy) GetPath() string {
	return s.Path
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestCopy) SetPath(val string) {
	s.Path = val
}

// The operation to perform.
type JSONPatchRequestCopyOp string

const (
	JSONPatchRequestCopyOpCopy JSONPatchRequestCopyOp = "copy"
)

// AllValues returns all JSONPatchRequestCopyOp values.
func (JSONPatchRequestCopyOp) AllValues() []JSONPatchRequestCopyOp {
	return []JSONPatchRequestCopyOp{
		JSONPatchRequestCopyOpCopy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestCopyOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestCopyOpCopy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestCopyOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestCopyOp(data) {
	case JSONPatchRequestCopyOpCopy:
		*s = JSONPatchRequestCopyOpCopy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JSONPatchRequestMove
type JSONPatchRequestMove struct {
	// A JSON Pointer path.
	Path string `json:"path"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestMove) GetPath() string {
	return s.Path
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestMove) SetPath(val string) {
	s.Path = val
}

// The operation to perform.
type JSONPatchRequestMoveOp string

const (
	JSONPatchRequestMoveOpMove JSONPatchRequestMoveOp = "move"
)

// AllValues returns all JSONPatchRequestMoveOp values.
func (JSONPatchRequestMoveOp) AllValues() []JSONPatchRequestMoveOp {
	return []JSONPatchRequestMoveOp{
		JSONPatchRequestMoveOpMove,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestMoveOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestMoveOpMove:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestMoveOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestMoveOp(data) {
	case JSONPatchRequestMoveOpMove:
		*s = JSONPatchRequestMoveOpMove
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JSONPatchRequestRemove
type JSONPatchRequestRemove struct {
	// A JSON Pointer path.
	Path string `json:"path"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestRemove) GetPath() string {
	return s.Path
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestRemove) SetPath(val string) {
	s.Path = val
}

// The operation to perform.
type JSONPatchRequestRemoveOp string

const (
	JSONPatchRequestRemoveOpRemove JSONPatchRequestRemoveOp = "remove"
)

// AllValues returns all JSONPatchRequestRemoveOp values.
func (JSONPatchRequestRemoveOp) AllValues() []JSONPatchRequestRemoveOp {
	return []JSONPatchRequestRemoveOp{
		JSONPatchRequestRemoveOpRemove,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestRemoveOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestRemoveOpRemove:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestRemoveOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestRemoveOp(data) {
	case JSONPatchRequestRemoveOpRemove:
		*s = JSONPatchRequestRemoveOpRemove
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JSONPatchRequestReplace
type JSONPatchRequestReplace struct {
	// A JSON Pointer path.
	Path string `json:"path"`
	// The value to replace.
	Value JSONPatchRequestReplaceValue `json:"value"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestReplace) GetPath() string {
	return s.Path
}

// GetValue returns the value of Value.
func (s *JSONPatchRequestReplace) GetValue() JSONPatchRequestReplaceValue {
	return s.Value
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestReplace) SetPath(val string) {
	s.Path = val
}

// SetValue sets the value of Value.
func (s *JSONPatchRequestReplace) SetValue(val JSONPatchRequestReplaceValue) {
	s.Value = val
}

// The operation to perform.
type JSONPatchRequestReplaceOp string

const (
	JSONPatchRequestReplaceOpReplace JSONPatchRequestReplaceOp = "replace"
)

// AllValues returns all JSONPatchRequestReplaceOp values.
func (JSONPatchRequestReplaceOp) AllValues() []JSONPatchRequestReplaceOp {
	return []JSONPatchRequestReplaceOp{
		JSONPatchRequestReplaceOpReplace,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestReplaceOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestReplaceOpReplace:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestReplaceOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestReplaceOp(data) {
	case JSONPatchRequestReplaceOpReplace:
		*s = JSONPatchRequestReplaceOpReplace
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The value to replace.
// JSONPatchRequestReplaceValue represents sum type.
type JSONPatchRequestReplaceValue struct {
	Type    JSONPatchRequestReplaceValueType // switch on this field
	String  string
	Float64 float64
	Bool    bool
}

// JSONPatchRequestReplaceValueType is oneOf type of JSONPatchRequestReplaceValue.
type JSONPatchRequestReplaceValueType string

// Possible values for JSONPatchRequestReplaceValueType.
const (
	StringJSONPatchRequestReplaceValue  JSONPatchRequestReplaceValueType = "string"
	Float64JSONPatchRequestReplaceValue JSONPatchRequestReplaceValueType = "float64"
	BoolJSONPatchRequestReplaceValue    JSONPatchRequestReplaceValueType = "bool"
)

// IsString reports whether JSONPatchRequestReplaceValue is string.
func (s JSONPatchRequestReplaceValue) IsString() bool {
	return s.Type == StringJSONPatchRequestReplaceValue
}

// IsFloat64 reports whether JSONPatchRequestReplaceValue is float64.
func (s JSONPatchRequestReplaceValue) IsFloat64() bool {
	return s.Type == Float64JSONPatchRequestReplaceValue
}

// IsBool reports whether JSONPatchRequestReplaceValue is bool.
func (s JSONPatchRequestReplaceValue) IsBool() bool {
	return s.Type == BoolJSONPatchRequestReplaceValue
}

// SetString sets JSONPatchRequestReplaceValue to string.
func (s *JSONPatchRequestReplaceValue) SetString(v string) {
	s.Type = StringJSONPatchRequestReplaceValue
	s.String = v
}

// GetString returns string and true boolean if JSONPatchRequestReplaceValue is string.
func (s JSONPatchRequestReplaceValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringJSONPatchRequestReplaceValue returns new JSONPatchRequestReplaceValue from string.
func NewStringJSONPatchRequestReplaceValue(v string) JSONPatchRequestReplaceValue {
	var s JSONPatchRequestReplaceValue
	s.SetString(v)
	return s
}

// SetFloat64 sets JSONPatchRequestReplaceValue to float64.
func (s *JSONPatchRequestReplaceValue) SetFloat64(v float64) {
	s.Type = Float64JSONPatchRequestReplaceValue
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if JSONPatchRequestReplaceValue is float64.
func (s JSONPatchRequestReplaceValue) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64JSONPatchRequestReplaceValue returns new JSONPatchRequestReplaceValue from float64.
func NewFloat64JSONPatchRequestReplaceValue(v float64) JSONPatchRequestReplaceValue {
	var s JSONPatchRequestReplaceValue
	s.SetFloat64(v)
	return s
}

// SetBool sets JSONPatchRequestReplaceValue to bool.
func (s *JSONPatchRequestReplaceValue) SetBool(v bool) {
	s.Type = BoolJSONPatchRequestReplaceValue
	s.Bool = v
}

// GetBool returns bool and true boolean if JSONPatchRequestReplaceValue is bool.
func (s JSONPatchRequestReplaceValue) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolJSONPatchRequestReplaceValue returns new JSONPatchRequestReplaceValue from bool.
func NewBoolJSONPatchRequestReplaceValue(v bool) JSONPatchRequestReplaceValue {
	var s JSONPatchRequestReplaceValue
	s.SetBool(v)
	return s
}

// Ref: #/components/schemas/JSONPatchRequestTst
type JSONPatchRequestTst struct {
	// A JSON Pointer path.
	Path string `json:"path"`
	// The value to test.
	Value JSONPatchRequestTstValue `json:"value"`
}

// GetPath returns the value of Path.
func (s *JSONPatchRequestTst) GetPath() string {
	return s.Path
}

// GetValue returns the value of Value.
func (s *JSONPatchRequestTst) GetValue() JSONPatchRequestTstValue {
	return s.Value
}

// SetPath sets the value of Path.
func (s *JSONPatchRequestTst) SetPath(val string) {
	s.Path = val
}

// SetValue sets the value of Value.
func (s *JSONPatchRequestTst) SetValue(val JSONPatchRequestTstValue) {
	s.Value = val
}

// The operation to perform.
type JSONPatchRequestTstOp string

const (
	JSONPatchRequestTstOpTest JSONPatchRequestTstOp = "test"
)

// AllValues returns all JSONPatchRequestTstOp values.
func (JSONPatchRequestTstOp) AllValues() []JSONPatchRequestTstOp {
	return []JSONPatchRequestTstOp{
		JSONPatchRequestTstOpTest,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JSONPatchRequestTstOp) MarshalText() ([]byte, error) {
	switch s {
	case JSONPatchRequestTstOpTest:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JSONPatchRequestTstOp) UnmarshalText(data []byte) error {
	switch JSONPatchRequestTstOp(data) {
	case JSONPatchRequestTstOpTest:
		*s = JSONPatchRequestTstOpTest
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The value to test.
// JSONPatchRequestTstValue represents sum type.
type JSONPatchRequestTstValue struct {
	Type    JSONPatchRequestTstValueType // switch on this field
	String  string
	Float64 float64
	Bool    bool
}

// JSONPatchRequestTstValueType is oneOf type of JSONPatchRequestTstValue.
type JSONPatchRequestTstValueType string

// Possible values for JSONPatchRequestTstValueType.
const (
	StringJSONPatchRequestTstValue  JSONPatchRequestTstValueType = "string"
	Float64JSONPatchRequestTstValue JSONPatchRequestTstValueType = "float64"
	BoolJSONPatchRequestTstValue    JSONPatchRequestTstValueType = "bool"
)

// IsString reports whether JSONPatchRequestTstValue is string.
func (s JSONPatchRequestTstValue) IsString() bool { return s.Type == StringJSONPatchRequestTstValue }

// IsFloat64 reports whether JSONPatchRequestTstValue is float64.
func (s JSONPatchRequestTstValue) IsFloat64() bool { return s.Type == Float64JSONPatchRequestTstValue }

// IsBool reports whether JSONPatchRequestTstValue is bool.
func (s JSONPatchRequestTstValue) IsBool() bool { return s.Type == BoolJSONPatchRequestTstValue }

// SetString sets JSONPatchRequestTstValue to string.
func (s *JSONPatchRequestTstValue) SetString(v string) {
	s.Type = StringJSONPatchRequestTstValue
	s.String = v
}

// GetString returns string and true boolean if JSONPatchRequestTstValue is string.
func (s JSONPatchRequestTstValue) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringJSONPatchRequestTstValue returns new JSONPatchRequestTstValue from string.
func NewStringJSONPatchRequestTstValue(v string) JSONPatchRequestTstValue {
	var s JSONPatchRequestTstValue
	s.SetString(v)
	return s
}

// SetFloat64 sets JSONPatchRequestTstValue to float64.
func (s *JSONPatchRequestTstValue) SetFloat64(v float64) {
	s.Type = Float64JSONPatchRequestTstValue
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if JSONPatchRequestTstValue is float64.
func (s JSONPatchRequestTstValue) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64JSONPatchRequestTstValue returns new JSONPatchRequestTstValue from float64.
func NewFloat64JSONPatchRequestTstValue(v float64) JSONPatchRequestTstValue {
	var s JSONPatchRequestTstValue
	s.SetFloat64(v)
	return s
}

// SetBool sets JSONPatchRequestTstValue to bool.
func (s *JSONPatchRequestTstValue) SetBool(v bool) {
	s.Type = BoolJSONPatchRequestTstValue
	s.Bool = v
}

// GetBool returns bool and true boolean if JSONPatchRequestTstValue is bool.
func (s JSONPatchRequestTstValue) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolJSONPatchRequestTstValue returns new JSONPatchRequestTstValue from bool.
func NewBoolJSONPatchRequestTstValue(v bool) JSONPatchRequestTstValue {
	var s JSONPatchRequestTstValue
	s.SetBool(v)
	return s
}

// Holds the required service account information for varying providers.
// Ref: #/components/schemas/KeyInfos
type KeyInfos struct {
	Description    OptString              `json:"description"`
	KeyInformation KeyInfosKeyInformation `json:"keyInformation"`
}

// GetDescription returns the value of Description.
func (s *KeyInfos) GetDescription() OptString {
	return s.Description
}

// GetKeyInformation returns the value of KeyInformation.
func (s *KeyInfos) GetKeyInformation() KeyInfosKeyInformation {
	return s.KeyInformation
}

// SetDescription sets the value of Description.
func (s *KeyInfos) SetDescription(val OptString) {
	s.Description = val
}

// SetKeyInformation sets the value of KeyInformation.
func (s *KeyInfos) SetKeyInformation(val KeyInfosKeyInformation) {
	s.KeyInformation = val
}

// KeyInfosKeyInformation represents sum type.
type KeyInfosKeyInformation struct {
	Type                          KeyInfosKeyInformationType // switch on this field
	GCPServiceAccountKeyInfo      GCPServiceAccountKeyInfo
	AntimatterDelegatedGCPKeyInfo AntimatterDelegatedGCPKeyInfo
	AWSServiceAccountKeyInfo      AWSServiceAccountKeyInfo
	AntimatterDelegatedAWSKeyInfo AntimatterDelegatedAWSKeyInfo
	BYOKKeyInfo                   BYOKKeyInfo
}

// KeyInfosKeyInformationType is oneOf type of KeyInfosKeyInformation.
type KeyInfosKeyInformationType string

// Possible values for KeyInfosKeyInformationType.
const (
	GCPServiceAccountKeyInfoKeyInfosKeyInformation      KeyInfosKeyInformationType = "gcp_sa"
	AntimatterDelegatedGCPKeyInfoKeyInfosKeyInformation KeyInfosKeyInformationType = "gcp_am"
	AWSServiceAccountKeyInfoKeyInfosKeyInformation      KeyInfosKeyInformationType = "aws_sa"
	AntimatterDelegatedAWSKeyInfoKeyInfosKeyInformation KeyInfosKeyInformationType = "aws_am"
	BYOKKeyInfoKeyInfosKeyInformation                   KeyInfosKeyInformationType = "byok"
)

// IsGCPServiceAccountKeyInfo reports whether KeyInfosKeyInformation is GCPServiceAccountKeyInfo.
func (s KeyInfosKeyInformation) IsGCPServiceAccountKeyInfo() bool {
	return s.Type == GCPServiceAccountKeyInfoKeyInfosKeyInformation
}

// IsAntimatterDelegatedGCPKeyInfo reports whether KeyInfosKeyInformation is AntimatterDelegatedGCPKeyInfo.
func (s KeyInfosKeyInformation) IsAntimatterDelegatedGCPKeyInfo() bool {
	return s.Type == AntimatterDelegatedGCPKeyInfoKeyInfosKeyInformation
}

// IsAWSServiceAccountKeyInfo reports whether KeyInfosKeyInformation is AWSServiceAccountKeyInfo.
func (s KeyInfosKeyInformation) IsAWSServiceAccountKeyInfo() bool {
	return s.Type == AWSServiceAccountKeyInfoKeyInfosKeyInformation
}

// IsAntimatterDelegatedAWSKeyInfo reports whether KeyInfosKeyInformation is AntimatterDelegatedAWSKeyInfo.
func (s KeyInfosKeyInformation) IsAntimatterDelegatedAWSKeyInfo() bool {
	return s.Type == AntimatterDelegatedAWSKeyInfoKeyInfosKeyInformation
}

// IsBYOKKeyInfo reports whether KeyInfosKeyInformation is BYOKKeyInfo.
func (s KeyInfosKeyInformation) IsBYOKKeyInfo() bool {
	return s.Type == BYOKKeyInfoKeyInfosKeyInformation
}

// SetGCPServiceAccountKeyInfo sets KeyInfosKeyInformation to GCPServiceAccountKeyInfo.
func (s *KeyInfosKeyInformation) SetGCPServiceAccountKeyInfo(v GCPServiceAccountKeyInfo) {
	s.Type = GCPServiceAccountKeyInfoKeyInfosKeyInformation
	s.GCPServiceAccountKeyInfo = v
}

// GetGCPServiceAccountKeyInfo returns GCPServiceAccountKeyInfo and true boolean if KeyInfosKeyInformation is GCPServiceAccountKeyInfo.
func (s KeyInfosKeyInformation) GetGCPServiceAccountKeyInfo() (v GCPServiceAccountKeyInfo, ok bool) {
	if !s.IsGCPServiceAccountKeyInfo() {
		return v, false
	}
	return s.GCPServiceAccountKeyInfo, true
}

// NewGCPServiceAccountKeyInfoKeyInfosKeyInformation returns new KeyInfosKeyInformation from GCPServiceAccountKeyInfo.
func NewGCPServiceAccountKeyInfoKeyInfosKeyInformation(v GCPServiceAccountKeyInfo) KeyInfosKeyInformation {
	var s KeyInfosKeyInformation
	s.SetGCPServiceAccountKeyInfo(v)
	return s
}

// SetAntimatterDelegatedGCPKeyInfo sets KeyInfosKeyInformation to AntimatterDelegatedGCPKeyInfo.
func (s *KeyInfosKeyInformation) SetAntimatterDelegatedGCPKeyInfo(v AntimatterDelegatedGCPKeyInfo) {
	s.Type = AntimatterDelegatedGCPKeyInfoKeyInfosKeyInformation
	s.AntimatterDelegatedGCPKeyInfo = v
}

// GetAntimatterDelegatedGCPKeyInfo returns AntimatterDelegatedGCPKeyInfo and true boolean if KeyInfosKeyInformation is AntimatterDelegatedGCPKeyInfo.
func (s KeyInfosKeyInformation) GetAntimatterDelegatedGCPKeyInfo() (v AntimatterDelegatedGCPKeyInfo, ok bool) {
	if !s.IsAntimatterDelegatedGCPKeyInfo() {
		return v, false
	}
	return s.AntimatterDelegatedGCPKeyInfo, true
}

// NewAntimatterDelegatedGCPKeyInfoKeyInfosKeyInformation returns new KeyInfosKeyInformation from AntimatterDelegatedGCPKeyInfo.
func NewAntimatterDelegatedGCPKeyInfoKeyInfosKeyInformation(v AntimatterDelegatedGCPKeyInfo) KeyInfosKeyInformation {
	var s KeyInfosKeyInformation
	s.SetAntimatterDelegatedGCPKeyInfo(v)
	return s
}

// SetAWSServiceAccountKeyInfo sets KeyInfosKeyInformation to AWSServiceAccountKeyInfo.
func (s *KeyInfosKeyInformation) SetAWSServiceAccountKeyInfo(v AWSServiceAccountKeyInfo) {
	s.Type = AWSServiceAccountKeyInfoKeyInfosKeyInformation
	s.AWSServiceAccountKeyInfo = v
}

// GetAWSServiceAccountKeyInfo returns AWSServiceAccountKeyInfo and true boolean if KeyInfosKeyInformation is AWSServiceAccountKeyInfo.
func (s KeyInfosKeyInformation) GetAWSServiceAccountKeyInfo() (v AWSServiceAccountKeyInfo, ok bool) {
	if !s.IsAWSServiceAccountKeyInfo() {
		return v, false
	}
	return s.AWSServiceAccountKeyInfo, true
}

// NewAWSServiceAccountKeyInfoKeyInfosKeyInformation returns new KeyInfosKeyInformation from AWSServiceAccountKeyInfo.
func NewAWSServiceAccountKeyInfoKeyInfosKeyInformation(v AWSServiceAccountKeyInfo) KeyInfosKeyInformation {
	var s KeyInfosKeyInformation
	s.SetAWSServiceAccountKeyInfo(v)
	return s
}

// SetAntimatterDelegatedAWSKeyInfo sets KeyInfosKeyInformation to AntimatterDelegatedAWSKeyInfo.
func (s *KeyInfosKeyInformation) SetAntimatterDelegatedAWSKeyInfo(v AntimatterDelegatedAWSKeyInfo) {
	s.Type = AntimatterDelegatedAWSKeyInfoKeyInfosKeyInformation
	s.AntimatterDelegatedAWSKeyInfo = v
}

// GetAntimatterDelegatedAWSKeyInfo returns AntimatterDelegatedAWSKeyInfo and true boolean if KeyInfosKeyInformation is AntimatterDelegatedAWSKeyInfo.
func (s KeyInfosKeyInformation) GetAntimatterDelegatedAWSKeyInfo() (v AntimatterDelegatedAWSKeyInfo, ok bool) {
	if !s.IsAntimatterDelegatedAWSKeyInfo() {
		return v, false
	}
	return s.AntimatterDelegatedAWSKeyInfo, true
}

// NewAntimatterDelegatedAWSKeyInfoKeyInfosKeyInformation returns new KeyInfosKeyInformation from AntimatterDelegatedAWSKeyInfo.
func NewAntimatterDelegatedAWSKeyInfoKeyInfosKeyInformation(v AntimatterDelegatedAWSKeyInfo) KeyInfosKeyInformation {
	var s KeyInfosKeyInformation
	s.SetAntimatterDelegatedAWSKeyInfo(v)
	return s
}

// SetBYOKKeyInfo sets KeyInfosKeyInformation to BYOKKeyInfo.
func (s *KeyInfosKeyInformation) SetBYOKKeyInfo(v BYOKKeyInfo) {
	s.Type = BYOKKeyInfoKeyInfosKeyInformation
	s.BYOKKeyInfo = v
}

// GetBYOKKeyInfo returns BYOKKeyInfo and true boolean if KeyInfosKeyInformation is BYOKKeyInfo.
func (s KeyInfosKeyInformation) GetBYOKKeyInfo() (v BYOKKeyInfo, ok bool) {
	if !s.IsBYOKKeyInfo() {
		return v, false
	}
	return s.BYOKKeyInfo, true
}

// NewBYOKKeyInfoKeyInfosKeyInformation returns new KeyInfosKeyInformation from BYOKKeyInfo.
func NewBYOKKeyInfoKeyInfosKeyInformation(v BYOKKeyInfo) KeyInfosKeyInformation {
	var s KeyInfosKeyInformation
	s.SetBYOKKeyInfo(v)
	return s
}

type LogEntryID string

// An individual capsule data-plane log entry, in the form required when inserting a  new record.
// Ref: #/components/schemas/NewAccessLogEntry
type NewAccessLogEntry struct {
	Operation NewAccessLogEntryOperation `json:"operation"`
	// The location URL that this capsule resided in during the operation, if known.
	Location OptString `json:"location"`
	// Information available if the operation is of type "read". allowedTags are those that were allowed
	// without transformation during the read. redactedTags are those that were redacted during the read.
	// tokenizedTags are those that were tokenized during the read.
	ReadInfo NewAccessLogEntryReadInfo `json:"readInfo"`
}

// GetOperation returns the value of Operation.
func (s *NewAccessLogEntry) GetOperation() NewAccessLogEntryOperation {
	return s.Operation
}

// GetLocation returns the value of Location.
func (s *NewAccessLogEntry) GetLocation() OptString {
	return s.Location
}

// GetReadInfo returns the value of ReadInfo.
func (s *NewAccessLogEntry) GetReadInfo() NewAccessLogEntryReadInfo {
	return s.ReadInfo
}

// SetOperation sets the value of Operation.
func (s *NewAccessLogEntry) SetOperation(val NewAccessLogEntryOperation) {
	s.Operation = val
}

// SetLocation sets the value of Location.
func (s *NewAccessLogEntry) SetLocation(val OptString) {
	s.Location = val
}

// SetReadInfo sets the value of ReadInfo.
func (s *NewAccessLogEntry) SetReadInfo(val NewAccessLogEntryReadInfo) {
	s.ReadInfo = val
}

type NewAccessLogEntryOperation string

const (
	NewAccessLogEntryOperationRead NewAccessLogEntryOperation = "read"
)

// AllValues returns all NewAccessLogEntryOperation values.
func (NewAccessLogEntryOperation) AllValues() []NewAccessLogEntryOperation {
	return []NewAccessLogEntryOperation{
		NewAccessLogEntryOperationRead,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewAccessLogEntryOperation) MarshalText() ([]byte, error) {
	switch s {
	case NewAccessLogEntryOperationRead:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewAccessLogEntryOperation) UnmarshalText(data []byte) error {
	switch NewAccessLogEntryOperation(data) {
	case NewAccessLogEntryOperationRead:
		*s = NewAccessLogEntryOperationRead
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information available if the operation is of type "read". allowedTags are those that were allowed
// without transformation during the read. redactedTags are those that were redacted during the read.
// tokenizedTags are those that were tokenized during the read.
type NewAccessLogEntryReadInfo struct {
	// The client-specified parameters representing the user on whose behalf this read is being carried
	// out. Valid only for operation = read.
	Parameters    NewAccessLogEntryReadInfoParameters `json:"parameters"`
	AllowedTags   TagSummary                          `json:"allowedTags"`
	RedactedTags  TagSummary                          `json:"redactedTags"`
	TokenizedTags TagSummary                          `json:"tokenizedTags"`
	// The number of records returned by the read, including those with allowed, redacted or tokenized
	// spans.
	ReturnedRecords int `json:"returnedRecords"`
	// The number of records that were completely filtered out during the read operation.
	FilteredRecords int `json:"filteredRecords"`
}

// GetParameters returns the value of Parameters.
func (s *NewAccessLogEntryReadInfo) GetParameters() NewAccessLogEntryReadInfoParameters {
	return s.Parameters
}

// GetAllowedTags returns the value of AllowedTags.
func (s *NewAccessLogEntryReadInfo) GetAllowedTags() TagSummary {
	return s.AllowedTags
}

// GetRedactedTags returns the value of RedactedTags.
func (s *NewAccessLogEntryReadInfo) GetRedactedTags() TagSummary {
	return s.RedactedTags
}

// GetTokenizedTags returns the value of TokenizedTags.
func (s *NewAccessLogEntryReadInfo) GetTokenizedTags() TagSummary {
	return s.TokenizedTags
}

// GetReturnedRecords returns the value of ReturnedRecords.
func (s *NewAccessLogEntryReadInfo) GetReturnedRecords() int {
	return s.ReturnedRecords
}

// GetFilteredRecords returns the value of FilteredRecords.
func (s *NewAccessLogEntryReadInfo) GetFilteredRecords() int {
	return s.FilteredRecords
}

// SetParameters sets the value of Parameters.
func (s *NewAccessLogEntryReadInfo) SetParameters(val NewAccessLogEntryReadInfoParameters) {
	s.Parameters = val
}

// SetAllowedTags sets the value of AllowedTags.
func (s *NewAccessLogEntryReadInfo) SetAllowedTags(val TagSummary) {
	s.AllowedTags = val
}

// SetRedactedTags sets the value of RedactedTags.
func (s *NewAccessLogEntryReadInfo) SetRedactedTags(val TagSummary) {
	s.RedactedTags = val
}

// SetTokenizedTags sets the value of TokenizedTags.
func (s *NewAccessLogEntryReadInfo) SetTokenizedTags(val TagSummary) {
	s.TokenizedTags = val
}

// SetReturnedRecords sets the value of ReturnedRecords.
func (s *NewAccessLogEntryReadInfo) SetReturnedRecords(val int) {
	s.ReturnedRecords = val
}

// SetFilteredRecords sets the value of FilteredRecords.
func (s *NewAccessLogEntryReadInfo) SetFilteredRecords(val int) {
	s.FilteredRecords = val
}

// The client-specified parameters representing the user on whose behalf this read is being carried
// out. Valid only for operation = read.
type NewAccessLogEntryReadInfoParameters map[string]string

func (s *NewAccessLogEntryReadInfoParameters) init() NewAccessLogEntryReadInfoParameters {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A capability is attached to authenticated domain identities by an identity provider, and confers
// additional permissions upon the identity. This is done by writing domain policy rules that
// reference the capability.
// Ref: #/components/schemas/NewCapabilityDefinition
type NewCapabilityDefinition struct {
	// A unary capability does not have a value.
	Unary bool `json:"unary"`
	// A short, single sentence description of this capability.
	Summary string `json:"summary"`
	// A longer form description of this capability.
	Description string `json:"description"`
}

// GetUnary returns the value of Unary.
func (s *NewCapabilityDefinition) GetUnary() bool {
	return s.Unary
}

// GetSummary returns the value of Summary.
func (s *NewCapabilityDefinition) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *NewCapabilityDefinition) GetDescription() string {
	return s.Description
}

// SetUnary sets the value of Unary.
func (s *NewCapabilityDefinition) SetUnary(val bool) {
	s.Unary = val
}

// SetSummary sets the value of Summary.
func (s *NewCapabilityDefinition) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *NewCapabilityDefinition) SetDescription(val string) {
	s.Description = val
}

// Parameters when creating a domain.
// Ref: #/components/schemas/NewDomain
type NewDomain struct {
	AdminEmail string `json:"adminEmail"`
	// If supplied, and if the principal claim contains the email
	// address specified as adminEmail, skip email verification.
	GoogleJWT   OptString `json:"googleJWT"`
	DisplayName OptString `json:"displayName"`
}

// GetAdminEmail returns the value of AdminEmail.
func (s *NewDomain) GetAdminEmail() string {
	return s.AdminEmail
}

// GetGoogleJWT returns the value of GoogleJWT.
func (s *NewDomain) GetGoogleJWT() OptString {
	return s.GoogleJWT
}

// GetDisplayName returns the value of DisplayName.
func (s *NewDomain) GetDisplayName() OptString {
	return s.DisplayName
}

// SetAdminEmail sets the value of AdminEmail.
func (s *NewDomain) SetAdminEmail(val string) {
	s.AdminEmail = val
}

// SetGoogleJWT sets the value of GoogleJWT.
func (s *NewDomain) SetGoogleJWT(val OptString) {
	s.GoogleJWT = val
}

// SetDisplayName sets the value of DisplayName.
func (s *NewDomain) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// A rule governing the domain's policy. All domain identity capabilities must match (AND) for the
// action to take effect. If the domainIdentity or facts sections are omitted, they match all domain
// identities and any fact configurations respectively.
// Ref: #/components/schemas/NewDomainPolicyRule
type NewDomainPolicyRule struct {
	DomainIdentity OptCapabilityRule `json:"domainIdentity"`
	Facts          FactPolicyRules   `json:"facts"`
	// The path this rule governs. This pattern may contain glob expressions (e.g. '*' and '**').
	Path      string              `json:"path"`
	Operation PolicyRuleOperation `json:"operation"`
	Result    PolicyRuleResult    `json:"result"`
	// This rule's priority. Lower priority numbers rules are evaluated first.
	Priority int `json:"priority"`
	// If this rule is disabled or not.
	Disabled bool `json:"disabled"`
}

// GetDomainIdentity returns the value of DomainIdentity.
func (s *NewDomainPolicyRule) GetDomainIdentity() OptCapabilityRule {
	return s.DomainIdentity
}

// GetFacts returns the value of Facts.
func (s *NewDomainPolicyRule) GetFacts() FactPolicyRules {
	return s.Facts
}

// GetPath returns the value of Path.
func (s *NewDomainPolicyRule) GetPath() string {
	return s.Path
}

// GetOperation returns the value of Operation.
func (s *NewDomainPolicyRule) GetOperation() PolicyRuleOperation {
	return s.Operation
}

// GetResult returns the value of Result.
func (s *NewDomainPolicyRule) GetResult() PolicyRuleResult {
	return s.Result
}

// GetPriority returns the value of Priority.
func (s *NewDomainPolicyRule) GetPriority() int {
	return s.Priority
}

// GetDisabled returns the value of Disabled.
func (s *NewDomainPolicyRule) GetDisabled() bool {
	return s.Disabled
}

// SetDomainIdentity sets the value of DomainIdentity.
func (s *NewDomainPolicyRule) SetDomainIdentity(val OptCapabilityRule) {
	s.DomainIdentity = val
}

// SetFacts sets the value of Facts.
func (s *NewDomainPolicyRule) SetFacts(val FactPolicyRules) {
	s.Facts = val
}

// SetPath sets the value of Path.
func (s *NewDomainPolicyRule) SetPath(val string) {
	s.Path = val
}

// SetOperation sets the value of Operation.
func (s *NewDomainPolicyRule) SetOperation(val PolicyRuleOperation) {
	s.Operation = val
}

// SetResult sets the value of Result.
func (s *NewDomainPolicyRule) SetResult(val PolicyRuleResult) {
	s.Result = val
}

// SetPriority sets the value of Priority.
func (s *NewDomainPolicyRule) SetPriority(val int) {
	s.Priority = val
}

// SetDisabled sets the value of Disabled.
func (s *NewDomainPolicyRule) SetDisabled(val bool) {
	s.Disabled = val
}

// Information returned from a successful domain create request.
// Ref: #/components/schemas/NewDomainResponse
type NewDomainResponse struct {
	ID     DomainID `json:"id"`
	ApiKey string   `json:"apiKey"`
}

// GetID returns the value of ID.
func (s *NewDomainResponse) GetID() DomainID {
	return s.ID
}

// GetApiKey returns the value of ApiKey.
func (s *NewDomainResponse) GetApiKey() string {
	return s.ApiKey
}

// SetID sets the value of ID.
func (s *NewDomainResponse) SetID(val DomainID) {
	s.ID = val
}

// SetApiKey sets the value of ApiKey.
func (s *NewDomainResponse) SetApiKey(val string) {
	s.ApiKey = val
}

func (*NewDomainResponse) domainAddNewRes()           {}
func (*NewDomainResponse) domainCreatePeerDomainRes() {}

// A fact is a piece of auxiliary information that can be used as part of an authorization policy.
// They are usually expressed as a statement such as has_role(principal, role_name).
// Ref: #/components/schemas/NewFact
type NewFact struct {
	Arguments []string `json:"arguments"`
}

// GetArguments returns the value of Arguments.
func (s *NewFact) GetArguments() []string {
	return s.Arguments
}

// SetArguments sets the value of Arguments.
func (s *NewFact) SetArguments(val []string) {
	s.Arguments = val
}

// A type definition (schema) for a fact being created.
// Ref: #/components/schemas/NewFactTypeDefinition
type NewFactTypeDefinition struct {
	Description string                               `json:"description"`
	Arguments   []NewFactTypeDefinitionArgumentsItem `json:"arguments"`
}

// GetDescription returns the value of Description.
func (s *NewFactTypeDefinition) GetDescription() string {
	return s.Description
}

// GetArguments returns the value of Arguments.
func (s *NewFactTypeDefinition) GetArguments() []NewFactTypeDefinitionArgumentsItem {
	return s.Arguments
}

// SetDescription sets the value of Description.
func (s *NewFactTypeDefinition) SetDescription(val string) {
	s.Description = val
}

// SetArguments sets the value of Arguments.
func (s *NewFactTypeDefinition) SetArguments(val []NewFactTypeDefinitionArgumentsItem) {
	s.Arguments = val
}

type NewFactTypeDefinitionArgumentsItem struct {
	// The name of the argument.
	Name string `json:"name"`
	// The description of the argument.
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *NewFactTypeDefinitionArgumentsItem) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *NewFactTypeDefinitionArgumentsItem) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *NewFactTypeDefinitionArgumentsItem) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *NewFactTypeDefinitionArgumentsItem) SetDescription(val string) {
	s.Description = val
}

// Information about what must be done to data when it is read from a capsule.
// Ref: #/components/schemas/NewReadContextConfigRule
type NewReadContextConfigRule struct {
	MatchExpressions ReadContextRuleMatchExpressions `json:"matchExpressions"`
	Action           NewReadContextConfigRuleAction  `json:"action"`
	// If the action is Tokenize, what scope to use for the token.
	TokenScope OptNewReadContextConfigRuleTokenScope `json:"tokenScope"`
	// If the action is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx
	// and synthetic returns something that looks like the original data type (e.g. John Smith for a
	// name) but is in fact a token.
	TokenFormat OptNewReadContextConfigRuleTokenFormat `json:"tokenFormat"`
	Facts       ReadContextRuleFacts                   `json:"facts"`
	// This rule's priority. Lower priority numbers rules are evaluated first.
	Priority int `json:"priority"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *NewReadContextConfigRule) GetMatchExpressions() ReadContextRuleMatchExpressions {
	return s.MatchExpressions
}

// GetAction returns the value of Action.
func (s *NewReadContextConfigRule) GetAction() NewReadContextConfigRuleAction {
	return s.Action
}

// GetTokenScope returns the value of TokenScope.
func (s *NewReadContextConfigRule) GetTokenScope() OptNewReadContextConfigRuleTokenScope {
	return s.TokenScope
}

// GetTokenFormat returns the value of TokenFormat.
func (s *NewReadContextConfigRule) GetTokenFormat() OptNewReadContextConfigRuleTokenFormat {
	return s.TokenFormat
}

// GetFacts returns the value of Facts.
func (s *NewReadContextConfigRule) GetFacts() ReadContextRuleFacts {
	return s.Facts
}

// GetPriority returns the value of Priority.
func (s *NewReadContextConfigRule) GetPriority() int {
	return s.Priority
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *NewReadContextConfigRule) SetMatchExpressions(val ReadContextRuleMatchExpressions) {
	s.MatchExpressions = val
}

// SetAction sets the value of Action.
func (s *NewReadContextConfigRule) SetAction(val NewReadContextConfigRuleAction) {
	s.Action = val
}

// SetTokenScope sets the value of TokenScope.
func (s *NewReadContextConfigRule) SetTokenScope(val OptNewReadContextConfigRuleTokenScope) {
	s.TokenScope = val
}

// SetTokenFormat sets the value of TokenFormat.
func (s *NewReadContextConfigRule) SetTokenFormat(val OptNewReadContextConfigRuleTokenFormat) {
	s.TokenFormat = val
}

// SetFacts sets the value of Facts.
func (s *NewReadContextConfigRule) SetFacts(val ReadContextRuleFacts) {
	s.Facts = val
}

// SetPriority sets the value of Priority.
func (s *NewReadContextConfigRule) SetPriority(val int) {
	s.Priority = val
}

type NewReadContextConfigRuleAction string

const (
	NewReadContextConfigRuleActionDenyCapsule NewReadContextConfigRuleAction = "DenyCapsule"
	NewReadContextConfigRuleActionDenyRecord  NewReadContextConfigRuleAction = "DenyRecord"
	NewReadContextConfigRuleActionRedact      NewReadContextConfigRuleAction = "Redact"
	NewReadContextConfigRuleActionTokenize    NewReadContextConfigRuleAction = "Tokenize"
	NewReadContextConfigRuleActionAllow       NewReadContextConfigRuleAction = "Allow"
)

// AllValues returns all NewReadContextConfigRuleAction values.
func (NewReadContextConfigRuleAction) AllValues() []NewReadContextConfigRuleAction {
	return []NewReadContextConfigRuleAction{
		NewReadContextConfigRuleActionDenyCapsule,
		NewReadContextConfigRuleActionDenyRecord,
		NewReadContextConfigRuleActionRedact,
		NewReadContextConfigRuleActionTokenize,
		NewReadContextConfigRuleActionAllow,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewReadContextConfigRuleAction) MarshalText() ([]byte, error) {
	switch s {
	case NewReadContextConfigRuleActionDenyCapsule:
		return []byte(s), nil
	case NewReadContextConfigRuleActionDenyRecord:
		return []byte(s), nil
	case NewReadContextConfigRuleActionRedact:
		return []byte(s), nil
	case NewReadContextConfigRuleActionTokenize:
		return []byte(s), nil
	case NewReadContextConfigRuleActionAllow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewReadContextConfigRuleAction) UnmarshalText(data []byte) error {
	switch NewReadContextConfigRuleAction(data) {
	case NewReadContextConfigRuleActionDenyCapsule:
		*s = NewReadContextConfigRuleActionDenyCapsule
		return nil
	case NewReadContextConfigRuleActionDenyRecord:
		*s = NewReadContextConfigRuleActionDenyRecord
		return nil
	case NewReadContextConfigRuleActionRedact:
		*s = NewReadContextConfigRuleActionRedact
		return nil
	case NewReadContextConfigRuleActionTokenize:
		*s = NewReadContextConfigRuleActionTokenize
		return nil
	case NewReadContextConfigRuleActionAllow:
		*s = NewReadContextConfigRuleActionAllow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// If the action is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx
// and synthetic returns something that looks like the original data type (e.g. John Smith for a
// name) but is in fact a token.
type NewReadContextConfigRuleTokenFormat string

const (
	NewReadContextConfigRuleTokenFormatExplicit  NewReadContextConfigRuleTokenFormat = "explicit"
	NewReadContextConfigRuleTokenFormatSynthetic NewReadContextConfigRuleTokenFormat = "synthetic"
)

// AllValues returns all NewReadContextConfigRuleTokenFormat values.
func (NewReadContextConfigRuleTokenFormat) AllValues() []NewReadContextConfigRuleTokenFormat {
	return []NewReadContextConfigRuleTokenFormat{
		NewReadContextConfigRuleTokenFormatExplicit,
		NewReadContextConfigRuleTokenFormatSynthetic,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewReadContextConfigRuleTokenFormat) MarshalText() ([]byte, error) {
	switch s {
	case NewReadContextConfigRuleTokenFormatExplicit:
		return []byte(s), nil
	case NewReadContextConfigRuleTokenFormatSynthetic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewReadContextConfigRuleTokenFormat) UnmarshalText(data []byte) error {
	switch NewReadContextConfigRuleTokenFormat(data) {
	case NewReadContextConfigRuleTokenFormatExplicit:
		*s = NewReadContextConfigRuleTokenFormatExplicit
		return nil
	case NewReadContextConfigRuleTokenFormatSynthetic:
		*s = NewReadContextConfigRuleTokenFormatSynthetic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// If the action is Tokenize, what scope to use for the token.
type NewReadContextConfigRuleTokenScope string

const (
	NewReadContextConfigRuleTokenScopeUnique  NewReadContextConfigRuleTokenScope = "unique"
	NewReadContextConfigRuleTokenScopeCapsule NewReadContextConfigRuleTokenScope = "capsule"
	NewReadContextConfigRuleTokenScopeDomain  NewReadContextConfigRuleTokenScope = "domain"
)

// AllValues returns all NewReadContextConfigRuleTokenScope values.
func (NewReadContextConfigRuleTokenScope) AllValues() []NewReadContextConfigRuleTokenScope {
	return []NewReadContextConfigRuleTokenScope{
		NewReadContextConfigRuleTokenScopeUnique,
		NewReadContextConfigRuleTokenScopeCapsule,
		NewReadContextConfigRuleTokenScopeDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NewReadContextConfigRuleTokenScope) MarshalText() ([]byte, error) {
	switch s {
	case NewReadContextConfigRuleTokenScopeUnique:
		return []byte(s), nil
	case NewReadContextConfigRuleTokenScopeCapsule:
		return []byte(s), nil
	case NewReadContextConfigRuleTokenScopeDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NewReadContextConfigRuleTokenScope) UnmarshalText(data []byte) error {
	switch NewReadContextConfigRuleTokenScope(data) {
	case NewReadContextConfigRuleTokenScopeUnique:
		*s = NewReadContextConfigRuleTokenScopeUnique
		return nil
	case NewReadContextConfigRuleTokenScopeCapsule:
		*s = NewReadContextConfigRuleTokenScopeCapsule
		return nil
	case NewReadContextConfigRuleTokenScopeDomain:
		*s = NewReadContextConfigRuleTokenScopeDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type OAuthToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *OAuthToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *OAuthToken) SetToken(val string) {
	s.Token = val
}

// NewOptAPIKeyDomainIdentityProviderDetailsType returns new OptAPIKeyDomainIdentityProviderDetailsType with value set to v.
func NewOptAPIKeyDomainIdentityProviderDetailsType(v APIKeyDomainIdentityProviderDetailsType) OptAPIKeyDomainIdentityProviderDetailsType {
	return OptAPIKeyDomainIdentityProviderDetailsType{
		Value: v,
		Set:   true,
	}
}

// OptAPIKeyDomainIdentityProviderDetailsType is optional APIKeyDomainIdentityProviderDetailsType.
type OptAPIKeyDomainIdentityProviderDetailsType struct {
	Value APIKeyDomainIdentityProviderDetailsType
	Set   bool
}

// IsSet returns true if OptAPIKeyDomainIdentityProviderDetailsType was set.
func (o OptAPIKeyDomainIdentityProviderDetailsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAPIKeyDomainIdentityProviderDetailsType) Reset() {
	var v APIKeyDomainIdentityProviderDetailsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAPIKeyDomainIdentityProviderDetailsType) SetTo(v APIKeyDomainIdentityProviderDetailsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAPIKeyDomainIdentityProviderDetailsType) Get() (v APIKeyDomainIdentityProviderDetailsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAPIKeyDomainIdentityProviderDetailsType) Or(d APIKeyDomainIdentityProviderDetailsType) APIKeyDomainIdentityProviderDetailsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAWSServiceAccountKeyInfoProviderName returns new OptAWSServiceAccountKeyInfoProviderName with value set to v.
func NewOptAWSServiceAccountKeyInfoProviderName(v AWSServiceAccountKeyInfoProviderName) OptAWSServiceAccountKeyInfoProviderName {
	return OptAWSServiceAccountKeyInfoProviderName{
		Value: v,
		Set:   true,
	}
}

// OptAWSServiceAccountKeyInfoProviderName is optional AWSServiceAccountKeyInfoProviderName.
type OptAWSServiceAccountKeyInfoProviderName struct {
	Value AWSServiceAccountKeyInfoProviderName
	Set   bool
}

// IsSet returns true if OptAWSServiceAccountKeyInfoProviderName was set.
func (o OptAWSServiceAccountKeyInfoProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAWSServiceAccountKeyInfoProviderName) Reset() {
	var v AWSServiceAccountKeyInfoProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAWSServiceAccountKeyInfoProviderName) SetTo(v AWSServiceAccountKeyInfoProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAWSServiceAccountKeyInfoProviderName) Get() (v AWSServiceAccountKeyInfoProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAWSServiceAccountKeyInfoProviderName) Or(d AWSServiceAccountKeyInfoProviderName) AWSServiceAccountKeyInfoProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccessLogEntryCreateInfo returns new OptAccessLogEntryCreateInfo with value set to v.
func NewOptAccessLogEntryCreateInfo(v AccessLogEntryCreateInfo) OptAccessLogEntryCreateInfo {
	return OptAccessLogEntryCreateInfo{
		Value: v,
		Set:   true,
	}
}

// OptAccessLogEntryCreateInfo is optional AccessLogEntryCreateInfo.
type OptAccessLogEntryCreateInfo struct {
	Value AccessLogEntryCreateInfo
	Set   bool
}

// IsSet returns true if OptAccessLogEntryCreateInfo was set.
func (o OptAccessLogEntryCreateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccessLogEntryCreateInfo) Reset() {
	var v AccessLogEntryCreateInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccessLogEntryCreateInfo) SetTo(v AccessLogEntryCreateInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccessLogEntryCreateInfo) Get() (v AccessLogEntryCreateInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccessLogEntryCreateInfo) Or(d AccessLogEntryCreateInfo) AccessLogEntryCreateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccessLogEntryOpenInfo returns new OptAccessLogEntryOpenInfo with value set to v.
func NewOptAccessLogEntryOpenInfo(v AccessLogEntryOpenInfo) OptAccessLogEntryOpenInfo {
	return OptAccessLogEntryOpenInfo{
		Value: v,
		Set:   true,
	}
}

// OptAccessLogEntryOpenInfo is optional AccessLogEntryOpenInfo.
type OptAccessLogEntryOpenInfo struct {
	Value AccessLogEntryOpenInfo
	Set   bool
}

// IsSet returns true if OptAccessLogEntryOpenInfo was set.
func (o OptAccessLogEntryOpenInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccessLogEntryOpenInfo) Reset() {
	var v AccessLogEntryOpenInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccessLogEntryOpenInfo) SetTo(v AccessLogEntryOpenInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccessLogEntryOpenInfo) Get() (v AccessLogEntryOpenInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccessLogEntryOpenInfo) Or(d AccessLogEntryOpenInfo) AccessLogEntryOpenInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccessLogEntryReadInfo returns new OptAccessLogEntryReadInfo with value set to v.
func NewOptAccessLogEntryReadInfo(v AccessLogEntryReadInfo) OptAccessLogEntryReadInfo {
	return OptAccessLogEntryReadInfo{
		Value: v,
		Set:   true,
	}
}

// OptAccessLogEntryReadInfo is optional AccessLogEntryReadInfo.
type OptAccessLogEntryReadInfo struct {
	Value AccessLogEntryReadInfo
	Set   bool
}

// IsSet returns true if OptAccessLogEntryReadInfo was set.
func (o OptAccessLogEntryReadInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccessLogEntryReadInfo) Reset() {
	var v AccessLogEntryReadInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccessLogEntryReadInfo) SetTo(v AccessLogEntryReadInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccessLogEntryReadInfo) Get() (v AccessLogEntryReadInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccessLogEntryReadInfo) Or(d AccessLogEntryReadInfo) AccessLogEntryReadInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAntimatterDelegatedAWSKeyInfoProviderName returns new OptAntimatterDelegatedAWSKeyInfoProviderName with value set to v.
func NewOptAntimatterDelegatedAWSKeyInfoProviderName(v AntimatterDelegatedAWSKeyInfoProviderName) OptAntimatterDelegatedAWSKeyInfoProviderName {
	return OptAntimatterDelegatedAWSKeyInfoProviderName{
		Value: v,
		Set:   true,
	}
}

// OptAntimatterDelegatedAWSKeyInfoProviderName is optional AntimatterDelegatedAWSKeyInfoProviderName.
type OptAntimatterDelegatedAWSKeyInfoProviderName struct {
	Value AntimatterDelegatedAWSKeyInfoProviderName
	Set   bool
}

// IsSet returns true if OptAntimatterDelegatedAWSKeyInfoProviderName was set.
func (o OptAntimatterDelegatedAWSKeyInfoProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAntimatterDelegatedAWSKeyInfoProviderName) Reset() {
	var v AntimatterDelegatedAWSKeyInfoProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAntimatterDelegatedAWSKeyInfoProviderName) SetTo(v AntimatterDelegatedAWSKeyInfoProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAntimatterDelegatedAWSKeyInfoProviderName) Get() (v AntimatterDelegatedAWSKeyInfoProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAntimatterDelegatedAWSKeyInfoProviderName) Or(d AntimatterDelegatedAWSKeyInfoProviderName) AntimatterDelegatedAWSKeyInfoProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAntimatterDelegatedGCPKeyInfoProviderName returns new OptAntimatterDelegatedGCPKeyInfoProviderName with value set to v.
func NewOptAntimatterDelegatedGCPKeyInfoProviderName(v AntimatterDelegatedGCPKeyInfoProviderName) OptAntimatterDelegatedGCPKeyInfoProviderName {
	return OptAntimatterDelegatedGCPKeyInfoProviderName{
		Value: v,
		Set:   true,
	}
}

// OptAntimatterDelegatedGCPKeyInfoProviderName is optional AntimatterDelegatedGCPKeyInfoProviderName.
type OptAntimatterDelegatedGCPKeyInfoProviderName struct {
	Value AntimatterDelegatedGCPKeyInfoProviderName
	Set   bool
}

// IsSet returns true if OptAntimatterDelegatedGCPKeyInfoProviderName was set.
func (o OptAntimatterDelegatedGCPKeyInfoProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAntimatterDelegatedGCPKeyInfoProviderName) Reset() {
	var v AntimatterDelegatedGCPKeyInfoProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAntimatterDelegatedGCPKeyInfoProviderName) SetTo(v AntimatterDelegatedGCPKeyInfoProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAntimatterDelegatedGCPKeyInfoProviderName) Get() (v AntimatterDelegatedGCPKeyInfoProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAntimatterDelegatedGCPKeyInfoProviderName) Or(d AntimatterDelegatedGCPKeyInfoProviderName) AntimatterDelegatedGCPKeyInfoProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAvailableDelegatedRootEncryptionKeyProviderType returns new OptAvailableDelegatedRootEncryptionKeyProviderType with value set to v.
func NewOptAvailableDelegatedRootEncryptionKeyProviderType(v AvailableDelegatedRootEncryptionKeyProviderType) OptAvailableDelegatedRootEncryptionKeyProviderType {
	return OptAvailableDelegatedRootEncryptionKeyProviderType{
		Value: v,
		Set:   true,
	}
}

// OptAvailableDelegatedRootEncryptionKeyProviderType is optional AvailableDelegatedRootEncryptionKeyProviderType.
type OptAvailableDelegatedRootEncryptionKeyProviderType struct {
	Value AvailableDelegatedRootEncryptionKeyProviderType
	Set   bool
}

// IsSet returns true if OptAvailableDelegatedRootEncryptionKeyProviderType was set.
func (o OptAvailableDelegatedRootEncryptionKeyProviderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailableDelegatedRootEncryptionKeyProviderType) Reset() {
	var v AvailableDelegatedRootEncryptionKeyProviderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailableDelegatedRootEncryptionKeyProviderType) SetTo(v AvailableDelegatedRootEncryptionKeyProviderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailableDelegatedRootEncryptionKeyProviderType) Get() (v AvailableDelegatedRootEncryptionKeyProviderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailableDelegatedRootEncryptionKeyProviderType) Or(d AvailableDelegatedRootEncryptionKeyProviderType) AvailableDelegatedRootEncryptionKeyProviderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAvailableServiceAccountRootEncryptionKeyProviderType returns new OptAvailableServiceAccountRootEncryptionKeyProviderType with value set to v.
func NewOptAvailableServiceAccountRootEncryptionKeyProviderType(v AvailableServiceAccountRootEncryptionKeyProviderType) OptAvailableServiceAccountRootEncryptionKeyProviderType {
	return OptAvailableServiceAccountRootEncryptionKeyProviderType{
		Value: v,
		Set:   true,
	}
}

// OptAvailableServiceAccountRootEncryptionKeyProviderType is optional AvailableServiceAccountRootEncryptionKeyProviderType.
type OptAvailableServiceAccountRootEncryptionKeyProviderType struct {
	Value AvailableServiceAccountRootEncryptionKeyProviderType
	Set   bool
}

// IsSet returns true if OptAvailableServiceAccountRootEncryptionKeyProviderType was set.
func (o OptAvailableServiceAccountRootEncryptionKeyProviderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAvailableServiceAccountRootEncryptionKeyProviderType) Reset() {
	var v AvailableServiceAccountRootEncryptionKeyProviderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAvailableServiceAccountRootEncryptionKeyProviderType) SetTo(v AvailableServiceAccountRootEncryptionKeyProviderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAvailableServiceAccountRootEncryptionKeyProviderType) Get() (v AvailableServiceAccountRootEncryptionKeyProviderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAvailableServiceAccountRootEncryptionKeyProviderType) Or(d AvailableServiceAccountRootEncryptionKeyProviderType) AvailableServiceAccountRootEncryptionKeyProviderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBYOKKeyInfoProviderName returns new OptBYOKKeyInfoProviderName with value set to v.
func NewOptBYOKKeyInfoProviderName(v BYOKKeyInfoProviderName) OptBYOKKeyInfoProviderName {
	return OptBYOKKeyInfoProviderName{
		Value: v,
		Set:   true,
	}
}

// OptBYOKKeyInfoProviderName is optional BYOKKeyInfoProviderName.
type OptBYOKKeyInfoProviderName struct {
	Value BYOKKeyInfoProviderName
	Set   bool
}

// IsSet returns true if OptBYOKKeyInfoProviderName was set.
func (o OptBYOKKeyInfoProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBYOKKeyInfoProviderName) Reset() {
	var v BYOKKeyInfoProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBYOKKeyInfoProviderName) SetTo(v BYOKKeyInfoProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBYOKKeyInfoProviderName) Get() (v BYOKKeyInfoProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBYOKKeyInfoProviderName) Or(d BYOKKeyInfoProviderName) BYOKKeyInfoProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapabilityReference returns new OptCapabilityReference with value set to v.
func NewOptCapabilityReference(v CapabilityReference) OptCapabilityReference {
	return OptCapabilityReference{
		Value: v,
		Set:   true,
	}
}

// OptCapabilityReference is optional CapabilityReference.
type OptCapabilityReference struct {
	Value CapabilityReference
	Set   bool
}

// IsSet returns true if OptCapabilityReference was set.
func (o OptCapabilityReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapabilityReference) Reset() {
	var v CapabilityReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapabilityReference) SetTo(v CapabilityReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapabilityReference) Get() (v CapabilityReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapabilityReference) Or(d CapabilityReference) CapabilityReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapabilityRule returns new OptCapabilityRule with value set to v.
func NewOptCapabilityRule(v CapabilityRule) OptCapabilityRule {
	return OptCapabilityRule{
		Value: v,
		Set:   true,
	}
}

// OptCapabilityRule is optional CapabilityRule.
type OptCapabilityRule struct {
	Value CapabilityRule
	Set   bool
}

// IsSet returns true if OptCapabilityRule was set.
func (o OptCapabilityRule) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapabilityRule) Reset() {
	var v CapabilityRule
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapabilityRule) SetTo(v CapabilityRule) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapabilityRule) Get() (v CapabilityRule, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapabilityRule) Or(d CapabilityRule) CapabilityRule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainID returns new OptDomainID with value set to v.
func NewOptDomainID(v DomainID) OptDomainID {
	return OptDomainID{
		Value: v,
		Set:   true,
	}
}

// OptDomainID is optional DomainID.
type OptDomainID struct {
	Value DomainID
	Set   bool
}

// IsSet returns true if OptDomainID was set.
func (o OptDomainID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainID) Reset() {
	var v DomainID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainID) SetTo(v DomainID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainID) Get() (v DomainID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainID) Or(d DomainID) DomainID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainIdentityProviderDetails returns new OptDomainIdentityProviderDetails with value set to v.
func NewOptDomainIdentityProviderDetails(v DomainIdentityProviderDetails) OptDomainIdentityProviderDetails {
	return OptDomainIdentityProviderDetails{
		Value: v,
		Set:   true,
	}
}

// OptDomainIdentityProviderDetails is optional DomainIdentityProviderDetails.
type OptDomainIdentityProviderDetails struct {
	Value DomainIdentityProviderDetails
	Set   bool
}

// IsSet returns true if OptDomainIdentityProviderDetails was set.
func (o OptDomainIdentityProviderDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainIdentityProviderDetails) Reset() {
	var v DomainIdentityProviderDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainIdentityProviderDetails) SetTo(v DomainIdentityProviderDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainIdentityProviderDetails) Get() (v DomainIdentityProviderDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainIdentityProviderDetails) Or(d DomainIdentityProviderDetails) DomainIdentityProviderDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainListCapsulesSortOn returns new OptDomainListCapsulesSortOn with value set to v.
func NewOptDomainListCapsulesSortOn(v DomainListCapsulesSortOn) OptDomainListCapsulesSortOn {
	return OptDomainListCapsulesSortOn{
		Value: v,
		Set:   true,
	}
}

// OptDomainListCapsulesSortOn is optional DomainListCapsulesSortOn.
type OptDomainListCapsulesSortOn struct {
	Value DomainListCapsulesSortOn
	Set   bool
}

// IsSet returns true if OptDomainListCapsulesSortOn was set.
func (o OptDomainListCapsulesSortOn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainListCapsulesSortOn) Reset() {
	var v DomainListCapsulesSortOn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainListCapsulesSortOn) SetTo(v DomainListCapsulesSortOn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainListCapsulesSortOn) Get() (v DomainListCapsulesSortOn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainListCapsulesSortOn) Or(d DomainListCapsulesSortOn) DomainListCapsulesSortOn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainQueryAccessLogOperationType returns new OptDomainQueryAccessLogOperationType with value set to v.
func NewOptDomainQueryAccessLogOperationType(v DomainQueryAccessLogOperationType) OptDomainQueryAccessLogOperationType {
	return OptDomainQueryAccessLogOperationType{
		Value: v,
		Set:   true,
	}
}

// OptDomainQueryAccessLogOperationType is optional DomainQueryAccessLogOperationType.
type OptDomainQueryAccessLogOperationType struct {
	Value DomainQueryAccessLogOperationType
	Set   bool
}

// IsSet returns true if OptDomainQueryAccessLogOperationType was set.
func (o OptDomainQueryAccessLogOperationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainQueryAccessLogOperationType) Reset() {
	var v DomainQueryAccessLogOperationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainQueryAccessLogOperationType) SetTo(v DomainQueryAccessLogOperationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainQueryAccessLogOperationType) Get() (v DomainQueryAccessLogOperationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainQueryAccessLogOperationType) Or(d DomainQueryAccessLogOperationType) DomainQueryAccessLogOperationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainQueryAccessLogSingleCapsuleOperationType returns new OptDomainQueryAccessLogSingleCapsuleOperationType with value set to v.
func NewOptDomainQueryAccessLogSingleCapsuleOperationType(v DomainQueryAccessLogSingleCapsuleOperationType) OptDomainQueryAccessLogSingleCapsuleOperationType {
	return OptDomainQueryAccessLogSingleCapsuleOperationType{
		Value: v,
		Set:   true,
	}
}

// OptDomainQueryAccessLogSingleCapsuleOperationType is optional DomainQueryAccessLogSingleCapsuleOperationType.
type OptDomainQueryAccessLogSingleCapsuleOperationType struct {
	Value DomainQueryAccessLogSingleCapsuleOperationType
	Set   bool
}

// IsSet returns true if OptDomainQueryAccessLogSingleCapsuleOperationType was set.
func (o OptDomainQueryAccessLogSingleCapsuleOperationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainQueryAccessLogSingleCapsuleOperationType) Reset() {
	var v DomainQueryAccessLogSingleCapsuleOperationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainQueryAccessLogSingleCapsuleOperationType) SetTo(v DomainQueryAccessLogSingleCapsuleOperationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainQueryAccessLogSingleCapsuleOperationType) Get() (v DomainQueryAccessLogSingleCapsuleOperationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainQueryAccessLogSingleCapsuleOperationType) Or(d DomainQueryAccessLogSingleCapsuleOperationType) DomainQueryAccessLogSingleCapsuleOperationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDomainSettingsDisasterRecovery returns new OptDomainSettingsDisasterRecovery with value set to v.
func NewOptDomainSettingsDisasterRecovery(v DomainSettingsDisasterRecovery) OptDomainSettingsDisasterRecovery {
	return OptDomainSettingsDisasterRecovery{
		Value: v,
		Set:   true,
	}
}

// OptDomainSettingsDisasterRecovery is optional DomainSettingsDisasterRecovery.
type OptDomainSettingsDisasterRecovery struct {
	Value DomainSettingsDisasterRecovery
	Set   bool
}

// IsSet returns true if OptDomainSettingsDisasterRecovery was set.
func (o OptDomainSettingsDisasterRecovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDomainSettingsDisasterRecovery) Reset() {
	var v DomainSettingsDisasterRecovery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDomainSettingsDisasterRecovery) SetTo(v DomainSettingsDisasterRecovery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDomainSettingsDisasterRecovery) Get() (v DomainSettingsDisasterRecovery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDomainSettingsDisasterRecovery) Or(d DomainSettingsDisasterRecovery) DomainSettingsDisasterRecovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFactPolicyRulesItemArgumentsItemSource returns new OptFactPolicyRulesItemArgumentsItemSource with value set to v.
func NewOptFactPolicyRulesItemArgumentsItemSource(v FactPolicyRulesItemArgumentsItemSource) OptFactPolicyRulesItemArgumentsItemSource {
	return OptFactPolicyRulesItemArgumentsItemSource{
		Value: v,
		Set:   true,
	}
}

// OptFactPolicyRulesItemArgumentsItemSource is optional FactPolicyRulesItemArgumentsItemSource.
type OptFactPolicyRulesItemArgumentsItemSource struct {
	Value FactPolicyRulesItemArgumentsItemSource
	Set   bool
}

// IsSet returns true if OptFactPolicyRulesItemArgumentsItemSource was set.
func (o OptFactPolicyRulesItemArgumentsItemSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFactPolicyRulesItemArgumentsItemSource) Reset() {
	var v FactPolicyRulesItemArgumentsItemSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFactPolicyRulesItemArgumentsItemSource) SetTo(v FactPolicyRulesItemArgumentsItemSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFactPolicyRulesItemArgumentsItemSource) Get() (v FactPolicyRulesItemArgumentsItemSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFactPolicyRulesItemArgumentsItemSource) Or(d FactPolicyRulesItemArgumentsItemSource) FactPolicyRulesItemArgumentsItemSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGCPServiceAccountKeyInfoProviderName returns new OptGCPServiceAccountKeyInfoProviderName with value set to v.
func NewOptGCPServiceAccountKeyInfoProviderName(v GCPServiceAccountKeyInfoProviderName) OptGCPServiceAccountKeyInfoProviderName {
	return OptGCPServiceAccountKeyInfoProviderName{
		Value: v,
		Set:   true,
	}
}

// OptGCPServiceAccountKeyInfoProviderName is optional GCPServiceAccountKeyInfoProviderName.
type OptGCPServiceAccountKeyInfoProviderName struct {
	Value GCPServiceAccountKeyInfoProviderName
	Set   bool
}

// IsSet returns true if OptGCPServiceAccountKeyInfoProviderName was set.
func (o OptGCPServiceAccountKeyInfoProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGCPServiceAccountKeyInfoProviderName) Reset() {
	var v GCPServiceAccountKeyInfoProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGCPServiceAccountKeyInfoProviderName) SetTo(v GCPServiceAccountKeyInfoProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGCPServiceAccountKeyInfoProviderName) Get() (v GCPServiceAccountKeyInfoProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGCPServiceAccountKeyInfoProviderName) Or(d GCPServiceAccountKeyInfoProviderName) GCPServiceAccountKeyInfoProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGoogleOAuthDomainIdentityProviderDetailsType returns new OptGoogleOAuthDomainIdentityProviderDetailsType with value set to v.
func NewOptGoogleOAuthDomainIdentityProviderDetailsType(v GoogleOAuthDomainIdentityProviderDetailsType) OptGoogleOAuthDomainIdentityProviderDetailsType {
	return OptGoogleOAuthDomainIdentityProviderDetailsType{
		Value: v,
		Set:   true,
	}
}

// OptGoogleOAuthDomainIdentityProviderDetailsType is optional GoogleOAuthDomainIdentityProviderDetailsType.
type OptGoogleOAuthDomainIdentityProviderDetailsType struct {
	Value GoogleOAuthDomainIdentityProviderDetailsType
	Set   bool
}

// IsSet returns true if OptGoogleOAuthDomainIdentityProviderDetailsType was set.
func (o OptGoogleOAuthDomainIdentityProviderDetailsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGoogleOAuthDomainIdentityProviderDetailsType) Reset() {
	var v GoogleOAuthDomainIdentityProviderDetailsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGoogleOAuthDomainIdentityProviderDetailsType) SetTo(v GoogleOAuthDomainIdentityProviderDetailsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGoogleOAuthDomainIdentityProviderDetailsType) Get() (v GoogleOAuthDomainIdentityProviderDetailsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGoogleOAuthDomainIdentityProviderDetailsType) Or(d GoogleOAuthDomainIdentityProviderDetailsType) GoogleOAuthDomainIdentityProviderDetailsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHookName returns new OptHookName with value set to v.
func NewOptHookName(v HookName) OptHookName {
	return OptHookName{
		Value: v,
		Set:   true,
	}
}

// OptHookName is optional HookName.
type OptHookName struct {
	Value HookName
	Set   bool
}

// IsSet returns true if OptHookName was set.
func (o OptHookName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHookName) Reset() {
	var v HookName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHookName) SetTo(v HookName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHookName) Get() (v HookName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHookName) Or(d HookName) HookName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentityProviderName returns new OptIdentityProviderName with value set to v.
func NewOptIdentityProviderName(v IdentityProviderName) OptIdentityProviderName {
	return OptIdentityProviderName{
		Value: v,
		Set:   true,
	}
}

// OptIdentityProviderName is optional IdentityProviderName.
type OptIdentityProviderName struct {
	Value IdentityProviderName
	Set   bool
}

// IsSet returns true if OptIdentityProviderName was set.
func (o OptIdentityProviderName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentityProviderName) Reset() {
	var v IdentityProviderName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentityProviderName) SetTo(v IdentityProviderName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentityProviderName) Get() (v IdentityProviderName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentityProviderName) Or(d IdentityProviderName) IdentityProviderName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImportAlias returns new OptImportAlias with value set to v.
func NewOptImportAlias(v ImportAlias) OptImportAlias {
	return OptImportAlias{
		Value: v,
		Set:   true,
	}
}

// OptImportAlias is optional ImportAlias.
type OptImportAlias struct {
	Value ImportAlias
	Set   bool
}

// IsSet returns true if OptImportAlias was set.
func (o OptImportAlias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImportAlias) Reset() {
	var v ImportAlias
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImportAlias) SetTo(v ImportAlias) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImportAlias) Get() (v ImportAlias, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImportAlias) Or(d ImportAlias) ImportAlias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogEntryID returns new OptLogEntryID with value set to v.
func NewOptLogEntryID(v LogEntryID) OptLogEntryID {
	return OptLogEntryID{
		Value: v,
		Set:   true,
	}
}

// OptLogEntryID is optional LogEntryID.
type OptLogEntryID struct {
	Value LogEntryID
	Set   bool
}

// IsSet returns true if OptLogEntryID was set.
func (o OptLogEntryID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogEntryID) Reset() {
	var v LogEntryID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogEntryID) SetTo(v LogEntryID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogEntryID) Get() (v LogEntryID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogEntryID) Or(d LogEntryID) LogEntryID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewReadContextConfigRuleTokenFormat returns new OptNewReadContextConfigRuleTokenFormat with value set to v.
func NewOptNewReadContextConfigRuleTokenFormat(v NewReadContextConfigRuleTokenFormat) OptNewReadContextConfigRuleTokenFormat {
	return OptNewReadContextConfigRuleTokenFormat{
		Value: v,
		Set:   true,
	}
}

// OptNewReadContextConfigRuleTokenFormat is optional NewReadContextConfigRuleTokenFormat.
type OptNewReadContextConfigRuleTokenFormat struct {
	Value NewReadContextConfigRuleTokenFormat
	Set   bool
}

// IsSet returns true if OptNewReadContextConfigRuleTokenFormat was set.
func (o OptNewReadContextConfigRuleTokenFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewReadContextConfigRuleTokenFormat) Reset() {
	var v NewReadContextConfigRuleTokenFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewReadContextConfigRuleTokenFormat) SetTo(v NewReadContextConfigRuleTokenFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewReadContextConfigRuleTokenFormat) Get() (v NewReadContextConfigRuleTokenFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewReadContextConfigRuleTokenFormat) Or(d NewReadContextConfigRuleTokenFormat) NewReadContextConfigRuleTokenFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewReadContextConfigRuleTokenScope returns new OptNewReadContextConfigRuleTokenScope with value set to v.
func NewOptNewReadContextConfigRuleTokenScope(v NewReadContextConfigRuleTokenScope) OptNewReadContextConfigRuleTokenScope {
	return OptNewReadContextConfigRuleTokenScope{
		Value: v,
		Set:   true,
	}
}

// OptNewReadContextConfigRuleTokenScope is optional NewReadContextConfigRuleTokenScope.
type OptNewReadContextConfigRuleTokenScope struct {
	Value NewReadContextConfigRuleTokenScope
	Set   bool
}

// IsSet returns true if OptNewReadContextConfigRuleTokenScope was set.
func (o OptNewReadContextConfigRuleTokenScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewReadContextConfigRuleTokenScope) Reset() {
	var v NewReadContextConfigRuleTokenScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewReadContextConfigRuleTokenScope) SetTo(v NewReadContextConfigRuleTokenScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewReadContextConfigRuleTokenScope) Get() (v NewReadContextConfigRuleTokenScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewReadContextConfigRuleTokenScope) Or(d NewReadContextConfigRuleTokenScope) NewReadContextConfigRuleTokenScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadContextConfigRuleTokenFormat returns new OptReadContextConfigRuleTokenFormat with value set to v.
func NewOptReadContextConfigRuleTokenFormat(v ReadContextConfigRuleTokenFormat) OptReadContextConfigRuleTokenFormat {
	return OptReadContextConfigRuleTokenFormat{
		Value: v,
		Set:   true,
	}
}

// OptReadContextConfigRuleTokenFormat is optional ReadContextConfigRuleTokenFormat.
type OptReadContextConfigRuleTokenFormat struct {
	Value ReadContextConfigRuleTokenFormat
	Set   bool
}

// IsSet returns true if OptReadContextConfigRuleTokenFormat was set.
func (o OptReadContextConfigRuleTokenFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadContextConfigRuleTokenFormat) Reset() {
	var v ReadContextConfigRuleTokenFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadContextConfigRuleTokenFormat) SetTo(v ReadContextConfigRuleTokenFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadContextConfigRuleTokenFormat) Get() (v ReadContextConfigRuleTokenFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadContextConfigRuleTokenFormat) Or(d ReadContextConfigRuleTokenFormat) ReadContextConfigRuleTokenFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadContextConfigRuleTokenScope returns new OptReadContextConfigRuleTokenScope with value set to v.
func NewOptReadContextConfigRuleTokenScope(v ReadContextConfigRuleTokenScope) OptReadContextConfigRuleTokenScope {
	return OptReadContextConfigRuleTokenScope{
		Value: v,
		Set:   true,
	}
}

// OptReadContextConfigRuleTokenScope is optional ReadContextConfigRuleTokenScope.
type OptReadContextConfigRuleTokenScope struct {
	Value ReadContextConfigRuleTokenScope
	Set   bool
}

// IsSet returns true if OptReadContextConfigRuleTokenScope was set.
func (o OptReadContextConfigRuleTokenScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadContextConfigRuleTokenScope) Reset() {
	var v ReadContextConfigRuleTokenScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadContextConfigRuleTokenScope) SetTo(v ReadContextConfigRuleTokenScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadContextConfigRuleTokenScope) Get() (v ReadContextConfigRuleTokenScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadContextConfigRuleTokenScope) Or(d ReadContextConfigRuleTokenScope) ReadContextConfigRuleTokenScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadContextRuleFactsItemArgumentsItemSource returns new OptReadContextRuleFactsItemArgumentsItemSource with value set to v.
func NewOptReadContextRuleFactsItemArgumentsItemSource(v ReadContextRuleFactsItemArgumentsItemSource) OptReadContextRuleFactsItemArgumentsItemSource {
	return OptReadContextRuleFactsItemArgumentsItemSource{
		Value: v,
		Set:   true,
	}
}

// OptReadContextRuleFactsItemArgumentsItemSource is optional ReadContextRuleFactsItemArgumentsItemSource.
type OptReadContextRuleFactsItemArgumentsItemSource struct {
	Value ReadContextRuleFactsItemArgumentsItemSource
	Set   bool
}

// IsSet returns true if OptReadContextRuleFactsItemArgumentsItemSource was set.
func (o OptReadContextRuleFactsItemArgumentsItemSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadContextRuleFactsItemArgumentsItemSource) Reset() {
	var v ReadContextRuleFactsItemArgumentsItemSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadContextRuleFactsItemArgumentsItemSource) SetTo(v ReadContextRuleFactsItemArgumentsItemSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadContextRuleFactsItemArgumentsItemSource) Get() (v ReadContextRuleFactsItemArgumentsItemSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadContextRuleFactsItemArgumentsItemSource) Or(d ReadContextRuleFactsItemArgumentsItemSource) ReadContextRuleFactsItemArgumentsItemSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReadContextRuleFactsItemOperator returns new OptReadContextRuleFactsItemOperator with value set to v.
func NewOptReadContextRuleFactsItemOperator(v ReadContextRuleFactsItemOperator) OptReadContextRuleFactsItemOperator {
	return OptReadContextRuleFactsItemOperator{
		Value: v,
		Set:   true,
	}
}

// OptReadContextRuleFactsItemOperator is optional ReadContextRuleFactsItemOperator.
type OptReadContextRuleFactsItemOperator struct {
	Value ReadContextRuleFactsItemOperator
	Set   bool
}

// IsSet returns true if OptReadContextRuleFactsItemOperator was set.
func (o OptReadContextRuleFactsItemOperator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReadContextRuleFactsItemOperator) Reset() {
	var v ReadContextRuleFactsItemOperator
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReadContextRuleFactsItemOperator) SetTo(v ReadContextRuleFactsItemOperator) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReadContextRuleFactsItemOperator) Get() (v ReadContextRuleFactsItemOperator, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReadContextRuleFactsItemOperator) Or(d ReadContextRuleFactsItemOperator) ReadContextRuleFactsItemOperator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRuleID returns new OptRuleID with value set to v.
func NewOptRuleID(v RuleID) OptRuleID {
	return OptRuleID{
		Value: v,
		Set:   true,
	}
}

// OptRuleID is optional RuleID.
type OptRuleID struct {
	Value RuleID
	Set   bool
}

// IsSet returns true if OptRuleID was set.
func (o OptRuleID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRuleID) Reset() {
	var v RuleID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRuleID) SetTo(v RuleID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRuleID) Get() (v RuleID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRuleID) Or(d RuleID) RuleID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTagName returns new OptTagName with value set to v.
func NewOptTagName(v TagName) OptTagName {
	return OptTagName{
		Value: v,
		Set:   true,
	}
}

// OptTagName is optional TagName.
type OptTagName struct {
	Value TagName
	Set   bool
}

// IsSet returns true if OptTagName was set.
func (o OptTagName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTagName) Reset() {
	var v TagName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTagName) SetTo(v TagName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTagName) Get() (v TagName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTagName) Or(d TagName) TagName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTagValueField returns new OptTagValueField with value set to v.
func NewOptTagValueField(v TagValueField) OptTagValueField {
	return OptTagValueField{
		Value: v,
		Set:   true,
	}
}

// OptTagValueField is optional TagValueField.
type OptTagValueField struct {
	Value TagValueField
	Set   bool
}

// IsSet returns true if OptTagValueField was set.
func (o OptTagValueField) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTagValueField) Reset() {
	var v TagValueField
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTagValueField) SetTo(v TagValueField) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTagValueField) Get() (v TagValueField, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTagValueField) Or(d TagValueField) TagValueField {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVersionConstraint returns new OptVersionConstraint with value set to v.
func NewOptVersionConstraint(v VersionConstraint) OptVersionConstraint {
	return OptVersionConstraint{
		Value: v,
		Set:   true,
	}
}

// OptVersionConstraint is optional VersionConstraint.
type OptVersionConstraint struct {
	Value VersionConstraint
	Set   bool
}

// IsSet returns true if OptVersionConstraint was set.
func (o OptVersionConstraint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVersionConstraint) Reset() {
	var v VersionConstraint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVersionConstraint) SetTo(v VersionConstraint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVersionConstraint) Get() (v VersionConstraint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVersionConstraint) Or(d VersionConstraint) VersionConstraint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWriteContextName returns new OptWriteContextName with value set to v.
func NewOptWriteContextName(v WriteContextName) OptWriteContextName {
	return OptWriteContextName{
		Value: v,
		Set:   true,
	}
}

// OptWriteContextName is optional WriteContextName.
type OptWriteContextName struct {
	Value WriteContextName
	Set   bool
}

// IsSet returns true if OptWriteContextName was set.
func (o OptWriteContextName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWriteContextName) Reset() {
	var v WriteContextName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWriteContextName) SetTo(v WriteContextName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWriteContextName) Get() (v WriteContextName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWriteContextName) Or(d WriteContextName) WriteContextName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWriteContextReference returns new OptWriteContextReference with value set to v.
func NewOptWriteContextReference(v WriteContextReference) OptWriteContextReference {
	return OptWriteContextReference{
		Value: v,
		Set:   true,
	}
}

// OptWriteContextReference is optional WriteContextReference.
type OptWriteContextReference struct {
	Value WriteContextReference
	Set   bool
}

// IsSet returns true if OptWriteContextReference was set.
func (o OptWriteContextReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWriteContextReference) Reset() {
	var v WriteContextReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWriteContextReference) SetTo(v WriteContextReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWriteContextReference) Get() (v WriteContextReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWriteContextReference) Or(d WriteContextReference) WriteContextReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PatchRequest []PatchRequestItem

// PatchRequestItem represents sum type.
type PatchRequestItem struct {
	Type                    PatchRequestItemType // switch on this field
	JSONPatchRequestAdd     JSONPatchRequestAdd
	JSONPatchRequestReplace JSONPatchRequestReplace
	JSONPatchRequestTst     JSONPatchRequestTst
	JSONPatchRequestRemove  JSONPatchRequestRemove
	JSONPatchRequestMove    JSONPatchRequestMove
	JSONPatchRequestCopy    JSONPatchRequestCopy
}

// PatchRequestItemType is oneOf type of PatchRequestItem.
type PatchRequestItemType string

// Possible values for PatchRequestItemType.
const (
	JSONPatchRequestAddPatchRequestItem     PatchRequestItemType = "add"
	JSONPatchRequestReplacePatchRequestItem PatchRequestItemType = "replace"
	JSONPatchRequestTstPatchRequestItem     PatchRequestItemType = "test"
	JSONPatchRequestRemovePatchRequestItem  PatchRequestItemType = "remove"
	JSONPatchRequestMovePatchRequestItem    PatchRequestItemType = "move"
	JSONPatchRequestCopyPatchRequestItem    PatchRequestItemType = "copy"
)

// IsJSONPatchRequestAdd reports whether PatchRequestItem is JSONPatchRequestAdd.
func (s PatchRequestItem) IsJSONPatchRequestAdd() bool {
	return s.Type == JSONPatchRequestAddPatchRequestItem
}

// IsJSONPatchRequestReplace reports whether PatchRequestItem is JSONPatchRequestReplace.
func (s PatchRequestItem) IsJSONPatchRequestReplace() bool {
	return s.Type == JSONPatchRequestReplacePatchRequestItem
}

// IsJSONPatchRequestTst reports whether PatchRequestItem is JSONPatchRequestTst.
func (s PatchRequestItem) IsJSONPatchRequestTst() bool {
	return s.Type == JSONPatchRequestTstPatchRequestItem
}

// IsJSONPatchRequestRemove reports whether PatchRequestItem is JSONPatchRequestRemove.
func (s PatchRequestItem) IsJSONPatchRequestRemove() bool {
	return s.Type == JSONPatchRequestRemovePatchRequestItem
}

// IsJSONPatchRequestMove reports whether PatchRequestItem is JSONPatchRequestMove.
func (s PatchRequestItem) IsJSONPatchRequestMove() bool {
	return s.Type == JSONPatchRequestMovePatchRequestItem
}

// IsJSONPatchRequestCopy reports whether PatchRequestItem is JSONPatchRequestCopy.
func (s PatchRequestItem) IsJSONPatchRequestCopy() bool {
	return s.Type == JSONPatchRequestCopyPatchRequestItem
}

// SetJSONPatchRequestAdd sets PatchRequestItem to JSONPatchRequestAdd.
func (s *PatchRequestItem) SetJSONPatchRequestAdd(v JSONPatchRequestAdd) {
	s.Type = JSONPatchRequestAddPatchRequestItem
	s.JSONPatchRequestAdd = v
}

// GetJSONPatchRequestAdd returns JSONPatchRequestAdd and true boolean if PatchRequestItem is JSONPatchRequestAdd.
func (s PatchRequestItem) GetJSONPatchRequestAdd() (v JSONPatchRequestAdd, ok bool) {
	if !s.IsJSONPatchRequestAdd() {
		return v, false
	}
	return s.JSONPatchRequestAdd, true
}

// NewJSONPatchRequestAddPatchRequestItem returns new PatchRequestItem from JSONPatchRequestAdd.
func NewJSONPatchRequestAddPatchRequestItem(v JSONPatchRequestAdd) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestAdd(v)
	return s
}

// SetJSONPatchRequestReplace sets PatchRequestItem to JSONPatchRequestReplace.
func (s *PatchRequestItem) SetJSONPatchRequestReplace(v JSONPatchRequestReplace) {
	s.Type = JSONPatchRequestReplacePatchRequestItem
	s.JSONPatchRequestReplace = v
}

// GetJSONPatchRequestReplace returns JSONPatchRequestReplace and true boolean if PatchRequestItem is JSONPatchRequestReplace.
func (s PatchRequestItem) GetJSONPatchRequestReplace() (v JSONPatchRequestReplace, ok bool) {
	if !s.IsJSONPatchRequestReplace() {
		return v, false
	}
	return s.JSONPatchRequestReplace, true
}

// NewJSONPatchRequestReplacePatchRequestItem returns new PatchRequestItem from JSONPatchRequestReplace.
func NewJSONPatchRequestReplacePatchRequestItem(v JSONPatchRequestReplace) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestReplace(v)
	return s
}

// SetJSONPatchRequestTst sets PatchRequestItem to JSONPatchRequestTst.
func (s *PatchRequestItem) SetJSONPatchRequestTst(v JSONPatchRequestTst) {
	s.Type = JSONPatchRequestTstPatchRequestItem
	s.JSONPatchRequestTst = v
}

// GetJSONPatchRequestTst returns JSONPatchRequestTst and true boolean if PatchRequestItem is JSONPatchRequestTst.
func (s PatchRequestItem) GetJSONPatchRequestTst() (v JSONPatchRequestTst, ok bool) {
	if !s.IsJSONPatchRequestTst() {
		return v, false
	}
	return s.JSONPatchRequestTst, true
}

// NewJSONPatchRequestTstPatchRequestItem returns new PatchRequestItem from JSONPatchRequestTst.
func NewJSONPatchRequestTstPatchRequestItem(v JSONPatchRequestTst) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestTst(v)
	return s
}

// SetJSONPatchRequestRemove sets PatchRequestItem to JSONPatchRequestRemove.
func (s *PatchRequestItem) SetJSONPatchRequestRemove(v JSONPatchRequestRemove) {
	s.Type = JSONPatchRequestRemovePatchRequestItem
	s.JSONPatchRequestRemove = v
}

// GetJSONPatchRequestRemove returns JSONPatchRequestRemove and true boolean if PatchRequestItem is JSONPatchRequestRemove.
func (s PatchRequestItem) GetJSONPatchRequestRemove() (v JSONPatchRequestRemove, ok bool) {
	if !s.IsJSONPatchRequestRemove() {
		return v, false
	}
	return s.JSONPatchRequestRemove, true
}

// NewJSONPatchRequestRemovePatchRequestItem returns new PatchRequestItem from JSONPatchRequestRemove.
func NewJSONPatchRequestRemovePatchRequestItem(v JSONPatchRequestRemove) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestRemove(v)
	return s
}

// SetJSONPatchRequestMove sets PatchRequestItem to JSONPatchRequestMove.
func (s *PatchRequestItem) SetJSONPatchRequestMove(v JSONPatchRequestMove) {
	s.Type = JSONPatchRequestMovePatchRequestItem
	s.JSONPatchRequestMove = v
}

// GetJSONPatchRequestMove returns JSONPatchRequestMove and true boolean if PatchRequestItem is JSONPatchRequestMove.
func (s PatchRequestItem) GetJSONPatchRequestMove() (v JSONPatchRequestMove, ok bool) {
	if !s.IsJSONPatchRequestMove() {
		return v, false
	}
	return s.JSONPatchRequestMove, true
}

// NewJSONPatchRequestMovePatchRequestItem returns new PatchRequestItem from JSONPatchRequestMove.
func NewJSONPatchRequestMovePatchRequestItem(v JSONPatchRequestMove) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestMove(v)
	return s
}

// SetJSONPatchRequestCopy sets PatchRequestItem to JSONPatchRequestCopy.
func (s *PatchRequestItem) SetJSONPatchRequestCopy(v JSONPatchRequestCopy) {
	s.Type = JSONPatchRequestCopyPatchRequestItem
	s.JSONPatchRequestCopy = v
}

// GetJSONPatchRequestCopy returns JSONPatchRequestCopy and true boolean if PatchRequestItem is JSONPatchRequestCopy.
func (s PatchRequestItem) GetJSONPatchRequestCopy() (v JSONPatchRequestCopy, ok bool) {
	if !s.IsJSONPatchRequestCopy() {
		return v, false
	}
	return s.JSONPatchRequestCopy, true
}

// NewJSONPatchRequestCopyPatchRequestItem returns new PatchRequestItem from JSONPatchRequestCopy.
func NewJSONPatchRequestCopyPatchRequestItem(v JSONPatchRequestCopy) PatchRequestItem {
	var s PatchRequestItem
	s.SetJSONPatchRequestCopy(v)
	return s
}

// Ref: #/components/responses/PermanentRedirect
type PermanentRedirect struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *PermanentRedirect) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *PermanentRedirect) SetLocation(val string) {
	s.Location = val
}

func (*PermanentRedirect) capsuleGetByIdRes()                              {}
func (*PermanentRedirect) domainAddAccessLogEntryRes()                     {}
func (*PermanentRedirect) domainAddExternalRootEncryptionKeyRes()          {}
func (*PermanentRedirect) domainAddNewRes()                                {}
func (*PermanentRedirect) domainAddReadContextRuleRes()                    {}
func (*PermanentRedirect) domainAuthenticateRes()                          {}
func (*PermanentRedirect) domainContactIssueVerifyRes()                    {}
func (*PermanentRedirect) domainContactVerifyRes()                         {}
func (*PermanentRedirect) domainCreateCapsuleRes()                         {}
func (*PermanentRedirect) domainCreatePeerDomainRes()                      {}
func (*PermanentRedirect) domainCreatePolicyRuleRes()                      {}
func (*PermanentRedirect) domainDataTaggingHookInvokeRes()                 {}
func (*PermanentRedirect) domainDeleteCapabilityRes()                      {}
func (*PermanentRedirect) domainDeleteCapsuleTagsRes()                     {}
func (*PermanentRedirect) domainDeleteExternalRootEncryptionKeyRes()       {}
func (*PermanentRedirect) domainDeleteFactByIDRes()                        {}
func (*PermanentRedirect) domainDeleteFactTypeRes()                        {}
func (*PermanentRedirect) domainDeleteIdentityProviderPrincipalRes()       {}
func (*PermanentRedirect) domainDeleteIdentityProviderRes()                {}
func (*PermanentRedirect) domainDeletePeerRes()                            {}
func (*PermanentRedirect) domainDeletePolicyRuleRes()                      {}
func (*PermanentRedirect) domainDeleteReadContextRes()                     {}
func (*PermanentRedirect) domainDeleteReadContextRuleRes()                 {}
func (*PermanentRedirect) domainDeleteWriteContextRegexRuleRes()           {}
func (*PermanentRedirect) domainDeleteWriteContextRes()                    {}
func (*PermanentRedirect) domainDescribeWriteContextRes()                  {}
func (*PermanentRedirect) domainExternalRootEncryptionKeyTestRes()         {}
func (*PermanentRedirect) domainFlushEncryptionKeysRes()                   {}
func (*PermanentRedirect) domainGetActiveExternalRootEncryptionKeyRes()    {}
func (*PermanentRedirect) domainGetCapabilitiesRes()                       {}
func (*PermanentRedirect) domainGetCapabilityRes()                         {}
func (*PermanentRedirect) domainGetCapsuleInfoRes()                        {}
func (*PermanentRedirect) domainGetExternalRootEncryptionKeyProvidersRes() {}
func (*PermanentRedirect) domainGetFactByIDRes()                           {}
func (*PermanentRedirect) domainGetFactTypeRes()                           {}
func (*PermanentRedirect) domainGetIdentityProviderPrincipalRes()          {}
func (*PermanentRedirect) domainGetIdentityProviderPrincipalsRes()         {}
func (*PermanentRedirect) domainGetIdentityProviderRes()                   {}
func (*PermanentRedirect) domainGetPeerConfigRes()                         {}
func (*PermanentRedirect) domainGetPeerRes()                               {}
func (*PermanentRedirect) domainGetPrivateInfoRes()                        {}
func (*PermanentRedirect) domainGetPublicInfoRes()                         {}
func (*PermanentRedirect) domainGetReadContextRes()                        {}
func (*PermanentRedirect) domainGetSettingsRes()                           {}
func (*PermanentRedirect) domainGetStatusRes()                             {}
func (*PermanentRedirect) domainGetTagInfoRes()                            {}
func (*PermanentRedirect) domainGetWriteContextRegexRulesRes()             {}
func (*PermanentRedirect) domainInsertIdentityProviderPrincipalRes()       {}
func (*PermanentRedirect) domainInsertWriteContextRegexRuleRes()           {}
func (*PermanentRedirect) domainListCapsulesRes()                          {}
func (*PermanentRedirect) domainListExternalRootEncryptionKeyRes()         {}
func (*PermanentRedirect) domainListFactTypesRes()                         {}
func (*PermanentRedirect) domainListFactsRes()                             {}
func (*PermanentRedirect) domainListHooksRes()                             {}
func (*PermanentRedirect) domainListIdentityProvidersRes()                 {}
func (*PermanentRedirect) domainListPeersRes()                             {}
func (*PermanentRedirect) domainListPolicyRulesRes()                       {}
func (*PermanentRedirect) domainListReadContextsRes()                      {}
func (*PermanentRedirect) domainListResourcesRes()                         {}
func (*PermanentRedirect) domainListWriteContextsRes()                     {}
func (*PermanentRedirect) domainOpenCapsuleRes()                           {}
func (*PermanentRedirect) domainPatchSettingsRes()                         {}
func (*PermanentRedirect) domainPolicyFlushRes()                           {}
func (*PermanentRedirect) domainPutCapabilityRes()                         {}
func (*PermanentRedirect) domainPutFactTypeRes()                           {}
func (*PermanentRedirect) domainQueryAccessLogRes()                        {}
func (*PermanentRedirect) domainQueryAccessLogSingleCapsuleRes()           {}
func (*PermanentRedirect) domainQueryControlLogRes()                       {}
func (*PermanentRedirect) domainReadContextFlushRes()                      {}
func (*PermanentRedirect) domainRenumberPolicyRulesRes()                   {}
func (*PermanentRedirect) domainRotateRootEncryptionKeysRes()              {}
func (*PermanentRedirect) domainSealCapsuleRes()                           {}
func (*PermanentRedirect) domainSetActiveExternalRootEncryptionKeyRes()    {}
func (*PermanentRedirect) domainUpdateIdentityProviderPrincipalRes()       {}
func (*PermanentRedirect) domainUpdatePeerRes()                            {}
func (*PermanentRedirect) domainUpdatePolicyRuleRes()                      {}
func (*PermanentRedirect) domainUpdateReadContextRuleRes()                 {}
func (*PermanentRedirect) domainUpsertCapsuleTagsRes()                     {}
func (*PermanentRedirect) domainUpsertFactRes()                            {}
func (*PermanentRedirect) domainUpsertIdentityProviderRes()                {}
func (*PermanentRedirect) domainUpsertReadContextRes()                     {}
func (*PermanentRedirect) domainUpsertSpanTagsRes()                        {}
func (*PermanentRedirect) domainUpsertWriteContextConfigurationRes()       {}
func (*PermanentRedirect) domainUpsertWriteContextRes()                    {}
func (*PermanentRedirect) starredDomainAddRes()                            {}
func (*PermanentRedirect) starredDomainListRes()                           {}
func (*PermanentRedirect) starredDomainRemoveRes()                         {}

// Ref: #/components/schemas/PolicyRuleOperation
type PolicyRuleOperation string

const (
	PolicyRuleOperationEdit PolicyRuleOperation = "edit"
	PolicyRuleOperationView PolicyRuleOperation = "view"
	PolicyRuleOperationUse  PolicyRuleOperation = "use"
)

// AllValues returns all PolicyRuleOperation values.
func (PolicyRuleOperation) AllValues() []PolicyRuleOperation {
	return []PolicyRuleOperation{
		PolicyRuleOperationEdit,
		PolicyRuleOperationView,
		PolicyRuleOperationUse,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PolicyRuleOperation) MarshalText() ([]byte, error) {
	switch s {
	case PolicyRuleOperationEdit:
		return []byte(s), nil
	case PolicyRuleOperationView:
		return []byte(s), nil
	case PolicyRuleOperationUse:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PolicyRuleOperation) UnmarshalText(data []byte) error {
	switch PolicyRuleOperation(data) {
	case PolicyRuleOperationEdit:
		*s = PolicyRuleOperationEdit
		return nil
	case PolicyRuleOperationView:
		*s = PolicyRuleOperationView
		return nil
	case PolicyRuleOperationUse:
		*s = PolicyRuleOperationUse
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PolicyRuleResult
type PolicyRuleResult string

const (
	PolicyRuleResultAllow PolicyRuleResult = "allow"
	PolicyRuleResultDeny  PolicyRuleResult = "deny"
)

// AllValues returns all PolicyRuleResult values.
func (PolicyRuleResult) AllValues() []PolicyRuleResult {
	return []PolicyRuleResult{
		PolicyRuleResultAllow,
		PolicyRuleResultDeny,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PolicyRuleResult) MarshalText() ([]byte, error) {
	switch s {
	case PolicyRuleResultAllow:
		return []byte(s), nil
	case PolicyRuleResultDeny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PolicyRuleResult) UnmarshalText(data []byte) error {
	switch PolicyRuleResult(data) {
	case PolicyRuleResultAllow:
		*s = PolicyRuleResultAllow
		return nil
	case PolicyRuleResultDeny:
		*s = PolicyRuleResultDeny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PrincipalID string

// Detailed information about a principal.
// Ref: #/components/schemas/PrincipalInfo
type PrincipalInfo struct {
	PrincipalID  PrincipalID                    `json:"principalID"`
	Capabilities []Capability                   `json:"capabilities"`
	Details      DomainIdentityPrincipalDetails `json:"details"`
}

// GetPrincipalID returns the value of PrincipalID.
func (s *PrincipalInfo) GetPrincipalID() PrincipalID {
	return s.PrincipalID
}

// GetCapabilities returns the value of Capabilities.
func (s *PrincipalInfo) GetCapabilities() []Capability {
	return s.Capabilities
}

// GetDetails returns the value of Details.
func (s *PrincipalInfo) GetDetails() DomainIdentityPrincipalDetails {
	return s.Details
}

// SetPrincipalID sets the value of PrincipalID.
func (s *PrincipalInfo) SetPrincipalID(val PrincipalID) {
	s.PrincipalID = val
}

// SetCapabilities sets the value of Capabilities.
func (s *PrincipalInfo) SetCapabilities(val []Capability) {
	s.Capabilities = val
}

// SetDetails sets the value of Details.
func (s *PrincipalInfo) SetDetails(val DomainIdentityPrincipalDetails) {
	s.Details = val
}

func (*PrincipalInfo) domainGetIdentityProviderPrincipalRes() {}

// Ref: #/components/schemas/PrincipalSummary
type PrincipalSummary struct {
	PrincipalID   PrincipalID                         `json:"principalID"`
	PrincipalType DomainIdentityProviderPrincipalType `json:"principalType"`
	// An optional comment for the principal.
	Comment string `json:"comment"`
}

// GetPrincipalID returns the value of PrincipalID.
func (s *PrincipalSummary) GetPrincipalID() PrincipalID {
	return s.PrincipalID
}

// GetPrincipalType returns the value of PrincipalType.
func (s *PrincipalSummary) GetPrincipalType() DomainIdentityProviderPrincipalType {
	return s.PrincipalType
}

// GetComment returns the value of Comment.
func (s *PrincipalSummary) GetComment() string {
	return s.Comment
}

// SetPrincipalID sets the value of PrincipalID.
func (s *PrincipalSummary) SetPrincipalID(val PrincipalID) {
	s.PrincipalID = val
}

// SetPrincipalType sets the value of PrincipalType.
func (s *PrincipalSummary) SetPrincipalType(val DomainIdentityProviderPrincipalType) {
	s.PrincipalType = val
}

// SetComment sets the value of Comment.
func (s *PrincipalSummary) SetComment(val string) {
	s.Comment = val
}

// Information about what must be done to data when it is read from a capsule.
// Ref: #/components/schemas/ReadContextConfigRule
type ReadContextConfigRule struct {
	ID               RuleID                          `json:"id"`
	MatchExpressions ReadContextRuleMatchExpressions `json:"matchExpressions"`
	Action           ReadContextConfigRuleAction     `json:"action"`
	// If the action is Tokenize, what scope to use for the token.
	TokenScope OptReadContextConfigRuleTokenScope `json:"tokenScope"`
	// If the action is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx
	// and synthetic returns something that looks like the original data type (e.g. John Smith for a
	// name) but is in fact a token.
	TokenFormat OptReadContextConfigRuleTokenFormat `json:"tokenFormat"`
	Facts       ReadContextRuleFacts                `json:"facts"`
	// This rule's priority. Lower priority numbers rules are evaluated first.
	Priority int `json:"priority"`
	// This rule has been merged into a read context from another domain. Note that rules inside a read
	// context that is entirely imported will not bear the imported flag. Only rules that  have been
	// mapped into a domain's own read context will bear the imported flag.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
}

// GetID returns the value of ID.
func (s *ReadContextConfigRule) GetID() RuleID {
	return s.ID
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *ReadContextConfigRule) GetMatchExpressions() ReadContextRuleMatchExpressions {
	return s.MatchExpressions
}

// GetAction returns the value of Action.
func (s *ReadContextConfigRule) GetAction() ReadContextConfigRuleAction {
	return s.Action
}

// GetTokenScope returns the value of TokenScope.
func (s *ReadContextConfigRule) GetTokenScope() OptReadContextConfigRuleTokenScope {
	return s.TokenScope
}

// GetTokenFormat returns the value of TokenFormat.
func (s *ReadContextConfigRule) GetTokenFormat() OptReadContextConfigRuleTokenFormat {
	return s.TokenFormat
}

// GetFacts returns the value of Facts.
func (s *ReadContextConfigRule) GetFacts() ReadContextRuleFacts {
	return s.Facts
}

// GetPriority returns the value of Priority.
func (s *ReadContextConfigRule) GetPriority() int {
	return s.Priority
}

// GetImported returns the value of Imported.
func (s *ReadContextConfigRule) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *ReadContextConfigRule) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *ReadContextConfigRule) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// SetID sets the value of ID.
func (s *ReadContextConfigRule) SetID(val RuleID) {
	s.ID = val
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *ReadContextConfigRule) SetMatchExpressions(val ReadContextRuleMatchExpressions) {
	s.MatchExpressions = val
}

// SetAction sets the value of Action.
func (s *ReadContextConfigRule) SetAction(val ReadContextConfigRuleAction) {
	s.Action = val
}

// SetTokenScope sets the value of TokenScope.
func (s *ReadContextConfigRule) SetTokenScope(val OptReadContextConfigRuleTokenScope) {
	s.TokenScope = val
}

// SetTokenFormat sets the value of TokenFormat.
func (s *ReadContextConfigRule) SetTokenFormat(val OptReadContextConfigRuleTokenFormat) {
	s.TokenFormat = val
}

// SetFacts sets the value of Facts.
func (s *ReadContextConfigRule) SetFacts(val ReadContextRuleFacts) {
	s.Facts = val
}

// SetPriority sets the value of Priority.
func (s *ReadContextConfigRule) SetPriority(val int) {
	s.Priority = val
}

// SetImported sets the value of Imported.
func (s *ReadContextConfigRule) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *ReadContextConfigRule) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *ReadContextConfigRule) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

type ReadContextConfigRuleAction string

const (
	ReadContextConfigRuleActionDenyCapsule ReadContextConfigRuleAction = "DenyCapsule"
	ReadContextConfigRuleActionDenyRecord  ReadContextConfigRuleAction = "DenyRecord"
	ReadContextConfigRuleActionRedact      ReadContextConfigRuleAction = "Redact"
	ReadContextConfigRuleActionTokenize    ReadContextConfigRuleAction = "Tokenize"
	ReadContextConfigRuleActionAllow       ReadContextConfigRuleAction = "Allow"
)

// AllValues returns all ReadContextConfigRuleAction values.
func (ReadContextConfigRuleAction) AllValues() []ReadContextConfigRuleAction {
	return []ReadContextConfigRuleAction{
		ReadContextConfigRuleActionDenyCapsule,
		ReadContextConfigRuleActionDenyRecord,
		ReadContextConfigRuleActionRedact,
		ReadContextConfigRuleActionTokenize,
		ReadContextConfigRuleActionAllow,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextConfigRuleAction) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextConfigRuleActionDenyCapsule:
		return []byte(s), nil
	case ReadContextConfigRuleActionDenyRecord:
		return []byte(s), nil
	case ReadContextConfigRuleActionRedact:
		return []byte(s), nil
	case ReadContextConfigRuleActionTokenize:
		return []byte(s), nil
	case ReadContextConfigRuleActionAllow:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextConfigRuleAction) UnmarshalText(data []byte) error {
	switch ReadContextConfigRuleAction(data) {
	case ReadContextConfigRuleActionDenyCapsule:
		*s = ReadContextConfigRuleActionDenyCapsule
		return nil
	case ReadContextConfigRuleActionDenyRecord:
		*s = ReadContextConfigRuleActionDenyRecord
		return nil
	case ReadContextConfigRuleActionRedact:
		*s = ReadContextConfigRuleActionRedact
		return nil
	case ReadContextConfigRuleActionTokenize:
		*s = ReadContextConfigRuleActionTokenize
		return nil
	case ReadContextConfigRuleActionAllow:
		*s = ReadContextConfigRuleActionAllow
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// If the action is Tokenize, what format should the token take. Explicit is of the form tk-xxxxxx
// and synthetic returns something that looks like the original data type (e.g. John Smith for a
// name) but is in fact a token.
type ReadContextConfigRuleTokenFormat string

const (
	ReadContextConfigRuleTokenFormatExplicit  ReadContextConfigRuleTokenFormat = "explicit"
	ReadContextConfigRuleTokenFormatSynthetic ReadContextConfigRuleTokenFormat = "synthetic"
)

// AllValues returns all ReadContextConfigRuleTokenFormat values.
func (ReadContextConfigRuleTokenFormat) AllValues() []ReadContextConfigRuleTokenFormat {
	return []ReadContextConfigRuleTokenFormat{
		ReadContextConfigRuleTokenFormatExplicit,
		ReadContextConfigRuleTokenFormatSynthetic,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextConfigRuleTokenFormat) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextConfigRuleTokenFormatExplicit:
		return []byte(s), nil
	case ReadContextConfigRuleTokenFormatSynthetic:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextConfigRuleTokenFormat) UnmarshalText(data []byte) error {
	switch ReadContextConfigRuleTokenFormat(data) {
	case ReadContextConfigRuleTokenFormatExplicit:
		*s = ReadContextConfigRuleTokenFormatExplicit
		return nil
	case ReadContextConfigRuleTokenFormatSynthetic:
		*s = ReadContextConfigRuleTokenFormatSynthetic
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// If the action is Tokenize, what scope to use for the token.
type ReadContextConfigRuleTokenScope string

const (
	ReadContextConfigRuleTokenScopeUnique  ReadContextConfigRuleTokenScope = "unique"
	ReadContextConfigRuleTokenScopeCapsule ReadContextConfigRuleTokenScope = "capsule"
	ReadContextConfigRuleTokenScopeDomain  ReadContextConfigRuleTokenScope = "domain"
)

// AllValues returns all ReadContextConfigRuleTokenScope values.
func (ReadContextConfigRuleTokenScope) AllValues() []ReadContextConfigRuleTokenScope {
	return []ReadContextConfigRuleTokenScope{
		ReadContextConfigRuleTokenScopeUnique,
		ReadContextConfigRuleTokenScopeCapsule,
		ReadContextConfigRuleTokenScopeDomain,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextConfigRuleTokenScope) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextConfigRuleTokenScopeUnique:
		return []byte(s), nil
	case ReadContextConfigRuleTokenScopeCapsule:
		return []byte(s), nil
	case ReadContextConfigRuleTokenScopeDomain:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextConfigRuleTokenScope) UnmarshalText(data []byte) error {
	switch ReadContextConfigRuleTokenScope(data) {
	case ReadContextConfigRuleTokenScopeUnique:
		*s = ReadContextConfigRuleTokenScopeUnique
		return nil
	case ReadContextConfigRuleTokenScopeCapsule:
		*s = ReadContextConfigRuleTokenScopeCapsule
		return nil
	case ReadContextConfigRuleTokenScopeDomain:
		*s = ReadContextConfigRuleTokenScopeDomain
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details about a read context.
// Ref: #/components/schemas/ReadContextDetails
type ReadContextDetails struct {
	Name ReadContextReference `json:"name"`
	// A short, single sentence description of this read context.
	Summary string `json:"summary"`
	// A longer form description of this read context.
	Description string `json:"description"`
	// If true, skip creation of audit log events on read.
	DisableReadLogging OptBool `json:"disableReadLogging"`
	// Number of seconds for which cached encryption keys will be
	// considered valid by the client.
	KeyCacheTTL    OptInt32                  `json:"keyCacheTTL"`
	RequiredHooks  []ReadContextRequiredHook `json:"requiredHooks"`
	ReadParameters []ReadContextParameter    `json:"readParameters"`
	Rules          []ReadContextConfigRule   `json:"rules"`
	// True if this read context is imported.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
	// A WASM bundle version of the policy associated with this
	// read context.
	PolicyAssembly []byte `json:"policyAssembly"`
}

// GetName returns the value of Name.
func (s *ReadContextDetails) GetName() ReadContextReference {
	return s.Name
}

// GetSummary returns the value of Summary.
func (s *ReadContextDetails) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *ReadContextDetails) GetDescription() string {
	return s.Description
}

// GetDisableReadLogging returns the value of DisableReadLogging.
func (s *ReadContextDetails) GetDisableReadLogging() OptBool {
	return s.DisableReadLogging
}

// GetKeyCacheTTL returns the value of KeyCacheTTL.
func (s *ReadContextDetails) GetKeyCacheTTL() OptInt32 {
	return s.KeyCacheTTL
}

// GetRequiredHooks returns the value of RequiredHooks.
func (s *ReadContextDetails) GetRequiredHooks() []ReadContextRequiredHook {
	return s.RequiredHooks
}

// GetReadParameters returns the value of ReadParameters.
func (s *ReadContextDetails) GetReadParameters() []ReadContextParameter {
	return s.ReadParameters
}

// GetRules returns the value of Rules.
func (s *ReadContextDetails) GetRules() []ReadContextConfigRule {
	return s.Rules
}

// GetImported returns the value of Imported.
func (s *ReadContextDetails) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *ReadContextDetails) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *ReadContextDetails) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// GetPolicyAssembly returns the value of PolicyAssembly.
func (s *ReadContextDetails) GetPolicyAssembly() []byte {
	return s.PolicyAssembly
}

// SetName sets the value of Name.
func (s *ReadContextDetails) SetName(val ReadContextReference) {
	s.Name = val
}

// SetSummary sets the value of Summary.
func (s *ReadContextDetails) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *ReadContextDetails) SetDescription(val string) {
	s.Description = val
}

// SetDisableReadLogging sets the value of DisableReadLogging.
func (s *ReadContextDetails) SetDisableReadLogging(val OptBool) {
	s.DisableReadLogging = val
}

// SetKeyCacheTTL sets the value of KeyCacheTTL.
func (s *ReadContextDetails) SetKeyCacheTTL(val OptInt32) {
	s.KeyCacheTTL = val
}

// SetRequiredHooks sets the value of RequiredHooks.
func (s *ReadContextDetails) SetRequiredHooks(val []ReadContextRequiredHook) {
	s.RequiredHooks = val
}

// SetReadParameters sets the value of ReadParameters.
func (s *ReadContextDetails) SetReadParameters(val []ReadContextParameter) {
	s.ReadParameters = val
}

// SetRules sets the value of Rules.
func (s *ReadContextDetails) SetRules(val []ReadContextConfigRule) {
	s.Rules = val
}

// SetImported sets the value of Imported.
func (s *ReadContextDetails) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *ReadContextDetails) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *ReadContextDetails) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

// SetPolicyAssembly sets the value of PolicyAssembly.
func (s *ReadContextDetails) SetPolicyAssembly(val []byte) {
	s.PolicyAssembly = val
}

func (*ReadContextDetails) domainGetReadContextRes() {}

// A list of read contexts.
// Ref: #/components/schemas/ReadContextList
type ReadContextList struct {
	ReadContexts []ReadContextShortDetails `json:"readContexts"`
}

// GetReadContexts returns the value of ReadContexts.
func (s *ReadContextList) GetReadContexts() []ReadContextShortDetails {
	return s.ReadContexts
}

// SetReadContexts sets the value of ReadContexts.
func (s *ReadContextList) SetReadContexts(val []ReadContextShortDetails) {
	s.ReadContexts = val
}

func (*ReadContextList) domainListReadContextsRes() {}

type ReadContextName string

// Declare parameters that can be passed in for use in read context configuration rules. It is
// expected that these are used for distinguishing who a read is being done on behalf of, and
// important attributes about that user (team, project, org etc).
// Ref: #/components/schemas/ReadContextParameter
type ReadContextParameter struct {
	Key         OptString `json:"key"`
	Required    OptBool   `json:"required"`
	Description OptString `json:"description"`
}

// GetKey returns the value of Key.
func (s *ReadContextParameter) GetKey() OptString {
	return s.Key
}

// GetRequired returns the value of Required.
func (s *ReadContextParameter) GetRequired() OptBool {
	return s.Required
}

// GetDescription returns the value of Description.
func (s *ReadContextParameter) GetDescription() OptString {
	return s.Description
}

// SetKey sets the value of Key.
func (s *ReadContextParameter) SetKey(val OptString) {
	s.Key = val
}

// SetRequired sets the value of Required.
func (s *ReadContextParameter) SetRequired(val OptBool) {
	s.Required = val
}

// SetDescription sets the value of Description.
func (s *ReadContextParameter) SetDescription(val OptString) {
	s.Description = val
}

type ReadContextReference string

// Ref: #/components/schemas/ReadContextRequiredHook
type ReadContextRequiredHook struct {
	Hook         OptHookName          `json:"hook"`
	Constraint   OptVersionConstraint `json:"constraint"`
	WriteContext OptWriteContextName  `json:"writeContext"`
}

// GetHook returns the value of Hook.
func (s *ReadContextRequiredHook) GetHook() OptHookName {
	return s.Hook
}

// GetConstraint returns the value of Constraint.
func (s *ReadContextRequiredHook) GetConstraint() OptVersionConstraint {
	return s.Constraint
}

// GetWriteContext returns the value of WriteContext.
func (s *ReadContextRequiredHook) GetWriteContext() OptWriteContextName {
	return s.WriteContext
}

// SetHook sets the value of Hook.
func (s *ReadContextRequiredHook) SetHook(val OptHookName) {
	s.Hook = val
}

// SetConstraint sets the value of Constraint.
func (s *ReadContextRequiredHook) SetConstraint(val OptVersionConstraint) {
	s.Constraint = val
}

// SetWriteContext sets the value of WriteContext.
func (s *ReadContextRequiredHook) SetWriteContext(val OptWriteContextName) {
	s.WriteContext = val
}

type ReadContextRuleFacts []ReadContextRuleFactsItem

type ReadContextRuleFactsItem struct {
	// Whether this assertion matches when the fact exists or does not exist.
	Operator OptReadContextRuleFactsItemOperator `json:"operator"`
	// The name of the fact.
	Name      OptString                               `json:"name"`
	Arguments []ReadContextRuleFactsItemArgumentsItem `json:"arguments"`
}

// GetOperator returns the value of Operator.
func (s *ReadContextRuleFactsItem) GetOperator() OptReadContextRuleFactsItemOperator {
	return s.Operator
}

// GetName returns the value of Name.
func (s *ReadContextRuleFactsItem) GetName() OptString {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *ReadContextRuleFactsItem) GetArguments() []ReadContextRuleFactsItemArgumentsItem {
	return s.Arguments
}

// SetOperator sets the value of Operator.
func (s *ReadContextRuleFactsItem) SetOperator(val OptReadContextRuleFactsItemOperator) {
	s.Operator = val
}

// SetName sets the value of Name.
func (s *ReadContextRuleFactsItem) SetName(val OptString) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *ReadContextRuleFactsItem) SetArguments(val []ReadContextRuleFactsItemArgumentsItem) {
	s.Arguments = val
}

type ReadContextRuleFactsItemArgumentsItem struct {
	Source OptReadContextRuleFactsItemArgumentsItemSource `json:"source"`
	// For source in [domainIdentity, readParameters, tags] what key to use.
	Key OptString `json:"key"`
	// If source is literal, what is the value.
	Value OptString `json:"value"`
}

// GetSource returns the value of Source.
func (s *ReadContextRuleFactsItemArgumentsItem) GetSource() OptReadContextRuleFactsItemArgumentsItemSource {
	return s.Source
}

// GetKey returns the value of Key.
func (s *ReadContextRuleFactsItemArgumentsItem) GetKey() OptString {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ReadContextRuleFactsItemArgumentsItem) GetValue() OptString {
	return s.Value
}

// SetSource sets the value of Source.
func (s *ReadContextRuleFactsItemArgumentsItem) SetSource(val OptReadContextRuleFactsItemArgumentsItemSource) {
	s.Source = val
}

// SetKey sets the value of Key.
func (s *ReadContextRuleFactsItemArgumentsItem) SetKey(val OptString) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ReadContextRuleFactsItemArgumentsItem) SetValue(val OptString) {
	s.Value = val
}

type ReadContextRuleFactsItemArgumentsItemSource string

const (
	ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity ReadContextRuleFactsItemArgumentsItemSource = "domainIdentity"
	ReadContextRuleFactsItemArgumentsItemSourceReadParameters ReadContextRuleFactsItemArgumentsItemSource = "readParameters"
	ReadContextRuleFactsItemArgumentsItemSourceTags           ReadContextRuleFactsItemArgumentsItemSource = "tags"
	ReadContextRuleFactsItemArgumentsItemSourceLiteral        ReadContextRuleFactsItemArgumentsItemSource = "literal"
)

// AllValues returns all ReadContextRuleFactsItemArgumentsItemSource values.
func (ReadContextRuleFactsItemArgumentsItemSource) AllValues() []ReadContextRuleFactsItemArgumentsItemSource {
	return []ReadContextRuleFactsItemArgumentsItemSource{
		ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity,
		ReadContextRuleFactsItemArgumentsItemSourceReadParameters,
		ReadContextRuleFactsItemArgumentsItemSourceTags,
		ReadContextRuleFactsItemArgumentsItemSourceLiteral,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextRuleFactsItemArgumentsItemSource) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity:
		return []byte(s), nil
	case ReadContextRuleFactsItemArgumentsItemSourceReadParameters:
		return []byte(s), nil
	case ReadContextRuleFactsItemArgumentsItemSourceTags:
		return []byte(s), nil
	case ReadContextRuleFactsItemArgumentsItemSourceLiteral:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextRuleFactsItemArgumentsItemSource) UnmarshalText(data []byte) error {
	switch ReadContextRuleFactsItemArgumentsItemSource(data) {
	case ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity:
		*s = ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity
		return nil
	case ReadContextRuleFactsItemArgumentsItemSourceReadParameters:
		*s = ReadContextRuleFactsItemArgumentsItemSourceReadParameters
		return nil
	case ReadContextRuleFactsItemArgumentsItemSourceTags:
		*s = ReadContextRuleFactsItemArgumentsItemSourceTags
		return nil
	case ReadContextRuleFactsItemArgumentsItemSourceLiteral:
		*s = ReadContextRuleFactsItemArgumentsItemSourceLiteral
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Whether this assertion matches when the fact exists or does not exist.
type ReadContextRuleFactsItemOperator string

const (
	ReadContextRuleFactsItemOperatorExists    ReadContextRuleFactsItemOperator = "Exists"
	ReadContextRuleFactsItemOperatorNotExists ReadContextRuleFactsItemOperator = "NotExists"
)

// AllValues returns all ReadContextRuleFactsItemOperator values.
func (ReadContextRuleFactsItemOperator) AllValues() []ReadContextRuleFactsItemOperator {
	return []ReadContextRuleFactsItemOperator{
		ReadContextRuleFactsItemOperatorExists,
		ReadContextRuleFactsItemOperatorNotExists,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextRuleFactsItemOperator) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextRuleFactsItemOperatorExists:
		return []byte(s), nil
	case ReadContextRuleFactsItemOperatorNotExists:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextRuleFactsItemOperator) UnmarshalText(data []byte) error {
	switch ReadContextRuleFactsItemOperator(data) {
	case ReadContextRuleFactsItemOperatorExists:
		*s = ReadContextRuleFactsItemOperatorExists
		return nil
	case ReadContextRuleFactsItemOperatorNotExists:
		*s = ReadContextRuleFactsItemOperatorNotExists
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReadContextRuleMatchExpressions []ReadContextRuleMatchExpressionsItem

type ReadContextRuleMatchExpressionsItem struct {
	Source ReadContextRuleMatchExpressionsItemSource `json:"source"`
	Key    string                                    `json:"key"`
	// What to do with the value identified by `key`. In and NotIn compare with `values`,
	// DateDeltaLessThan and DateDeltaGreaterThan treat the value as an RFC3339 date, and measure if the
	// `now()-date` is less than or greater than the time span expressed in `value`.
	Operator ReadContextRuleMatchExpressionsItemOperator `json:"operator"`
	// To be used with In and NotIn operators.
	Values []string `json:"values"`
	// To be used with DateDelta operators. A time span in `23d4h5m32s` notation. It does not support
	// interval shorthands greater than a day, so to express 3 months, for example, use `90d`. Positive
	// time spans indicate the date appeared in the past. Negative time spans indicate the date appears
	// in the future.
	Value OptString `json:"value"`
}

// GetSource returns the value of Source.
func (s *ReadContextRuleMatchExpressionsItem) GetSource() ReadContextRuleMatchExpressionsItemSource {
	return s.Source
}

// GetKey returns the value of Key.
func (s *ReadContextRuleMatchExpressionsItem) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *ReadContextRuleMatchExpressionsItem) GetOperator() ReadContextRuleMatchExpressionsItemOperator {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *ReadContextRuleMatchExpressionsItem) GetValues() []string {
	return s.Values
}

// GetValue returns the value of Value.
func (s *ReadContextRuleMatchExpressionsItem) GetValue() OptString {
	return s.Value
}

// SetSource sets the value of Source.
func (s *ReadContextRuleMatchExpressionsItem) SetSource(val ReadContextRuleMatchExpressionsItemSource) {
	s.Source = val
}

// SetKey sets the value of Key.
func (s *ReadContextRuleMatchExpressionsItem) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *ReadContextRuleMatchExpressionsItem) SetOperator(val ReadContextRuleMatchExpressionsItemOperator) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *ReadContextRuleMatchExpressionsItem) SetValues(val []string) {
	s.Values = val
}

// SetValue sets the value of Value.
func (s *ReadContextRuleMatchExpressionsItem) SetValue(val OptString) {
	s.Value = val
}

// What to do with the value identified by `key`. In and NotIn compare with `values`,
// DateDeltaLessThan and DateDeltaGreaterThan treat the value as an RFC3339 date, and measure if the
// `now()-date` is less than or greater than the time span expressed in `value`.
type ReadContextRuleMatchExpressionsItemOperator string

const (
	ReadContextRuleMatchExpressionsItemOperatorIn                   ReadContextRuleMatchExpressionsItemOperator = "In"
	ReadContextRuleMatchExpressionsItemOperatorNotIn                ReadContextRuleMatchExpressionsItemOperator = "NotIn"
	ReadContextRuleMatchExpressionsItemOperatorExists               ReadContextRuleMatchExpressionsItemOperator = "Exists"
	ReadContextRuleMatchExpressionsItemOperatorNotExists            ReadContextRuleMatchExpressionsItemOperator = "NotExists"
	ReadContextRuleMatchExpressionsItemOperatorDateDeltaLessThan    ReadContextRuleMatchExpressionsItemOperator = "DateDeltaLessThan"
	ReadContextRuleMatchExpressionsItemOperatorDateDeltaGreaterThan ReadContextRuleMatchExpressionsItemOperator = "DateDeltaGreaterThan"
)

// AllValues returns all ReadContextRuleMatchExpressionsItemOperator values.
func (ReadContextRuleMatchExpressionsItemOperator) AllValues() []ReadContextRuleMatchExpressionsItemOperator {
	return []ReadContextRuleMatchExpressionsItemOperator{
		ReadContextRuleMatchExpressionsItemOperatorIn,
		ReadContextRuleMatchExpressionsItemOperatorNotIn,
		ReadContextRuleMatchExpressionsItemOperatorExists,
		ReadContextRuleMatchExpressionsItemOperatorNotExists,
		ReadContextRuleMatchExpressionsItemOperatorDateDeltaLessThan,
		ReadContextRuleMatchExpressionsItemOperatorDateDeltaGreaterThan,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextRuleMatchExpressionsItemOperator) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextRuleMatchExpressionsItemOperatorIn:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemOperatorNotIn:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemOperatorExists:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemOperatorNotExists:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemOperatorDateDeltaLessThan:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemOperatorDateDeltaGreaterThan:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextRuleMatchExpressionsItemOperator) UnmarshalText(data []byte) error {
	switch ReadContextRuleMatchExpressionsItemOperator(data) {
	case ReadContextRuleMatchExpressionsItemOperatorIn:
		*s = ReadContextRuleMatchExpressionsItemOperatorIn
		return nil
	case ReadContextRuleMatchExpressionsItemOperatorNotIn:
		*s = ReadContextRuleMatchExpressionsItemOperatorNotIn
		return nil
	case ReadContextRuleMatchExpressionsItemOperatorExists:
		*s = ReadContextRuleMatchExpressionsItemOperatorExists
		return nil
	case ReadContextRuleMatchExpressionsItemOperatorNotExists:
		*s = ReadContextRuleMatchExpressionsItemOperatorNotExists
		return nil
	case ReadContextRuleMatchExpressionsItemOperatorDateDeltaLessThan:
		*s = ReadContextRuleMatchExpressionsItemOperatorDateDeltaLessThan
		return nil
	case ReadContextRuleMatchExpressionsItemOperatorDateDeltaGreaterThan:
		*s = ReadContextRuleMatchExpressionsItemOperatorDateDeltaGreaterThan
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReadContextRuleMatchExpressionsItemSource string

const (
	ReadContextRuleMatchExpressionsItemSourceDomainIdentity ReadContextRuleMatchExpressionsItemSource = "domainIdentity"
	ReadContextRuleMatchExpressionsItemSourceReadParameters ReadContextRuleMatchExpressionsItemSource = "readParameters"
	ReadContextRuleMatchExpressionsItemSourceTags           ReadContextRuleMatchExpressionsItemSource = "tags"
)

// AllValues returns all ReadContextRuleMatchExpressionsItemSource values.
func (ReadContextRuleMatchExpressionsItemSource) AllValues() []ReadContextRuleMatchExpressionsItemSource {
	return []ReadContextRuleMatchExpressionsItemSource{
		ReadContextRuleMatchExpressionsItemSourceDomainIdentity,
		ReadContextRuleMatchExpressionsItemSourceReadParameters,
		ReadContextRuleMatchExpressionsItemSourceTags,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReadContextRuleMatchExpressionsItemSource) MarshalText() ([]byte, error) {
	switch s {
	case ReadContextRuleMatchExpressionsItemSourceDomainIdentity:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemSourceReadParameters:
		return []byte(s), nil
	case ReadContextRuleMatchExpressionsItemSourceTags:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReadContextRuleMatchExpressionsItemSource) UnmarshalText(data []byte) error {
	switch ReadContextRuleMatchExpressionsItemSource(data) {
	case ReadContextRuleMatchExpressionsItemSourceDomainIdentity:
		*s = ReadContextRuleMatchExpressionsItemSourceDomainIdentity
		return nil
	case ReadContextRuleMatchExpressionsItemSourceReadParameters:
		*s = ReadContextRuleMatchExpressionsItemSourceReadParameters
		return nil
	case ReadContextRuleMatchExpressionsItemSourceTags:
		*s = ReadContextRuleMatchExpressionsItemSourceTags
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Abridged details about a read context.
// Ref: #/components/schemas/ReadContextShortDetails
type ReadContextShortDetails struct {
	Name ReadContextReference `json:"name"`
	// A short, single sentence description of this read context.
	Summary string `json:"summary"`
	// A longer form description of this read context.
	Description string `json:"description"`
	// If true, skip creation of audit log events on read.
	DisableReadLogging OptBool `json:"disableReadLogging"`
	// Number of seconds for which cached encryption keys will be
	// considered valid by the client.
	KeyCacheTTL    OptInt32               `json:"keyCacheTTL"`
	ReadParameters []ReadContextParameter `json:"readParameters"`
	// True if this read context is imported.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
}

// GetName returns the value of Name.
func (s *ReadContextShortDetails) GetName() ReadContextReference {
	return s.Name
}

// GetSummary returns the value of Summary.
func (s *ReadContextShortDetails) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *ReadContextShortDetails) GetDescription() string {
	return s.Description
}

// GetDisableReadLogging returns the value of DisableReadLogging.
func (s *ReadContextShortDetails) GetDisableReadLogging() OptBool {
	return s.DisableReadLogging
}

// GetKeyCacheTTL returns the value of KeyCacheTTL.
func (s *ReadContextShortDetails) GetKeyCacheTTL() OptInt32 {
	return s.KeyCacheTTL
}

// GetReadParameters returns the value of ReadParameters.
func (s *ReadContextShortDetails) GetReadParameters() []ReadContextParameter {
	return s.ReadParameters
}

// GetImported returns the value of Imported.
func (s *ReadContextShortDetails) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *ReadContextShortDetails) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *ReadContextShortDetails) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// SetName sets the value of Name.
func (s *ReadContextShortDetails) SetName(val ReadContextReference) {
	s.Name = val
}

// SetSummary sets the value of Summary.
func (s *ReadContextShortDetails) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *ReadContextShortDetails) SetDescription(val string) {
	s.Description = val
}

// SetDisableReadLogging sets the value of DisableReadLogging.
func (s *ReadContextShortDetails) SetDisableReadLogging(val OptBool) {
	s.DisableReadLogging = val
}

// SetKeyCacheTTL sets the value of KeyCacheTTL.
func (s *ReadContextShortDetails) SetKeyCacheTTL(val OptInt32) {
	s.KeyCacheTTL = val
}

// SetReadParameters sets the value of ReadParameters.
func (s *ReadContextShortDetails) SetReadParameters(val []ReadContextParameter) {
	s.ReadParameters = val
}

// SetImported sets the value of Imported.
func (s *ReadContextShortDetails) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *ReadContextShortDetails) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *ReadContextShortDetails) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

// Returned when the server is unable to process the request due to resource exhaustion or rate
// limiting.
// Ref: #/components/schemas/ResourceExhaustedError
type ResourceExhaustedError struct {
	// Which resource type is exhausted.
	ResourceType string `json:"resourceType"`
	// Identifier for the resource that is exhausted.
	Identifier string `json:"identifier"`
	// A free form message describing the error.
	Message string `json:"message"`
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceExhaustedError) GetResourceType() string {
	return s.ResourceType
}

// GetIdentifier returns the value of Identifier.
func (s *ResourceExhaustedError) GetIdentifier() string {
	return s.Identifier
}

// GetMessage returns the value of Message.
func (s *ResourceExhaustedError) GetMessage() string {
	return s.Message
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceExhaustedError) SetResourceType(val string) {
	s.ResourceType = val
}

// SetIdentifier sets the value of Identifier.
func (s *ResourceExhaustedError) SetIdentifier(val string) {
	s.Identifier = val
}

// SetMessage sets the value of Message.
func (s *ResourceExhaustedError) SetMessage(val string) {
	s.Message = val
}

func (*ResourceExhaustedError) capsuleGetByIdRes()                              {}
func (*ResourceExhaustedError) domainAddAccessLogEntryRes()                     {}
func (*ResourceExhaustedError) domainAddExternalRootEncryptionKeyRes()          {}
func (*ResourceExhaustedError) domainAddNewRes()                                {}
func (*ResourceExhaustedError) domainAddReadContextRuleRes()                    {}
func (*ResourceExhaustedError) domainAuthenticateRes()                          {}
func (*ResourceExhaustedError) domainContactIssueVerifyRes()                    {}
func (*ResourceExhaustedError) domainCreateCapsuleRes()                         {}
func (*ResourceExhaustedError) domainCreatePeerDomainRes()                      {}
func (*ResourceExhaustedError) domainCreatePolicyRuleRes()                      {}
func (*ResourceExhaustedError) domainDataTaggingHookInvokeRes()                 {}
func (*ResourceExhaustedError) domainDeleteCapabilityRes()                      {}
func (*ResourceExhaustedError) domainDeleteCapsuleTagsRes()                     {}
func (*ResourceExhaustedError) domainDeleteExternalRootEncryptionKeyRes()       {}
func (*ResourceExhaustedError) domainDeleteFactByIDRes()                        {}
func (*ResourceExhaustedError) domainDeleteFactTypeRes()                        {}
func (*ResourceExhaustedError) domainDeleteIdentityProviderPrincipalRes()       {}
func (*ResourceExhaustedError) domainDeleteIdentityProviderRes()                {}
func (*ResourceExhaustedError) domainDeletePeerRes()                            {}
func (*ResourceExhaustedError) domainDeletePolicyRuleRes()                      {}
func (*ResourceExhaustedError) domainDeleteReadContextRes()                     {}
func (*ResourceExhaustedError) domainDeleteReadContextRuleRes()                 {}
func (*ResourceExhaustedError) domainDeleteWriteContextRegexRuleRes()           {}
func (*ResourceExhaustedError) domainDeleteWriteContextRes()                    {}
func (*ResourceExhaustedError) domainDescribeWriteContextRes()                  {}
func (*ResourceExhaustedError) domainExternalRootEncryptionKeyTestRes()         {}
func (*ResourceExhaustedError) domainFlushEncryptionKeysRes()                   {}
func (*ResourceExhaustedError) domainGetActiveExternalRootEncryptionKeyRes()    {}
func (*ResourceExhaustedError) domainGetCapabilitiesRes()                       {}
func (*ResourceExhaustedError) domainGetCapabilityRes()                         {}
func (*ResourceExhaustedError) domainGetCapsuleInfoRes()                        {}
func (*ResourceExhaustedError) domainGetExternalRootEncryptionKeyProvidersRes() {}
func (*ResourceExhaustedError) domainGetFactByIDRes()                           {}
func (*ResourceExhaustedError) domainGetFactTypeRes()                           {}
func (*ResourceExhaustedError) domainGetIdentityProviderPrincipalRes()          {}
func (*ResourceExhaustedError) domainGetIdentityProviderPrincipalsRes()         {}
func (*ResourceExhaustedError) domainGetIdentityProviderRes()                   {}
func (*ResourceExhaustedError) domainGetPeerConfigRes()                         {}
func (*ResourceExhaustedError) domainGetPeerRes()                               {}
func (*ResourceExhaustedError) domainGetPrivateInfoRes()                        {}
func (*ResourceExhaustedError) domainGetPublicInfoRes()                         {}
func (*ResourceExhaustedError) domainGetReadContextRes()                        {}
func (*ResourceExhaustedError) domainGetSettingsRes()                           {}
func (*ResourceExhaustedError) domainGetStatusRes()                             {}
func (*ResourceExhaustedError) domainGetTagInfoRes()                            {}
func (*ResourceExhaustedError) domainGetWriteContextRegexRulesRes()             {}
func (*ResourceExhaustedError) domainInsertIdentityProviderPrincipalRes()       {}
func (*ResourceExhaustedError) domainInsertWriteContextRegexRuleRes()           {}
func (*ResourceExhaustedError) domainListCapsulesRes()                          {}
func (*ResourceExhaustedError) domainListExternalRootEncryptionKeyRes()         {}
func (*ResourceExhaustedError) domainListFactTypesRes()                         {}
func (*ResourceExhaustedError) domainListFactsRes()                             {}
func (*ResourceExhaustedError) domainListHooksRes()                             {}
func (*ResourceExhaustedError) domainListIdentityProvidersRes()                 {}
func (*ResourceExhaustedError) domainListPeersRes()                             {}
func (*ResourceExhaustedError) domainListPolicyRulesRes()                       {}
func (*ResourceExhaustedError) domainListReadContextsRes()                      {}
func (*ResourceExhaustedError) domainListResourcesRes()                         {}
func (*ResourceExhaustedError) domainListWriteContextsRes()                     {}
func (*ResourceExhaustedError) domainOpenCapsuleRes()                           {}
func (*ResourceExhaustedError) domainPatchSettingsRes()                         {}
func (*ResourceExhaustedError) domainPolicyFlushRes()                           {}
func (*ResourceExhaustedError) domainPutCapabilityRes()                         {}
func (*ResourceExhaustedError) domainPutFactTypeRes()                           {}
func (*ResourceExhaustedError) domainQueryAccessLogRes()                        {}
func (*ResourceExhaustedError) domainQueryAccessLogSingleCapsuleRes()           {}
func (*ResourceExhaustedError) domainQueryControlLogRes()                       {}
func (*ResourceExhaustedError) domainReadContextFlushRes()                      {}
func (*ResourceExhaustedError) domainRenumberPolicyRulesRes()                   {}
func (*ResourceExhaustedError) domainRotateRootEncryptionKeysRes()              {}
func (*ResourceExhaustedError) domainSealCapsuleRes()                           {}
func (*ResourceExhaustedError) domainSetActiveExternalRootEncryptionKeyRes()    {}
func (*ResourceExhaustedError) domainUpdateIdentityProviderPrincipalRes()       {}
func (*ResourceExhaustedError) domainUpdatePeerRes()                            {}
func (*ResourceExhaustedError) domainUpdatePolicyRuleRes()                      {}
func (*ResourceExhaustedError) domainUpdateReadContextRuleRes()                 {}
func (*ResourceExhaustedError) domainUpsertCapsuleTagsRes()                     {}
func (*ResourceExhaustedError) domainUpsertFactRes()                            {}
func (*ResourceExhaustedError) domainUpsertIdentityProviderRes()                {}
func (*ResourceExhaustedError) domainUpsertReadContextRes()                     {}
func (*ResourceExhaustedError) domainUpsertSpanTagsRes()                        {}
func (*ResourceExhaustedError) domainUpsertWriteContextConfigurationRes()       {}
func (*ResourceExhaustedError) domainUpsertWriteContextRes()                    {}
func (*ResourceExhaustedError) starredDomainAddRes()                            {}
func (*ResourceExhaustedError) starredDomainRemoveRes()                         {}

// Returned when interacting with a valid URL, but the request references an unknown resource.
// Ref: #/components/schemas/ResourceNotFoundError
type ResourceNotFoundError struct {
	// Which resource type cannot be found.
	ResourceType string `json:"resourceType"`
	// The identifier for the resource we cannot locate.
	Identifier string `json:"identifier"`
	// A free form message describing the error.
	Message string `json:"message"`
}

// GetResourceType returns the value of ResourceType.
func (s *ResourceNotFoundError) GetResourceType() string {
	return s.ResourceType
}

// GetIdentifier returns the value of Identifier.
func (s *ResourceNotFoundError) GetIdentifier() string {
	return s.Identifier
}

// GetMessage returns the value of Message.
func (s *ResourceNotFoundError) GetMessage() string {
	return s.Message
}

// SetResourceType sets the value of ResourceType.
func (s *ResourceNotFoundError) SetResourceType(val string) {
	s.ResourceType = val
}

// SetIdentifier sets the value of Identifier.
func (s *ResourceNotFoundError) SetIdentifier(val string) {
	s.Identifier = val
}

// SetMessage sets the value of Message.
func (s *ResourceNotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*ResourceNotFoundError) capsuleGetByIdRes()                              {}
func (*ResourceNotFoundError) domainAddAccessLogEntryRes()                     {}
func (*ResourceNotFoundError) domainAddExternalRootEncryptionKeyRes()          {}
func (*ResourceNotFoundError) domainAddNewRes()                                {}
func (*ResourceNotFoundError) domainAddReadContextRuleRes()                    {}
func (*ResourceNotFoundError) domainAuthenticateRes()                          {}
func (*ResourceNotFoundError) domainContactIssueVerifyRes()                    {}
func (*ResourceNotFoundError) domainContactVerifyRes()                         {}
func (*ResourceNotFoundError) domainCreateCapsuleRes()                         {}
func (*ResourceNotFoundError) domainCreatePeerDomainRes()                      {}
func (*ResourceNotFoundError) domainCreatePolicyRuleRes()                      {}
func (*ResourceNotFoundError) domainDataTaggingHookInvokeRes()                 {}
func (*ResourceNotFoundError) domainDeleteCapabilityRes()                      {}
func (*ResourceNotFoundError) domainDeleteCapsuleTagsRes()                     {}
func (*ResourceNotFoundError) domainDeleteExternalRootEncryptionKeyRes()       {}
func (*ResourceNotFoundError) domainDeleteFactByIDRes()                        {}
func (*ResourceNotFoundError) domainDeleteFactTypeRes()                        {}
func (*ResourceNotFoundError) domainDeleteIdentityProviderPrincipalRes()       {}
func (*ResourceNotFoundError) domainDeleteIdentityProviderRes()                {}
func (*ResourceNotFoundError) domainDeletePeerRes()                            {}
func (*ResourceNotFoundError) domainDeletePolicyRuleRes()                      {}
func (*ResourceNotFoundError) domainDeleteReadContextRes()                     {}
func (*ResourceNotFoundError) domainDeleteReadContextRuleRes()                 {}
func (*ResourceNotFoundError) domainDeleteWriteContextRegexRuleRes()           {}
func (*ResourceNotFoundError) domainDeleteWriteContextRes()                    {}
func (*ResourceNotFoundError) domainDescribeWriteContextRes()                  {}
func (*ResourceNotFoundError) domainExternalRootEncryptionKeyTestRes()         {}
func (*ResourceNotFoundError) domainFlushEncryptionKeysRes()                   {}
func (*ResourceNotFoundError) domainGetActiveExternalRootEncryptionKeyRes()    {}
func (*ResourceNotFoundError) domainGetCapabilitiesRes()                       {}
func (*ResourceNotFoundError) domainGetCapabilityRes()                         {}
func (*ResourceNotFoundError) domainGetCapsuleInfoRes()                        {}
func (*ResourceNotFoundError) domainGetExternalRootEncryptionKeyProvidersRes() {}
func (*ResourceNotFoundError) domainGetFactByIDRes()                           {}
func (*ResourceNotFoundError) domainGetFactTypeRes()                           {}
func (*ResourceNotFoundError) domainGetIdentityProviderPrincipalRes()          {}
func (*ResourceNotFoundError) domainGetIdentityProviderPrincipalsRes()         {}
func (*ResourceNotFoundError) domainGetIdentityProviderRes()                   {}
func (*ResourceNotFoundError) domainGetPeerConfigRes()                         {}
func (*ResourceNotFoundError) domainGetPeerRes()                               {}
func (*ResourceNotFoundError) domainGetPrivateInfoRes()                        {}
func (*ResourceNotFoundError) domainGetPublicInfoRes()                         {}
func (*ResourceNotFoundError) domainGetReadContextRes()                        {}
func (*ResourceNotFoundError) domainGetSettingsRes()                           {}
func (*ResourceNotFoundError) domainGetStatusRes()                             {}
func (*ResourceNotFoundError) domainGetTagInfoRes()                            {}
func (*ResourceNotFoundError) domainGetWriteContextRegexRulesRes()             {}
func (*ResourceNotFoundError) domainInsertIdentityProviderPrincipalRes()       {}
func (*ResourceNotFoundError) domainInsertWriteContextRegexRuleRes()           {}
func (*ResourceNotFoundError) domainListCapsulesRes()                          {}
func (*ResourceNotFoundError) domainListExternalRootEncryptionKeyRes()         {}
func (*ResourceNotFoundError) domainListFactTypesRes()                         {}
func (*ResourceNotFoundError) domainListFactsRes()                             {}
func (*ResourceNotFoundError) domainListHooksRes()                             {}
func (*ResourceNotFoundError) domainListIdentityProvidersRes()                 {}
func (*ResourceNotFoundError) domainListPeersRes()                             {}
func (*ResourceNotFoundError) domainListPolicyRulesRes()                       {}
func (*ResourceNotFoundError) domainListReadContextsRes()                      {}
func (*ResourceNotFoundError) domainListResourcesRes()                         {}
func (*ResourceNotFoundError) domainListWriteContextsRes()                     {}
func (*ResourceNotFoundError) domainOpenCapsuleRes()                           {}
func (*ResourceNotFoundError) domainPatchSettingsRes()                         {}
func (*ResourceNotFoundError) domainPolicyFlushRes()                           {}
func (*ResourceNotFoundError) domainPutCapabilityRes()                         {}
func (*ResourceNotFoundError) domainPutFactTypeRes()                           {}
func (*ResourceNotFoundError) domainQueryAccessLogRes()                        {}
func (*ResourceNotFoundError) domainQueryAccessLogSingleCapsuleRes()           {}
func (*ResourceNotFoundError) domainQueryControlLogRes()                       {}
func (*ResourceNotFoundError) domainReadContextFlushRes()                      {}
func (*ResourceNotFoundError) domainRenumberPolicyRulesRes()                   {}
func (*ResourceNotFoundError) domainRotateRootEncryptionKeysRes()              {}
func (*ResourceNotFoundError) domainSealCapsuleRes()                           {}
func (*ResourceNotFoundError) domainSetActiveExternalRootEncryptionKeyRes()    {}
func (*ResourceNotFoundError) domainUpdateIdentityProviderPrincipalRes()       {}
func (*ResourceNotFoundError) domainUpdatePeerRes()                            {}
func (*ResourceNotFoundError) domainUpdatePolicyRuleRes()                      {}
func (*ResourceNotFoundError) domainUpdateReadContextRuleRes()                 {}
func (*ResourceNotFoundError) domainUpsertCapsuleTagsRes()                     {}
func (*ResourceNotFoundError) domainUpsertFactRes()                            {}
func (*ResourceNotFoundError) domainUpsertIdentityProviderRes()                {}
func (*ResourceNotFoundError) domainUpsertReadContextRes()                     {}
func (*ResourceNotFoundError) domainUpsertSpanTagsRes()                        {}
func (*ResourceNotFoundError) domainUpsertWriteContextConfigurationRes()       {}
func (*ResourceNotFoundError) domainUpsertWriteContextRes()                    {}
func (*ResourceNotFoundError) starredDomainAddRes()                            {}
func (*ResourceNotFoundError) starredDomainRemoveRes()                         {}

type RootEncryptionKeyID string

// The newly created root encryption key's ID.
// Ref: #/components/schemas/RootEncryptionKeyIDResponse
type RootEncryptionKeyIDResponse struct {
	// The root encryption key ID.
	RekID string `json:"rekID"`
}

// GetRekID returns the value of RekID.
func (s *RootEncryptionKeyIDResponse) GetRekID() string {
	return s.RekID
}

// SetRekID sets the value of RekID.
func (s *RootEncryptionKeyIDResponse) SetRekID(val string) {
	s.RekID = val
}

func (*RootEncryptionKeyIDResponse) domainAddExternalRootEncryptionKeyRes() {}

// Ref: #/components/schemas/RootEncryptionKeyItem
type RootEncryptionKeyItem struct {
	// The root encryption key's provider source.
	Source string `json:"source"`
	// The cloud provider's resource path/alias.
	ResourcePath string `json:"resourcePath"`
	// The root encryption key's unique identifier.
	RekID string `json:"rekID"`
	// The user defined description for the root encryption key.
	Description string `json:"description"`
}

// GetSource returns the value of Source.
func (s *RootEncryptionKeyItem) GetSource() string {
	return s.Source
}

// GetResourcePath returns the value of ResourcePath.
func (s *RootEncryptionKeyItem) GetResourcePath() string {
	return s.ResourcePath
}

// GetRekID returns the value of RekID.
func (s *RootEncryptionKeyItem) GetRekID() string {
	return s.RekID
}

// GetDescription returns the value of Description.
func (s *RootEncryptionKeyItem) GetDescription() string {
	return s.Description
}

// SetSource sets the value of Source.
func (s *RootEncryptionKeyItem) SetSource(val string) {
	s.Source = val
}

// SetResourcePath sets the value of ResourcePath.
func (s *RootEncryptionKeyItem) SetResourcePath(val string) {
	s.ResourcePath = val
}

// SetRekID sets the value of RekID.
func (s *RootEncryptionKeyItem) SetRekID(val string) {
	s.RekID = val
}

// SetDescription sets the value of Description.
func (s *RootEncryptionKeyItem) SetDescription(val string) {
	s.Description = val
}

func (*RootEncryptionKeyItem) domainGetActiveExternalRootEncryptionKeyRes() {}

type RootEncryptionKeyListResponse []RootEncryptionKeyItem

func (*RootEncryptionKeyListResponse) domainListExternalRootEncryptionKeyRes() {}

// Ref: #/components/schemas/RootEncryptionKeyTestResponse
type RootEncryptionKeyTestResponse struct {
	ID RootEncryptionKeyID `json:"id"`
	// The root encryption key's provider source.
	Source string `json:"source"`
	// The cloud provider's resource path/alias.
	ResourcePath string `json:"resourcePath"`
	// The user defined description for the root encryption key.
	Description   string                              `json:"description"`
	Status        RootEncryptionKeyTestResponseStatus `json:"status"`
	StatusMessage string                              `json:"statusMessage"`
	LatencyMS     float64                             `json:"latencyMS"`
}

// GetID returns the value of ID.
func (s *RootEncryptionKeyTestResponse) GetID() RootEncryptionKeyID {
	return s.ID
}

// GetSource returns the value of Source.
func (s *RootEncryptionKeyTestResponse) GetSource() string {
	return s.Source
}

// GetResourcePath returns the value of ResourcePath.
func (s *RootEncryptionKeyTestResponse) GetResourcePath() string {
	return s.ResourcePath
}

// GetDescription returns the value of Description.
func (s *RootEncryptionKeyTestResponse) GetDescription() string {
	return s.Description
}

// GetStatus returns the value of Status.
func (s *RootEncryptionKeyTestResponse) GetStatus() RootEncryptionKeyTestResponseStatus {
	return s.Status
}

// GetStatusMessage returns the value of StatusMessage.
func (s *RootEncryptionKeyTestResponse) GetStatusMessage() string {
	return s.StatusMessage
}

// GetLatencyMS returns the value of LatencyMS.
func (s *RootEncryptionKeyTestResponse) GetLatencyMS() float64 {
	return s.LatencyMS
}

// SetID sets the value of ID.
func (s *RootEncryptionKeyTestResponse) SetID(val RootEncryptionKeyID) {
	s.ID = val
}

// SetSource sets the value of Source.
func (s *RootEncryptionKeyTestResponse) SetSource(val string) {
	s.Source = val
}

// SetResourcePath sets the value of ResourcePath.
func (s *RootEncryptionKeyTestResponse) SetResourcePath(val string) {
	s.ResourcePath = val
}

// SetDescription sets the value of Description.
func (s *RootEncryptionKeyTestResponse) SetDescription(val string) {
	s.Description = val
}

// SetStatus sets the value of Status.
func (s *RootEncryptionKeyTestResponse) SetStatus(val RootEncryptionKeyTestResponseStatus) {
	s.Status = val
}

// SetStatusMessage sets the value of StatusMessage.
func (s *RootEncryptionKeyTestResponse) SetStatusMessage(val string) {
	s.StatusMessage = val
}

// SetLatencyMS sets the value of LatencyMS.
func (s *RootEncryptionKeyTestResponse) SetLatencyMS(val float64) {
	s.LatencyMS = val
}

func (*RootEncryptionKeyTestResponse) domainExternalRootEncryptionKeyTestRes() {}

type RootEncryptionKeyTestResponseStatus string

const (
	RootEncryptionKeyTestResponseStatusHEALTHY       RootEncryptionKeyTestResponseStatus = "HEALTHY"
	RootEncryptionKeyTestResponseStatusUNREACHABLE   RootEncryptionKeyTestResponseStatus = "UNREACHABLE"
	RootEncryptionKeyTestResponseStatusMISCONFIGURED RootEncryptionKeyTestResponseStatus = "MISCONFIGURED"
)

// AllValues returns all RootEncryptionKeyTestResponseStatus values.
func (RootEncryptionKeyTestResponseStatus) AllValues() []RootEncryptionKeyTestResponseStatus {
	return []RootEncryptionKeyTestResponseStatus{
		RootEncryptionKeyTestResponseStatusHEALTHY,
		RootEncryptionKeyTestResponseStatusUNREACHABLE,
		RootEncryptionKeyTestResponseStatusMISCONFIGURED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RootEncryptionKeyTestResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case RootEncryptionKeyTestResponseStatusHEALTHY:
		return []byte(s), nil
	case RootEncryptionKeyTestResponseStatusUNREACHABLE:
		return []byte(s), nil
	case RootEncryptionKeyTestResponseStatusMISCONFIGURED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RootEncryptionKeyTestResponseStatus) UnmarshalText(data []byte) error {
	switch RootEncryptionKeyTestResponseStatus(data) {
	case RootEncryptionKeyTestResponseStatusHEALTHY:
		*s = RootEncryptionKeyTestResponseStatusHEALTHY
		return nil
	case RootEncryptionKeyTestResponseStatusUNREACHABLE:
		*s = RootEncryptionKeyTestResponseStatusUNREACHABLE
		return nil
	case RootEncryptionKeyTestResponseStatusMISCONFIGURED:
		*s = RootEncryptionKeyTestResponseStatusMISCONFIGURED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The results for a query of the capsule access log.
// Ref: #/components/schemas/RotateKeyEncryptionKeyResponse
type RotateKeyEncryptionKeyResponse struct {
	// If true, there are still keys encrypted with non-active root encryption keys. Query again to
	// encrypted another batch.
	HasMore bool `json:"has_more"`
}

// GetHasMore returns the value of HasMore.
func (s *RotateKeyEncryptionKeyResponse) GetHasMore() bool {
	return s.HasMore
}

// SetHasMore sets the value of HasMore.
func (s *RotateKeyEncryptionKeyResponse) SetHasMore(val bool) {
	s.HasMore = val
}

func (*RotateKeyEncryptionKeyResponse) domainRotateRootEncryptionKeysRes() {}

type RuleID string

type RuleReference string

type SessionID string

// StarredDomainAddOK is response for StarredDomainAdd operation.
type StarredDomainAddOK struct{}

func (*StarredDomainAddOK) starredDomainAddRes() {}

type StarredDomainAddReq struct{}

// Ref: #/components/schemas/StarredDomainList
type StarredDomainList struct {
	Domains []DomainID `json:"domains"`
}

// GetDomains returns the value of Domains.
func (s *StarredDomainList) GetDomains() []DomainID {
	return s.Domains
}

// SetDomains sets the value of Domains.
func (s *StarredDomainList) SetDomains(val []DomainID) {
	s.Domains = val
}

func (*StarredDomainList) starredDomainListRes() {}

// StarredDomainRemoveOK is response for StarredDomainRemove operation.
type StarredDomainRemoveOK struct{}

func (*StarredDomainRemoveOK) starredDomainRemoveRes() {}

// Ref: #/components/schemas/Tag
type Tag struct {
	Name  TagNameField  `json:"name"`
	Value TagValueField `json:"value"`
	Type  TagTypeField  `json:"type"`
	// Where this tag came from. If it came from a hook, this will be of the form "hooks/the_hookname".
	// Otherwise, this will be "create" indicating it was given by the user at the time the capsule was
	// created, or it will be "manual" indicating it was added later.
	Source string `json:"source"`
	// If this tag came from a hook, which version of that hook emitted the tag.
	HookVersion OptString `json:"hook_version"`
}

// GetName returns the value of Name.
func (s *Tag) GetName() TagNameField {
	return s.Name
}

// GetValue returns the value of Value.
func (s *Tag) GetValue() TagValueField {
	return s.Value
}

// GetType returns the value of Type.
func (s *Tag) GetType() TagTypeField {
	return s.Type
}

// GetSource returns the value of Source.
func (s *Tag) GetSource() string {
	return s.Source
}

// GetHookVersion returns the value of HookVersion.
func (s *Tag) GetHookVersion() OptString {
	return s.HookVersion
}

// SetName sets the value of Name.
func (s *Tag) SetName(val TagNameField) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *Tag) SetValue(val TagValueField) {
	s.Value = val
}

// SetType sets the value of Type.
func (s *Tag) SetType(val TagTypeField) {
	s.Type = val
}

// SetSource sets the value of Source.
func (s *Tag) SetSource(val string) {
	s.Source = val
}

// SetHookVersion sets the value of HookVersion.
func (s *Tag) SetHookVersion(val OptString) {
	s.HookVersion = val
}

// Ref: #/components/schemas/TagMeta
type TagMeta struct {
	// The full name of this tag.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *TagMeta) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *TagMeta) SetName(val string) {
	s.Name = val
}

type TagName string

type TagNameField string

// Ref: #/components/schemas/TagSet
type TagSet struct {
	CapsuleTags []Tag                `json:"capsuleTags"`
	SpanTags    []TagSetSpanTagsItem `json:"spanTags"`
}

// GetCapsuleTags returns the value of CapsuleTags.
func (s *TagSet) GetCapsuleTags() []Tag {
	return s.CapsuleTags
}

// GetSpanTags returns the value of SpanTags.
func (s *TagSet) GetSpanTags() []TagSetSpanTagsItem {
	return s.SpanTags
}

// SetCapsuleTags sets the value of CapsuleTags.
func (s *TagSet) SetCapsuleTags(val []Tag) {
	s.CapsuleTags = val
}

// SetSpanTags sets the value of SpanTags.
func (s *TagSet) SetSpanTags(val []TagSetSpanTagsItem) {
	s.SpanTags = val
}

type TagSetSpanTagsItem struct {
	// The offset into the content that this span starts.
	Start int64 `json:"start"`
	// The offset into the content that this span ends.
	End  int64 `json:"end"`
	Tags []Tag `json:"tags"`
}

// GetStart returns the value of Start.
func (s *TagSetSpanTagsItem) GetStart() int64 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TagSetSpanTagsItem) GetEnd() int64 {
	return s.End
}

// GetTags returns the value of Tags.
func (s *TagSetSpanTagsItem) GetTags() []Tag {
	return s.Tags
}

// SetStart sets the value of Start.
func (s *TagSetSpanTagsItem) SetStart(val int64) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TagSetSpanTagsItem) SetEnd(val int64) {
	s.End = val
}

// SetTags sets the value of Tags.
func (s *TagSetSpanTagsItem) SetTags(val []Tag) {
	s.Tags = val
}

// Ref: #/components/schemas/TagSummary
type TagSummary struct {
	UniqueTags []TagSummaryUniqueTagsItem `json:"uniqueTags"`
	// For tags with a high number of unique values, they will not be accumulated in uniqueTags but will
	// instead be summarized here.
	ElidedTags []TagSummaryElidedTagsItem `json:"elidedTags"`
}

// GetUniqueTags returns the value of UniqueTags.
func (s *TagSummary) GetUniqueTags() []TagSummaryUniqueTagsItem {
	return s.UniqueTags
}

// GetElidedTags returns the value of ElidedTags.
func (s *TagSummary) GetElidedTags() []TagSummaryElidedTagsItem {
	return s.ElidedTags
}

// SetUniqueTags sets the value of UniqueTags.
func (s *TagSummary) SetUniqueTags(val []TagSummaryUniqueTagsItem) {
	s.UniqueTags = val
}

// SetElidedTags sets the value of ElidedTags.
func (s *TagSummary) SetElidedTags(val []TagSummaryElidedTagsItem) {
	s.ElidedTags = val
}

type TagSummaryElidedTagsItem struct {
	TagName string `json:"tagName"`
	// How many unique configurations of this tag appeared. A unique configuration is a combination of
	// value, type, source and hook_version in a Tag.
	NumUniqueTags int `json:"numUniqueTags"`
	// How many tags with this tagName appeared.
	TotalOccurrences int `json:"totalOccurrences"`
}

// GetTagName returns the value of TagName.
func (s *TagSummaryElidedTagsItem) GetTagName() string {
	return s.TagName
}

// GetNumUniqueTags returns the value of NumUniqueTags.
func (s *TagSummaryElidedTagsItem) GetNumUniqueTags() int {
	return s.NumUniqueTags
}

// GetTotalOccurrences returns the value of TotalOccurrences.
func (s *TagSummaryElidedTagsItem) GetTotalOccurrences() int {
	return s.TotalOccurrences
}

// SetTagName sets the value of TagName.
func (s *TagSummaryElidedTagsItem) SetTagName(val string) {
	s.TagName = val
}

// SetNumUniqueTags sets the value of NumUniqueTags.
func (s *TagSummaryElidedTagsItem) SetNumUniqueTags(val int) {
	s.NumUniqueTags = val
}

// SetTotalOccurrences sets the value of TotalOccurrences.
func (s *TagSummaryElidedTagsItem) SetTotalOccurrences(val int) {
	s.TotalOccurrences = val
}

type TagSummaryUniqueTagsItem struct {
	Tag Tag `json:"tag"`
	// How many times this tag configuration appears.
	Occurrences int `json:"occurrences"`
}

// GetTag returns the value of Tag.
func (s *TagSummaryUniqueTagsItem) GetTag() Tag {
	return s.Tag
}

// GetOccurrences returns the value of Occurrences.
func (s *TagSummaryUniqueTagsItem) GetOccurrences() int {
	return s.Occurrences
}

// SetTag sets the value of Tag.
func (s *TagSummaryUniqueTagsItem) SetTag(val Tag) {
	s.Tag = val
}

// SetOccurrences sets the value of Occurrences.
func (s *TagSummaryUniqueTagsItem) SetOccurrences(val int) {
	s.Occurrences = val
}

// The type of this tag.
// Ref: #/components/schemas/TagTypeField
type TagTypeField string

const (
	TagTypeFieldString  TagTypeField = "string"
	TagTypeFieldNumber  TagTypeField = "number"
	TagTypeFieldBoolean TagTypeField = "boolean"
	TagTypeFieldDate    TagTypeField = "date"
	TagTypeFieldUnary   TagTypeField = "unary"
)

// AllValues returns all TagTypeField values.
func (TagTypeField) AllValues() []TagTypeField {
	return []TagTypeField{
		TagTypeFieldString,
		TagTypeFieldNumber,
		TagTypeFieldBoolean,
		TagTypeFieldDate,
		TagTypeFieldUnary,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TagTypeField) MarshalText() ([]byte, error) {
	switch s {
	case TagTypeFieldString:
		return []byte(s), nil
	case TagTypeFieldNumber:
		return []byte(s), nil
	case TagTypeFieldBoolean:
		return []byte(s), nil
	case TagTypeFieldDate:
		return []byte(s), nil
	case TagTypeFieldUnary:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TagTypeField) UnmarshalText(data []byte) error {
	switch TagTypeField(data) {
	case TagTypeFieldString:
		*s = TagTypeFieldString
		return nil
	case TagTypeFieldNumber:
		*s = TagTypeFieldNumber
		return nil
	case TagTypeFieldBoolean:
		*s = TagTypeFieldBoolean
		return nil
	case TagTypeFieldDate:
		*s = TagTypeFieldDate
		return nil
	case TagTypeFieldUnary:
		*s = TagTypeFieldUnary
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TagValueField string

// Returned when the server cannot authorize the request.
// Ref: #/components/schemas/UnauthorizedError
type UnauthorizedError struct {
	// A free form message describing the error.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *UnauthorizedError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *UnauthorizedError) SetMessage(val string) {
	s.Message = val
}

func (*UnauthorizedError) capsuleGetByIdRes()                              {}
func (*UnauthorizedError) domainAddAccessLogEntryRes()                     {}
func (*UnauthorizedError) domainAddExternalRootEncryptionKeyRes()          {}
func (*UnauthorizedError) domainAddNewRes()                                {}
func (*UnauthorizedError) domainAddReadContextRuleRes()                    {}
func (*UnauthorizedError) domainAuthenticateRes()                          {}
func (*UnauthorizedError) domainContactIssueVerifyRes()                    {}
func (*UnauthorizedError) domainContactVerifyRes()                         {}
func (*UnauthorizedError) domainCreateCapsuleRes()                         {}
func (*UnauthorizedError) domainCreatePeerDomainRes()                      {}
func (*UnauthorizedError) domainCreatePolicyRuleRes()                      {}
func (*UnauthorizedError) domainDataTaggingHookInvokeRes()                 {}
func (*UnauthorizedError) domainDeleteCapabilityRes()                      {}
func (*UnauthorizedError) domainDeleteCapsuleTagsRes()                     {}
func (*UnauthorizedError) domainDeleteExternalRootEncryptionKeyRes()       {}
func (*UnauthorizedError) domainDeleteFactByIDRes()                        {}
func (*UnauthorizedError) domainDeleteFactTypeRes()                        {}
func (*UnauthorizedError) domainDeleteIdentityProviderPrincipalRes()       {}
func (*UnauthorizedError) domainDeleteIdentityProviderRes()                {}
func (*UnauthorizedError) domainDeletePeerRes()                            {}
func (*UnauthorizedError) domainDeletePolicyRuleRes()                      {}
func (*UnauthorizedError) domainDeleteReadContextRes()                     {}
func (*UnauthorizedError) domainDeleteReadContextRuleRes()                 {}
func (*UnauthorizedError) domainDeleteWriteContextRegexRuleRes()           {}
func (*UnauthorizedError) domainDeleteWriteContextRes()                    {}
func (*UnauthorizedError) domainDescribeWriteContextRes()                  {}
func (*UnauthorizedError) domainExternalRootEncryptionKeyTestRes()         {}
func (*UnauthorizedError) domainFlushEncryptionKeysRes()                   {}
func (*UnauthorizedError) domainGetActiveExternalRootEncryptionKeyRes()    {}
func (*UnauthorizedError) domainGetCapabilitiesRes()                       {}
func (*UnauthorizedError) domainGetCapabilityRes()                         {}
func (*UnauthorizedError) domainGetCapsuleInfoRes()                        {}
func (*UnauthorizedError) domainGetExternalRootEncryptionKeyProvidersRes() {}
func (*UnauthorizedError) domainGetFactByIDRes()                           {}
func (*UnauthorizedError) domainGetFactTypeRes()                           {}
func (*UnauthorizedError) domainGetIdentityProviderPrincipalRes()          {}
func (*UnauthorizedError) domainGetIdentityProviderPrincipalsRes()         {}
func (*UnauthorizedError) domainGetIdentityProviderRes()                   {}
func (*UnauthorizedError) domainGetPeerConfigRes()                         {}
func (*UnauthorizedError) domainGetPeerRes()                               {}
func (*UnauthorizedError) domainGetPrivateInfoRes()                        {}
func (*UnauthorizedError) domainGetPublicInfoRes()                         {}
func (*UnauthorizedError) domainGetReadContextRes()                        {}
func (*UnauthorizedError) domainGetSettingsRes()                           {}
func (*UnauthorizedError) domainGetStatusRes()                             {}
func (*UnauthorizedError) domainGetTagInfoRes()                            {}
func (*UnauthorizedError) domainGetWriteContextRegexRulesRes()             {}
func (*UnauthorizedError) domainInsertIdentityProviderPrincipalRes()       {}
func (*UnauthorizedError) domainInsertWriteContextRegexRuleRes()           {}
func (*UnauthorizedError) domainListCapsulesRes()                          {}
func (*UnauthorizedError) domainListExternalRootEncryptionKeyRes()         {}
func (*UnauthorizedError) domainListFactTypesRes()                         {}
func (*UnauthorizedError) domainListFactsRes()                             {}
func (*UnauthorizedError) domainListHooksRes()                             {}
func (*UnauthorizedError) domainListIdentityProvidersRes()                 {}
func (*UnauthorizedError) domainListPeersRes()                             {}
func (*UnauthorizedError) domainListPolicyRulesRes()                       {}
func (*UnauthorizedError) domainListReadContextsRes()                      {}
func (*UnauthorizedError) domainListResourcesRes()                         {}
func (*UnauthorizedError) domainListWriteContextsRes()                     {}
func (*UnauthorizedError) domainOpenCapsuleRes()                           {}
func (*UnauthorizedError) domainPatchSettingsRes()                         {}
func (*UnauthorizedError) domainPolicyFlushRes()                           {}
func (*UnauthorizedError) domainPutCapabilityRes()                         {}
func (*UnauthorizedError) domainPutFactTypeRes()                           {}
func (*UnauthorizedError) domainQueryAccessLogRes()                        {}
func (*UnauthorizedError) domainQueryAccessLogSingleCapsuleRes()           {}
func (*UnauthorizedError) domainQueryControlLogRes()                       {}
func (*UnauthorizedError) domainReadContextFlushRes()                      {}
func (*UnauthorizedError) domainRenumberPolicyRulesRes()                   {}
func (*UnauthorizedError) domainRotateRootEncryptionKeysRes()              {}
func (*UnauthorizedError) domainSealCapsuleRes()                           {}
func (*UnauthorizedError) domainSetActiveExternalRootEncryptionKeyRes()    {}
func (*UnauthorizedError) domainUpdateIdentityProviderPrincipalRes()       {}
func (*UnauthorizedError) domainUpdatePeerRes()                            {}
func (*UnauthorizedError) domainUpdatePolicyRuleRes()                      {}
func (*UnauthorizedError) domainUpdateReadContextRuleRes()                 {}
func (*UnauthorizedError) domainUpsertCapsuleTagsRes()                     {}
func (*UnauthorizedError) domainUpsertFactRes()                            {}
func (*UnauthorizedError) domainUpsertIdentityProviderRes()                {}
func (*UnauthorizedError) domainUpsertReadContextRes()                     {}
func (*UnauthorizedError) domainUpsertSpanTagsRes()                        {}
func (*UnauthorizedError) domainUpsertWriteContextConfigurationRes()       {}
func (*UnauthorizedError) domainUpsertWriteContextRes()                    {}
func (*UnauthorizedError) starredDomainAddRes()                            {}
func (*UnauthorizedError) starredDomainListRes()                           {}
func (*UnauthorizedError) starredDomainRemoveRes()                         {}

// Ref: #/components/schemas/UpsertSpanTagsRequest
type UpsertSpanTagsRequest struct {
	Summary     TagSummary            `json:"summary"`
	CreateToken CapsuleOperationToken `json:"createToken"`
}

// GetSummary returns the value of Summary.
func (s *UpsertSpanTagsRequest) GetSummary() TagSummary {
	return s.Summary
}

// GetCreateToken returns the value of CreateToken.
func (s *UpsertSpanTagsRequest) GetCreateToken() CapsuleOperationToken {
	return s.CreateToken
}

// SetSummary sets the value of Summary.
func (s *UpsertSpanTagsRequest) SetSummary(val TagSummary) {
	s.Summary = val
}

// SetCreateToken sets the value of CreateToken.
func (s *UpsertSpanTagsRequest) SetCreateToken(val CapsuleOperationToken) {
	s.CreateToken = val
}

// Returned by successful contact email verification.
// Ref: #/components/schemas/VerifyContactResponse
type VerifyContactResponse struct {
	Domain  DomainID `json:"domain"`
	Email   string   `json:"email"`
	Message string   `json:"message"`
}

// GetDomain returns the value of Domain.
func (s *VerifyContactResponse) GetDomain() DomainID {
	return s.Domain
}

// GetEmail returns the value of Email.
func (s *VerifyContactResponse) GetEmail() string {
	return s.Email
}

// GetMessage returns the value of Message.
func (s *VerifyContactResponse) GetMessage() string {
	return s.Message
}

// SetDomain sets the value of Domain.
func (s *VerifyContactResponse) SetDomain(val DomainID) {
	s.Domain = val
}

// SetEmail sets the value of Email.
func (s *VerifyContactResponse) SetEmail(val string) {
	s.Email = val
}

// SetMessage sets the value of Message.
func (s *VerifyContactResponse) SetMessage(val string) {
	s.Message = val
}

func (*VerifyContactResponse) domainContactVerifyRes() {}

type VersionConstraint string

// Information about write context config rules.
// Ref: #/components/schemas/WriteContextConfigInfo
type WriteContextConfigInfo struct {
	// Number of seconds for which the client may reuse a given encryption
	// key for sealing multiple capsules.
	KeyReuseTTL        OptInt32                                  `json:"keyReuseTTL"`
	DefaultCapsuleTags []WriteContextRegexTag                    `json:"defaultCapsuleTags"`
	RequiredHooks      []WriteContextConfigInfoRequiredHooksItem `json:"requiredHooks"`
}

// GetKeyReuseTTL returns the value of KeyReuseTTL.
func (s *WriteContextConfigInfo) GetKeyReuseTTL() OptInt32 {
	return s.KeyReuseTTL
}

// GetDefaultCapsuleTags returns the value of DefaultCapsuleTags.
func (s *WriteContextConfigInfo) GetDefaultCapsuleTags() []WriteContextRegexTag {
	return s.DefaultCapsuleTags
}

// GetRequiredHooks returns the value of RequiredHooks.
func (s *WriteContextConfigInfo) GetRequiredHooks() []WriteContextConfigInfoRequiredHooksItem {
	return s.RequiredHooks
}

// SetKeyReuseTTL sets the value of KeyReuseTTL.
func (s *WriteContextConfigInfo) SetKeyReuseTTL(val OptInt32) {
	s.KeyReuseTTL = val
}

// SetDefaultCapsuleTags sets the value of DefaultCapsuleTags.
func (s *WriteContextConfigInfo) SetDefaultCapsuleTags(val []WriteContextRegexTag) {
	s.DefaultCapsuleTags = val
}

// SetRequiredHooks sets the value of RequiredHooks.
func (s *WriteContextConfigInfo) SetRequiredHooks(val []WriteContextConfigInfoRequiredHooksItem) {
	s.RequiredHooks = val
}

type WriteContextConfigInfoRequiredHooksItem struct {
	Hook       HookName          `json:"hook"`
	Constraint VersionConstraint `json:"constraint"`
	// How should this hook be invoked.
	Mode WriteContextConfigInfoRequiredHooksItemMode `json:"mode"`
}

// GetHook returns the value of Hook.
func (s *WriteContextConfigInfoRequiredHooksItem) GetHook() HookName {
	return s.Hook
}

// GetConstraint returns the value of Constraint.
func (s *WriteContextConfigInfoRequiredHooksItem) GetConstraint() VersionConstraint {
	return s.Constraint
}

// GetMode returns the value of Mode.
func (s *WriteContextConfigInfoRequiredHooksItem) GetMode() WriteContextConfigInfoRequiredHooksItemMode {
	return s.Mode
}

// SetHook sets the value of Hook.
func (s *WriteContextConfigInfoRequiredHooksItem) SetHook(val HookName) {
	s.Hook = val
}

// SetConstraint sets the value of Constraint.
func (s *WriteContextConfigInfoRequiredHooksItem) SetConstraint(val VersionConstraint) {
	s.Constraint = val
}

// SetMode sets the value of Mode.
func (s *WriteContextConfigInfoRequiredHooksItem) SetMode(val WriteContextConfigInfoRequiredHooksItemMode) {
	s.Mode = val
}

// How should this hook be invoked.
type WriteContextConfigInfoRequiredHooksItemMode string

const (
	WriteContextConfigInfoRequiredHooksItemModeSync  WriteContextConfigInfoRequiredHooksItemMode = "sync"
	WriteContextConfigInfoRequiredHooksItemModeAsync WriteContextConfigInfoRequiredHooksItemMode = "async"
)

// AllValues returns all WriteContextConfigInfoRequiredHooksItemMode values.
func (WriteContextConfigInfoRequiredHooksItemMode) AllValues() []WriteContextConfigInfoRequiredHooksItemMode {
	return []WriteContextConfigInfoRequiredHooksItemMode{
		WriteContextConfigInfoRequiredHooksItemModeSync,
		WriteContextConfigInfoRequiredHooksItemModeAsync,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WriteContextConfigInfoRequiredHooksItemMode) MarshalText() ([]byte, error) {
	switch s {
	case WriteContextConfigInfoRequiredHooksItemModeSync:
		return []byte(s), nil
	case WriteContextConfigInfoRequiredHooksItemModeAsync:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WriteContextConfigInfoRequiredHooksItemMode) UnmarshalText(data []byte) error {
	switch WriteContextConfigInfoRequiredHooksItemMode(data) {
	case WriteContextConfigInfoRequiredHooksItemModeSync:
		*s = WriteContextConfigInfoRequiredHooksItemModeSync
		return nil
	case WriteContextConfigInfoRequiredHooksItemModeAsync:
		*s = WriteContextConfigInfoRequiredHooksItemModeAsync
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details about a write context.
// Ref: #/components/schemas/WriteContextDetails
type WriteContextDetails struct {
	Name WriteContextReference `json:"name"`
	// A short, single sentence description of this write context.
	Summary string `json:"summary"`
	// A longer form description of this write context.
	Description string                 `json:"description"`
	Config      WriteContextConfigInfo `json:"config"`
	// True if this write context is imported.
	Imported         bool        `json:"imported"`
	SourceDomainID   OptDomainID `json:"sourceDomainID"`
	SourceDomainName OptString   `json:"sourceDomainName"`
}

// GetName returns the value of Name.
func (s *WriteContextDetails) GetName() WriteContextReference {
	return s.Name
}

// GetSummary returns the value of Summary.
func (s *WriteContextDetails) GetSummary() string {
	return s.Summary
}

// GetDescription returns the value of Description.
func (s *WriteContextDetails) GetDescription() string {
	return s.Description
}

// GetConfig returns the value of Config.
func (s *WriteContextDetails) GetConfig() WriteContextConfigInfo {
	return s.Config
}

// GetImported returns the value of Imported.
func (s *WriteContextDetails) GetImported() bool {
	return s.Imported
}

// GetSourceDomainID returns the value of SourceDomainID.
func (s *WriteContextDetails) GetSourceDomainID() OptDomainID {
	return s.SourceDomainID
}

// GetSourceDomainName returns the value of SourceDomainName.
func (s *WriteContextDetails) GetSourceDomainName() OptString {
	return s.SourceDomainName
}

// SetName sets the value of Name.
func (s *WriteContextDetails) SetName(val WriteContextReference) {
	s.Name = val
}

// SetSummary sets the value of Summary.
func (s *WriteContextDetails) SetSummary(val string) {
	s.Summary = val
}

// SetDescription sets the value of Description.
func (s *WriteContextDetails) SetDescription(val string) {
	s.Description = val
}

// SetConfig sets the value of Config.
func (s *WriteContextDetails) SetConfig(val WriteContextConfigInfo) {
	s.Config = val
}

// SetImported sets the value of Imported.
func (s *WriteContextDetails) SetImported(val bool) {
	s.Imported = val
}

// SetSourceDomainID sets the value of SourceDomainID.
func (s *WriteContextDetails) SetSourceDomainID(val OptDomainID) {
	s.SourceDomainID = val
}

// SetSourceDomainName sets the value of SourceDomainName.
func (s *WriteContextDetails) SetSourceDomainName(val OptString) {
	s.SourceDomainName = val
}

func (*WriteContextDetails) domainDescribeWriteContextRes() {}

// A list of write contexts.
// Ref: #/components/schemas/WriteContextList
type WriteContextList struct {
	WriteContexts []WriteContextDetails `json:"writeContexts"`
}

// GetWriteContexts returns the value of WriteContexts.
func (s *WriteContextList) GetWriteContexts() []WriteContextDetails {
	return s.WriteContexts
}

// SetWriteContexts sets the value of WriteContexts.
func (s *WriteContextList) SetWriteContexts(val []WriteContextDetails) {
	s.WriteContexts = val
}

func (*WriteContextList) domainListWriteContextsRes() {}

type WriteContextName string

type WriteContextReference string

// Regex classifier rule for a write context.
// Ref: #/components/schemas/WriteContextRegexRule
type WriteContextRegexRule struct {
	ID          OptRuleID              `json:"id"`
	Pattern     string                 `json:"pattern"`
	MatchOnKey  bool                   `json:"matchOnKey"`
	SpanTags    []WriteContextRegexTag `json:"spanTags"`
	CapsuleTags []WriteContextRegexTag `json:"capsuleTags"`
}

// GetID returns the value of ID.
func (s *WriteContextRegexRule) GetID() OptRuleID {
	return s.ID
}

// GetPattern returns the value of Pattern.
func (s *WriteContextRegexRule) GetPattern() string {
	return s.Pattern
}

// GetMatchOnKey returns the value of MatchOnKey.
func (s *WriteContextRegexRule) GetMatchOnKey() bool {
	return s.MatchOnKey
}

// GetSpanTags returns the value of SpanTags.
func (s *WriteContextRegexRule) GetSpanTags() []WriteContextRegexTag {
	return s.SpanTags
}

// GetCapsuleTags returns the value of CapsuleTags.
func (s *WriteContextRegexRule) GetCapsuleTags() []WriteContextRegexTag {
	return s.CapsuleTags
}

// SetID sets the value of ID.
func (s *WriteContextRegexRule) SetID(val OptRuleID) {
	s.ID = val
}

// SetPattern sets the value of Pattern.
func (s *WriteContextRegexRule) SetPattern(val string) {
	s.Pattern = val
}

// SetMatchOnKey sets the value of MatchOnKey.
func (s *WriteContextRegexRule) SetMatchOnKey(val bool) {
	s.MatchOnKey = val
}

// SetSpanTags sets the value of SpanTags.
func (s *WriteContextRegexRule) SetSpanTags(val []WriteContextRegexTag) {
	s.SpanTags = val
}

// SetCapsuleTags sets the value of CapsuleTags.
func (s *WriteContextRegexRule) SetCapsuleTags(val []WriteContextRegexTag) {
	s.CapsuleTags = val
}

// Tag descriptor for a write context regex rule.
// Ref: #/components/schemas/WriteContextRegexTag
type WriteContextRegexTag struct {
	Name  TagNameField     `json:"name"`
	Value OptTagValueField `json:"value"`
	Type  TagTypeField     `json:"type"`
}

// GetName returns the value of Name.
func (s *WriteContextRegexTag) GetName() TagNameField {
	return s.Name
}

// GetValue returns the value of Value.
func (s *WriteContextRegexTag) GetValue() OptTagValueField {
	return s.Value
}

// GetType returns the value of Type.
func (s *WriteContextRegexTag) GetType() TagTypeField {
	return s.Type
}

// SetName sets the value of Name.
func (s *WriteContextRegexTag) SetName(val TagNameField) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *WriteContextRegexTag) SetValue(val OptTagValueField) {
	s.Value = val
}

// SetType sets the value of Type.
func (s *WriteContextRegexTag) SetType(val TagTypeField) {
	s.Type = val
}
