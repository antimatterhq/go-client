// Code generated by ogen, DO NOT EDIT.

package spec

import (
	"fmt"
	"time"
)

// SetFake set fake values.
func (s *APIKeyDomainIdentityProviderDetails) SetFake() {
}

// SetFake set fake values.
func (s *AWSServiceAccountKeyInfo) SetFake() {
	{
		{
			s.AccessKeyID = "string"
		}
	}
	{
		{
			s.SecretAccessKey = "string"
		}
	}
	{
		{
			s.KeyARN = "string"
		}
	}
}

// SetFake set fake values.
func (s *AccessLogEntry) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Time = time.Now()
		}
	}
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.Capsule.SetFake()
		}
	}
	{
		{
			s.Operation.SetFake()
		}
	}
	{
		{
			s.Session.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.CreateInfo.SetFake()
		}
	}
	{
		{
			s.OpenInfo.SetFake()
		}
	}
	{
		{
			s.ReadInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AccessLogEntryCreateInfo) SetFake() {
	{
		{
			s.WriteContext.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AccessLogEntryOpenInfo) SetFake() {
	{
		{
			s.ReadContext.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AccessLogEntryOperation) SetFake() {
	*s = AccessLogEntryOperationOpen
}

// SetFake set fake values.
func (s *AccessLogEntryReadInfo) SetFake() {
	{
		{
			s.Parameters.SetFake()
		}
	}
	{
		{
			s.ReadContext.SetFake()
		}
	}
	{
		{
			s.AllowedTags.SetFake()
		}
	}
	{
		{
			s.RedactedTags.SetFake()
		}
	}
	{
		{
			s.TokenizedTags.SetFake()
		}
	}
	{
		{
			s.ReturnedRecords = int(0)
		}
	}
	{
		{
			s.FilteredRecords = int(0)
		}
	}
}

// SetFake set fake values.
func (s *AccessLogEntryReadInfoParameters) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *AccessLogResults) SetFake() {
	{
		{
			s.Results = nil
			for i := 0; i < 0; i++ {
				var elem AccessLogEntry
				{
					elem.SetFake()
				}
				s.Results = append(s.Results, elem)
			}
		}
	}
	{
		{
			s.HasMore = true
		}
	}
}

// SetFake set fake values.
func (s *ActiveRootEncryptionKeyID) SetFake() {
	{
		{
			s.KeyID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddCapsuleLogEntryRequest) SetFake() {
	{
		{
			s.OpenToken.SetFake()
		}
	}
	{
		{
			s.Entry.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AddReadContext) SetFake() {
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.DisableReadLogging.SetFake()
		}
	}
	{
		{
			s.KeyCacheTTL.SetFake()
		}
	}
	{
		{
			s.RequiredHooks = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextRequiredHook
				{
					elem.SetFake()
				}
				s.RequiredHooks = append(s.RequiredHooks, elem)
			}
		}
	}
	{
		{
			s.ReadParameters = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextParameter
				{
					elem.SetFake()
				}
				s.ReadParameters = append(s.ReadParameters, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *AddWriteContext) SetFake() {
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *AntimatterDelegatedAWSKeyInfo) SetFake() {
	{
		{
			s.KeyARN = "string"
		}
	}
}

// SetFake set fake values.
func (s *AntimatterDelegatedGCPKeyInfo) SetFake() {
	{
		{
			s.ProjectID = "string"
		}
	}
	{
		{
			s.Location = "string"
		}
	}
	{
		{
			s.KeyringID = "string"
		}
	}
	{
		{
			s.KeyID = "string"
		}
	}
}

// SetFake set fake values.
func (s *AvailableDelegatedRootEncryptionKeyProvider) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.ShortName = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.AccountDetails = "string"
		}
	}
}

// SetFake set fake values.
func (s *AvailableRootEncryptionKeyProviders) SetFake() {
	{
		{
			s.Providers = nil
			for i := 0; i < 0; i++ {
				var elem AvailableRootEncryptionKeyProvidersProvidersItem
				{
					elem.SetFake()
				}
				s.Providers = append(s.Providers, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *AvailableRootEncryptionKeyProvidersProvidersItem) SetFake() {
	var variant AvailableDelegatedRootEncryptionKeyProvider

	{
		variant.SetFake()
	}
	s.SetAvailableDelegatedRootEncryptionKeyProvider(variant)
}

// SetFake set fake values.
func (s *AvailableServiceAccountRootEncryptionKeyProvider) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.ShortName = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *BYOKKeyInfo) SetFake() {
	{
		{
			s.Key = []byte("[]byte")
		}
	}
}

// SetFake set fake values.
func (s *Capability) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CapabilityDefinition) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Unary = true
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CapabilityDefinitionList) SetFake() {
	{
		{
			s.Capabilities = nil
			for i := 0; i < 0; i++ {
				var elem CapabilityDefinition
				{
					elem.SetFake()
				}
				s.Capabilities = append(s.Capabilities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CapabilityList) SetFake() {
	{
		{
			s.Capabilities = nil
			for i := 0; i < 0; i++ {
				var elem Capability
				{
					elem.SetFake()
				}
				s.Capabilities = append(s.Capabilities, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CapabilityName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CapabilityName(unwrapped)
}

// SetFake set fake values.
func (s *CapabilityReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CapabilityReference(unwrapped)
}

// SetFake set fake values.
func (s *CapabilityRule) SetFake() {
	{
		{
			s.MatchExpressions = nil
			for i := 0; i < 0; i++ {
				var elem CapabilityRuleMatchExpressionsItem
				{
					elem.SetFake()
				}
				s.MatchExpressions = append(s.MatchExpressions, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CapabilityRuleMatchExpressionsItem) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Operator.SetFake()
		}
	}
	{
		{
			s.Values = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Values = append(s.Values, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CapabilityRuleMatchExpressionsItemOperator) SetFake() {
	*s = CapabilityRuleMatchExpressionsItemOperatorIn
}

// SetFake set fake values.
func (s *CapsuleCreateResponse) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.DataKey = []byte("[]byte")
		}
	}
	{
		{
			s.EncryptedDataKey = []byte("[]byte")
		}
	}
	{
		{
			s.KeyEncryptionKeyID = int64(0)
		}
	}
	{
		{
			s.CreateToken.SetFake()
		}
	}
	{
		{
			s.WriteContextConfiguration.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CapsuleID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CapsuleID(unwrapped)
}

// SetFake set fake values.
func (s *CapsuleInfo) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.CapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.CapsuleTags = append(s.CapsuleTags, elem)
			}
		}
	}
	{
		{
			s.SpanTags.SetFake()
		}
	}
	{
		{
			s.Size = int64(0)
		}
	}
	{
		{
			s.Created = time.Now()
		}
	}
	{
		{
			s.PageKey.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *CapsuleList) SetFake() {
	{
		{
			s.Results = nil
			for i := 0; i < 0; i++ {
				var elem CapsuleInfo
				{
					elem.SetFake()
				}
				s.Results = append(s.Results, elem)
			}
		}
	}
	{
		{
			s.HasMore = true
		}
	}
}

// SetFake set fake values.
func (s *CapsuleOpenRequest) SetFake() {
	{
		{
			s.EncryptedDek = []byte("[]byte")
		}
	}
	{
		{
			s.KeyID = int64(0)
		}
	}
}

// SetFake set fake values.
func (s *CapsuleOpenResponse) SetFake() {
	{
		{
			s.DecryptionKey = []byte("[]byte")
		}
	}
	{
		{
			s.ReadContextConfiguration.SetFake()
		}
	}
	{
		{
			s.OpenToken.SetFake()
		}
	}
	{
		{
			s.CapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.CapsuleTags = append(s.CapsuleTags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *CapsuleOpenResponseReadContextConfiguration) SetFake() {
	{
		{
			s.DisableReadLogging.SetFake()
		}
	}
	{
		{
			s.KeyCacheTTL.SetFake()
		}
	}
	{
		{
			s.PolicyAssembly = []byte("[]byte")
		}
	}
}

// SetFake set fake values.
func (s *CapsuleOperationToken) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = CapsuleOperationToken(unwrapped)
}

// SetFake set fake values.
func (s *CapsuleSealRequest) SetFake() {
	{
		{
			s.CapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.CapsuleTags = append(s.CapsuleTags, elem)
			}
		}
	}
	{
		{
			s.SpanTags.SetFake()
		}
	}
	{
		{
			s.Size = int64(0)
		}
	}
	{
		{
			s.CreateToken.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ConflictError) SetFake() {
	{
		{
			s.ResourceType = "string"
		}
	}
	{
		{
			s.Identifier = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *CreatePeerDomain) SetFake() {
	{
		{
			s.Nicknames = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Nicknames = append(s.Nicknames, elem)
			}
		}
	}
	{
		{
			s.ImportAliasForParent.SetFake()
		}
	}
	{
		{
			s.ImportAliasForChild.SetFake()
		}
	}
	{
		{
			s.DisplayNameForParent.SetFake()
		}
	}
	{
		{
			s.DisplayNameForChild = "string"
		}
	}
	{
		{
			s.LinkAll.SetFake()
		}
	}
	{
		{
			s.LinkIdentityProviders.SetFake()
		}
	}
	{
		{
			s.LinkFacts.SetFake()
		}
	}
	{
		{
			s.LinkReadContexts.SetFake()
		}
	}
	{
		{
			s.LinkWriteContexts.SetFake()
		}
	}
	{
		{
			s.LinkCapabilities.SetFake()
		}
	}
	{
		{
			s.LinkDomainPolicy.SetFake()
		}
	}
	{
		{
			s.LinkCapsuleAccessLog.SetFake()
		}
	}
	{
		{
			s.LinkControlLog.SetFake()
		}
	}
	{
		{
			s.LinkCapsuleManifest.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DataTaggingHookInput) SetFake() {
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem DataTaggingHookInputRecordsItem
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DataTaggingHookInputRecordsItem) SetFake() {
	{
		{
			s.Elements = nil
			for i := 0; i < 0; i++ {
				var elem DataTaggingHookInputRecordsItemElementsItem
				{
					elem.SetFake()
				}
				s.Elements = append(s.Elements, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DataTaggingHookInputRecordsItemElementsItem) SetFake() {
	{
		{
			s.Content = "string"
		}
	}
	{
		{
			s.Path = "string"
		}
	}
}

// SetFake set fake values.
func (s *DataTaggingHookResponse) SetFake() {
	{
		{
			s.Version = "string"
		}
	}
	{
		{
			s.Records = nil
			for i := 0; i < 0; i++ {
				var elem DataTaggingHookResponseRecordsItem
				{
					elem.SetFake()
				}
				s.Records = append(s.Records, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DataTaggingHookResponseRecordsItem) SetFake() {
	{
		{
			s.Elements = nil
			for i := 0; i < 0; i++ {
				var elem TagSet
				{
					elem.SetFake()
				}
				s.Elements = append(s.Elements, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DeleteTags) SetFake() {
	{
		{
			s.Names = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Names = append(s.Names, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Domain) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainAddReadContextRuleOK) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainAuthenticate) SetFake() {
	{
		{
			s.Token = "string"
		}
	}
}

// SetFake set fake values.
func (s *DomainAuthenticateResponse) SetFake() {
	{
		{
			s.Token = "string"
		}
	}
	{
		{
			s.Expiry.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainContactIssueVerifyReq) SetFake() {
	{
		{
			s.AdminEmail = "string"
		}
	}
}

// SetFake set fake values.
func (s *DomainControlLogEntry) SetFake() {
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Time = time.Now()
		}
	}
	{
		{
			s.Session.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainControlLogEntryDescription) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *DomainControlLogResults) SetFake() {
	{
		{
			s.Results = nil
			for i := 0; i < 0; i++ {
				var elem DomainControlLogEntry
				{
					elem.SetFake()
				}
				s.Results = append(s.Results, elem)
			}
		}
	}
	{
		{
			s.HasMore = true
		}
	}
}

// SetFake set fake values.
func (s *DomainCreateCapsuleReq) SetFake() {
}

// SetFake set fake values.
func (s *DomainExternalRootEncryptionKeyTestReq) SetFake() {
}

// SetFake set fake values.
func (s *DomainFactList) SetFake() {
	{
		{
			s.FactTypes = nil
			for i := 0; i < 0; i++ {
				var elem FactTypeDefinition
				{
					elem.SetFake()
				}
				s.FactTypes = append(s.FactTypes, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainFlushEncryptionKeysReq) SetFake() {
}

// SetFake set fake values.
func (s *DomainGetWriteContextRegexRulesOKApplicationJSON) SetFake() {
	var unwrapped []WriteContextRegexRule
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem WriteContextRegexRule
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = DomainGetWriteContextRegexRulesOKApplicationJSON(unwrapped)
}

// SetFake set fake values.
func (s *DomainHooksList) SetFake() {
	{
		{
			s.Hooks = nil
			for i := 0; i < 0; i++ {
				var elem DomainHooksListHooksItem
				{
					elem.SetFake()
				}
				s.Hooks = append(s.Hooks, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainHooksListHooksItem) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.URL = "string"
		}
	}
	{
		{
			s.Version = "string"
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.OutputSpanTags = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OutputSpanTags = append(s.OutputSpanTags, elem)
			}
		}
	}
	{
		{
			s.OutputCapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OutputCapsuleTags = append(s.OutputCapsuleTags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = DomainID(unwrapped)
}

// SetFake set fake values.
func (s *DomainIdentityAPIKeyPrincipalParams) SetFake() {
	{
		{
			s.ApiKeyID.SetFake()
		}
	}
	{
		{
			s.Comment.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityEmailPrincipalParams) SetFake() {
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Comment.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityHostedDomainPrincipalParams) SetFake() {
	{
		{
			s.HostedDomain = "string"
		}
	}
	{
		{
			s.Comment.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityPrincipalDetails) SetFake() {
	var variant DomainIdentityAPIKeyPrincipalParams

	{
		variant.SetFake()
	}
	s.SetDomainIdentityAPIKeyPrincipalParams(variant)
}

// SetFake set fake values.
func (s *DomainIdentityProviderDetails) SetFake() {
	var variant APIKeyDomainIdentityProviderDetails

	{
		variant.SetFake()
	}
	s.SetAPIKeyDomainIdentityProviderDetails(variant)
}

// SetFake set fake values.
func (s *DomainIdentityProviderInfo) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
	{
		{
			s.SupportedPrincipals = nil
			for i := 0; i < 0; i++ {
				var elem DomainIdentityProviderPrincipalType
				{
					elem.SetFake()
				}
				s.SupportedPrincipals = append(s.SupportedPrincipals, elem)
			}
		}
	}
	{
		{
			s.Details.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityProviderList) SetFake() {
	{
		{
			s.IdentityProviders = nil
			for i := 0; i < 0; i++ {
				var elem DomainIdentityProviderInfo
				{
					elem.SetFake()
				}
				s.IdentityProviders = append(s.IdentityProviders, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityProviderPrincipalList) SetFake() {
	{
		{
			s.Principals = nil
			for i := 0; i < 0; i++ {
				var elem PrincipalSummary
				{
					elem.SetFake()
				}
				s.Principals = append(s.Principals, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityProviderPrincipalParams) SetFake() {
	{
		{
			s.Capabilities = nil
			for i := 0; i < 0; i++ {
				var elem Capability
				{
					elem.SetFake()
				}
				s.Capabilities = append(s.Capabilities, elem)
			}
		}
	}
	{
		{
			s.Details.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainIdentityProviderPrincipalType) SetFake() {
	*s = DomainIdentityProviderPrincipalTypeAPIKey
}

// SetFake set fake values.
func (s *DomainIdentityProviderType) SetFake() {
	*s = DomainIdentityProviderTypeGoogleOAuth
}

// SetFake set fake values.
func (s *DomainInsertIdentityProviderPrincipalOK) SetFake() {
	{
		{
			s.PrincipalID.SetFake()
		}
	}
	{
		{
			s.ApiKey.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainInsertWriteContextRegexRuleOK) SetFake() {
	{
		{
			s.RuleID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainPeerConfig) SetFake() {
	{
		{
			s.ExportIdentityProviders = nil
			for i := 0; i < 0; i++ {
				var elem IdentityProviderName
				{
					elem.SetFake()
				}
				s.ExportIdentityProviders = append(s.ExportIdentityProviders, elem)
			}
		}
	}
	{
		{
			s.ExportAllIdentityProviders.SetFake()
		}
	}
	{
		{
			s.ExportFacts = nil
			for i := 0; i < 0; i++ {
				var elem FactTypeName
				{
					elem.SetFake()
				}
				s.ExportFacts = append(s.ExportFacts, elem)
			}
		}
	}
	{
		{
			s.ExportAllFacts.SetFake()
		}
	}
	{
		{
			s.ExportReadContexts = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextName
				{
					elem.SetFake()
				}
				s.ExportReadContexts = append(s.ExportReadContexts, elem)
			}
		}
	}
	{
		{
			s.ExportAllReadContexts.SetFake()
		}
	}
	{
		{
			s.ExportWriteContexts = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextName
				{
					elem.SetFake()
				}
				s.ExportWriteContexts = append(s.ExportWriteContexts, elem)
			}
		}
	}
	{
		{
			s.ExportAllWriteContexts.SetFake()
		}
	}
	{
		{
			s.ExportCapabilities = nil
			for i := 0; i < 0; i++ {
				var elem CapabilityName
				{
					elem.SetFake()
				}
				s.ExportCapabilities = append(s.ExportCapabilities, elem)
			}
		}
	}
	{
		{
			s.ExportAllCapabilities.SetFake()
		}
	}
	{
		{
			s.ExportDomainPolicy.SetFake()
		}
	}
	{
		{
			s.ExportCapsuleAccessLog.SetFake()
		}
	}
	{
		{
			s.ExportControlLog.SetFake()
		}
	}
	{
		{
			s.ExportCapsuleManifest.SetFake()
		}
	}
	{
		{
			s.ExportBilling.SetFake()
		}
	}
	{
		{
			s.ExportAdminContact.SetFake()
		}
	}
	{
		{
			s.Nicknames = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Nicknames = append(s.Nicknames, elem)
			}
		}
	}
	{
		{
			s.ImportAlias.SetFake()
		}
	}
	{
		{
			s.ForwardBilling.SetFake()
		}
	}
	{
		{
			s.ForwardAdminCommunications.SetFake()
		}
	}
	{
		{
			s.ImportIdentityProviders = nil
			for i := 0; i < 0; i++ {
				var elem IdentityProviderName
				{
					elem.SetFake()
				}
				s.ImportIdentityProviders = append(s.ImportIdentityProviders, elem)
			}
		}
	}
	{
		{
			s.ImportAllIdentityProviders.SetFake()
		}
	}
	{
		{
			s.ImportFacts = nil
			for i := 0; i < 0; i++ {
				var elem FactTypeName
				{
					elem.SetFake()
				}
				s.ImportFacts = append(s.ImportFacts, elem)
			}
		}
	}
	{
		{
			s.ImportAllFacts.SetFake()
		}
	}
	{
		{
			s.ImportReadContexts = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextName
				{
					elem.SetFake()
				}
				s.ImportReadContexts = append(s.ImportReadContexts, elem)
			}
		}
	}
	{
		{
			s.ImportAllReadContexts.SetFake()
		}
	}
	{
		{
			s.ImportWriteContexts = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextName
				{
					elem.SetFake()
				}
				s.ImportWriteContexts = append(s.ImportWriteContexts, elem)
			}
		}
	}
	{
		{
			s.ImportAllWriteContexts.SetFake()
		}
	}
	{
		{
			s.ImportCapabilities = nil
			for i := 0; i < 0; i++ {
				var elem CapabilityName
				{
					elem.SetFake()
				}
				s.ImportCapabilities = append(s.ImportCapabilities, elem)
			}
		}
	}
	{
		{
			s.ImportAllCapabilities.SetFake()
		}
	}
	{
		{
			s.ImportDomainPolicy.SetFake()
		}
	}
	{
		{
			s.ImportPrecedence.SetFake()
		}
	}
	{
		{
			s.ImportCapsuleAccessLog.SetFake()
		}
	}
	{
		{
			s.ImportControlLog.SetFake()
		}
	}
	{
		{
			s.ImportCapsuleManifest.SetFake()
		}
	}
	{
		{
			s.DisplayName = "string"
		}
	}
}

// SetFake set fake values.
func (s *DomainPeerList) SetFake() {
	{
		{
			s.Peers = nil
			for i := 0; i < 0; i++ {
				var elem DomainPeerListPeersItem
				{
					elem.SetFake()
				}
				s.Peers = append(s.Peers, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainPeerListPeersItem) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Alias.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainPolicy) SetFake() {
	{
		{
			s.Rules = nil
			for i := 0; i < 0; i++ {
				var elem DomainPolicyRule
				{
					elem.SetFake()
				}
				s.Rules = append(s.Rules, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainPolicyRule) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.DomainIdentity.SetFake()
		}
	}
	{
		{
			s.Facts.SetFake()
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Operation.SetFake()
		}
	}
	{
		{
			s.Result.SetFake()
		}
	}
	{
		{
			s.Priority = int(0)
		}
	}
	{
		{
			s.Disabled = true
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
	{
		{
			s.Precedence = int(0)
		}
	}
	{
		{
			s.Invalid.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainPrivateInfo) SetFake() {
	{
		{
			s.DefaultDisplayName = "string"
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.IdentityProviders = nil
			for i := 0; i < 0; i++ {
				var elem DomainIdentityProviderInfo
				{
					elem.SetFake()
				}
				s.IdentityProviders = append(s.IdentityProviders, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainPublicInfo) SetFake() {
	{
		{
			s.DefaultDisplayName = "string"
		}
	}
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.IdentityProviders = nil
			for i := 0; i < 0; i++ {
				var elem DomainIdentityProviderInfo
				{
					elem.SetFake()
				}
				s.IdentityProviders = append(s.IdentityProviders, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainResourceSummary) SetFake() {
	{
		{
			s.Schema = nil
			for i := 0; i < 0; i++ {
				var elem DomainResourceSummarySchemaItem
				{
					elem.SetFake()
				}
				s.Schema = append(s.Schema, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainResourceSummarySchemaItem) SetFake() {
	{
		{
			s.Resource = "string"
		}
	}
	{
		{
			s.Operations = nil
			for i := 0; i < 0; i++ {
				var elem DomainResourceSummarySchemaItemOperationsItem
				{
					elem.SetFake()
				}
				s.Operations = append(s.Operations, elem)
			}
		}
	}
	{
		{
			s.PlaceholderValues.SetFake()
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *DomainResourceSummarySchemaItemOperationsItem) SetFake() {
	*s = DomainResourceSummarySchemaItemOperationsItemEdit
}

// SetFake set fake values.
func (s *DomainResourceSummarySchemaItemPlaceholderValues) SetFake() {
	var (
		elem []string
		m    map[string][]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *DomainRotateRootEncryptionKeysReq) SetFake() {
}

// SetFake set fake values.
func (s *DomainSettings) SetFake() {
	{
		{
			s.DisasterRecovery.SetFake()
		}
	}
	{
		{
			s.AdminContacts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.AdminContacts = append(s.AdminContacts, elem)
			}
		}
	}
	{
		{
			s.ActiveAdminContacts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.ActiveAdminContacts = append(s.ActiveAdminContacts, elem)
			}
		}
	}
	{
		{
			s.PendingAdminContacts = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.PendingAdminContacts = append(s.PendingAdminContacts, elem)
			}
		}
	}
	{
		{
			s.DefaultDisplayName = "string"
		}
	}
}

// SetFake set fake values.
func (s *DomainSettingsDisasterRecovery) SetFake() {
	{
		{
			s.Enable.SetFake()
		}
	}
	{
		{
			s.PublicKey.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainSettingsPatch) SetFake() {
	{
		{
			s.Patch.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainStatus) SetFake() {
	{
		{
			s.Notifications = nil
			for i := 0; i < 0; i++ {
				var elem DomainStatusNotificationsItem
				{
					elem.SetFake()
				}
				s.Notifications = append(s.Notifications, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *DomainStatusNotificationsItem) SetFake() {
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *DomainStatusNotificationsItemType) SetFake() {
	*s = DomainStatusNotificationsItemTypeInfo
}

// SetFake set fake values.
func (s *DomainTagInfoResults) SetFake() {
	{
		{
			s.Tags = nil
			for i := 0; i < 0; i++ {
				var elem TagMeta
				{
					elem.SetFake()
				}
				s.Tags = append(s.Tags, elem)
			}
		}
	}
	{
		{
			s.HasMore = true
		}
	}
}

// SetFake set fake values.
func (s *Error) SetFake() {
	{
		{
			s.TraceID = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *Fact) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Arguments = nil
			for i := 0; i < 1; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *FactID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = FactID(unwrapped)
}

// SetFake set fake values.
func (s *FactList) SetFake() {
	{
		{
			s.Facts = nil
			for i := 0; i < 0; i++ {
				var elem Fact
				{
					elem.SetFake()
				}
				s.Facts = append(s.Facts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *FactPolicyRules) SetFake() {
	var unwrapped []FactPolicyRulesItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem FactPolicyRulesItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = FactPolicyRules(unwrapped)
}

// SetFake set fake values.
func (s *FactPolicyRulesItem) SetFake() {
	{
		{
			s.Operator.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Arguments = nil
			for i := 0; i < 0; i++ {
				var elem FactPolicyRulesItemArgumentsItem
				{
					elem.SetFake()
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *FactPolicyRulesItemArgumentsItem) SetFake() {
	{
		{
			s.Any.SetFake()
		}
	}
	{
		{
			s.Source.SetFake()
		}
	}
	{
		{
			s.Capability.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FactPolicyRulesItemArgumentsItemSource) SetFake() {
	*s = FactPolicyRulesItemArgumentsItemSourceDomainIdentity
}

// SetFake set fake values.
func (s *FactPolicyRulesItemOperator) SetFake() {
	*s = FactPolicyRulesItemOperatorExists
}

// SetFake set fake values.
func (s *FactTypeDefinition) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Arguments = nil
			for i := 0; i < 1; i++ {
				var elem FactTypeDefinitionArgumentsItem
				{
					elem.SetFake()
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *FactTypeDefinitionArgumentsItem) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *FactTypeName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = FactTypeName(unwrapped)
}

// SetFake set fake values.
func (s *FactTypeReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = FactTypeReference(unwrapped)
}

// SetFake set fake values.
func (s *ForbiddenError) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *GCPServiceAccountKeyInfo) SetFake() {
	{
		{
			s.ServiceAccountCredentials = []byte("[]byte")
		}
	}
	{
		{
			s.ProjectID = "string"
		}
	}
	{
		{
			s.Location = "string"
		}
	}
	{
		{
			s.KeyringID = "string"
		}
	}
	{
		{
			s.KeyID = "string"
		}
	}
}

// SetFake set fake values.
func (s *GoogleOAuthDomainIdentityProviderDetails) SetFake() {
	{
		{
			s.ClientID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *HookName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = HookName(unwrapped)
}

// SetFake set fake values.
func (s *IdentityProviderName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = IdentityProviderName(unwrapped)
}

// SetFake set fake values.
func (s *IdentityProviderReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = IdentityProviderReference(unwrapped)
}

// SetFake set fake values.
func (s *ImportAlias) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = ImportAlias(unwrapped)
}

// SetFake set fake values.
func (s *InvalidRequestError) SetFake() {
	{
		{
			s.Field = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestAdd) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestAddValue) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *JSONPatchRequestCopy) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestMove) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestRemove) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestReplace) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestReplaceValue) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *JSONPatchRequestTst) SetFake() {
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *JSONPatchRequestTstValue) SetFake() {
	var variant string

	{
		variant = "string"
	}
	s.SetString(variant)
}

// SetFake set fake values.
func (s *KeyInfos) SetFake() {
	{
		{
			s.Description.SetFake()
		}
	}
	{
		{
			s.KeyInformation.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *KeyInfosKeyInformation) SetFake() {
	var variant AntimatterDelegatedAWSKeyInfo

	{
		variant.SetFake()
	}
	s.SetAntimatterDelegatedAWSKeyInfo(variant)
}

// SetFake set fake values.
func (s *LogEntryID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = LogEntryID(unwrapped)
}

// SetFake set fake values.
func (s *NewAccessLogEntry) SetFake() {
	{
		{
			s.Operation.SetFake()
		}
	}
	{
		{
			s.Location.SetFake()
		}
	}
	{
		{
			s.ReadInfo.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NewAccessLogEntryOperation) SetFake() {
	*s = NewAccessLogEntryOperationRead
}

// SetFake set fake values.
func (s *NewAccessLogEntryReadInfo) SetFake() {
	{
		{
			s.Parameters.SetFake()
		}
	}
	{
		{
			s.AllowedTags.SetFake()
		}
	}
	{
		{
			s.RedactedTags.SetFake()
		}
	}
	{
		{
			s.TokenizedTags.SetFake()
		}
	}
	{
		{
			s.ReturnedRecords = int(0)
		}
	}
	{
		{
			s.FilteredRecords = int(0)
		}
	}
}

// SetFake set fake values.
func (s *NewAccessLogEntryReadInfoParameters) SetFake() {
	var (
		elem string
		m    map[string]string = s.init()
	)
	for i := 0; i < 0; i++ {
		m[fmt.Sprintf("fake%d", i)] = elem
	}
}

// SetFake set fake values.
func (s *NewCapabilityDefinition) SetFake() {
	{
		{
			s.Unary = true
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *NewDomain) SetFake() {
	{
		{
			s.AdminEmail = "string"
		}
	}
	{
		{
			s.GoogleJWT.SetFake()
		}
	}
	{
		{
			s.DisplayName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NewDomainPolicyRule) SetFake() {
	{
		{
			s.DomainIdentity.SetFake()
		}
	}
	{
		{
			s.Facts.SetFake()
		}
	}
	{
		{
			s.Path = "string"
		}
	}
	{
		{
			s.Operation.SetFake()
		}
	}
	{
		{
			s.Result.SetFake()
		}
	}
	{
		{
			s.Priority = int(0)
		}
	}
	{
		{
			s.Disabled = true
		}
	}
}

// SetFake set fake values.
func (s *NewDomainResponse) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.ApiKey = "string"
		}
	}
}

// SetFake set fake values.
func (s *NewFact) SetFake() {
	{
		{
			s.Arguments = nil
			for i := 0; i < 1; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *NewFactTypeDefinition) SetFake() {
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Arguments = nil
			for i := 0; i < 1; i++ {
				var elem NewFactTypeDefinitionArgumentsItem
				{
					elem.SetFake()
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *NewFactTypeDefinitionArgumentsItem) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *NewReadContextConfigRule) SetFake() {
	{
		{
			s.MatchExpressions.SetFake()
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.TokenScope.SetFake()
		}
	}
	{
		{
			s.TokenFormat.SetFake()
		}
	}
	{
		{
			s.Facts.SetFake()
		}
	}
	{
		{
			s.Priority = int(0)
		}
	}
}

// SetFake set fake values.
func (s *NewReadContextConfigRuleAction) SetFake() {
	*s = NewReadContextConfigRuleActionDenyCapsule
}

// SetFake set fake values.
func (s *NewReadContextConfigRuleTokenFormat) SetFake() {
	*s = NewReadContextConfigRuleTokenFormatExplicit
}

// SetFake set fake values.
func (s *NewReadContextConfigRuleTokenScope) SetFake() {
	*s = NewReadContextConfigRuleTokenScopeUnique
}

// SetFake set fake values.
func (s *OptAccessLogEntryCreateInfo) SetFake() {
	var elem AccessLogEntryCreateInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAccessLogEntryOpenInfo) SetFake() {
	var elem AccessLogEntryOpenInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptAccessLogEntryReadInfo) SetFake() {
	var elem AccessLogEntryReadInfo
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCapabilityReference) SetFake() {
	var elem CapabilityReference
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptCapabilityRule) SetFake() {
	var elem CapabilityRule
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDomainID) SetFake() {
	var elem DomainID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDomainIdentityProviderDetails) SetFake() {
	var elem DomainIdentityProviderDetails
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDomainSettingsDisasterRecovery) SetFake() {
	var elem DomainSettingsDisasterRecovery
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFactPolicyRulesItemArgumentsItemSource) SetFake() {
	var elem FactPolicyRulesItemArgumentsItemSource
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptHookName) SetFake() {
	var elem HookName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptImportAlias) SetFake() {
	var elem ImportAlias
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptLogEntryID) SetFake() {
	var elem LogEntryID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNewReadContextConfigRuleTokenFormat) SetFake() {
	var elem NewReadContextConfigRuleTokenFormat
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNewReadContextConfigRuleTokenScope) SetFake() {
	var elem NewReadContextConfigRuleTokenScope
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReadContextConfigRuleTokenFormat) SetFake() {
	var elem ReadContextConfigRuleTokenFormat
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReadContextConfigRuleTokenScope) SetFake() {
	var elem ReadContextConfigRuleTokenScope
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReadContextRuleFactsItemArgumentsItemSource) SetFake() {
	var elem ReadContextRuleFactsItemArgumentsItemSource
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptReadContextRuleFactsItemOperator) SetFake() {
	var elem ReadContextRuleFactsItemOperator
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptRuleID) SetFake() {
	var elem RuleID
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTagValueField) SetFake() {
	var elem TagValueField
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptVersionConstraint) SetFake() {
	var elem VersionConstraint
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWriteContextName) SetFake() {
	var elem WriteContextName
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptWriteContextReference) SetFake() {
	var elem WriteContextReference
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *PatchRequest) SetFake() {
	var unwrapped []PatchRequestItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem PatchRequestItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = PatchRequest(unwrapped)
}

// SetFake set fake values.
func (s *PatchRequestItem) SetFake() {
	var variant JSONPatchRequestAdd

	{
		variant.SetFake()
	}
	s.SetJSONPatchRequestAdd(variant)
}

// SetFake set fake values.
func (s *PolicyRuleOperation) SetFake() {
	*s = PolicyRuleOperationEdit
}

// SetFake set fake values.
func (s *PolicyRuleResult) SetFake() {
	*s = PolicyRuleResultAllow
}

// SetFake set fake values.
func (s *PrincipalID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = PrincipalID(unwrapped)
}

// SetFake set fake values.
func (s *PrincipalInfo) SetFake() {
	{
		{
			s.PrincipalID.SetFake()
		}
	}
	{
		{
			s.Capabilities = nil
			for i := 0; i < 0; i++ {
				var elem Capability
				{
					elem.SetFake()
				}
				s.Capabilities = append(s.Capabilities, elem)
			}
		}
	}
	{
		{
			s.Details.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *PrincipalSummary) SetFake() {
	{
		{
			s.PrincipalID.SetFake()
		}
	}
	{
		{
			s.PrincipalType.SetFake()
		}
	}
	{
		{
			s.Comment = "string"
		}
	}
}

// SetFake set fake values.
func (s *ReadContextConfigRule) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.MatchExpressions.SetFake()
		}
	}
	{
		{
			s.Action.SetFake()
		}
	}
	{
		{
			s.TokenScope.SetFake()
		}
	}
	{
		{
			s.TokenFormat.SetFake()
		}
	}
	{
		{
			s.Facts.SetFake()
		}
	}
	{
		{
			s.Priority = int(0)
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReadContextConfigRuleAction) SetFake() {
	*s = ReadContextConfigRuleActionDenyCapsule
}

// SetFake set fake values.
func (s *ReadContextConfigRuleTokenFormat) SetFake() {
	*s = ReadContextConfigRuleTokenFormatExplicit
}

// SetFake set fake values.
func (s *ReadContextConfigRuleTokenScope) SetFake() {
	*s = ReadContextConfigRuleTokenScopeUnique
}

// SetFake set fake values.
func (s *ReadContextDetails) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.DisableReadLogging.SetFake()
		}
	}
	{
		{
			s.KeyCacheTTL.SetFake()
		}
	}
	{
		{
			s.RequiredHooks = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextRequiredHook
				{
					elem.SetFake()
				}
				s.RequiredHooks = append(s.RequiredHooks, elem)
			}
		}
	}
	{
		{
			s.ReadParameters = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextParameter
				{
					elem.SetFake()
				}
				s.ReadParameters = append(s.ReadParameters, elem)
			}
		}
	}
	{
		{
			s.Rules = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextConfigRule
				{
					elem.SetFake()
				}
				s.Rules = append(s.Rules, elem)
			}
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
	{
		{
			s.PolicyAssembly = []byte("[]byte")
		}
	}
}

// SetFake set fake values.
func (s *ReadContextList) SetFake() {
	{
		{
			s.ReadContexts = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextShortDetails
				{
					elem.SetFake()
				}
				s.ReadContexts = append(s.ReadContexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReadContextName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = ReadContextName(unwrapped)
}

// SetFake set fake values.
func (s *ReadContextParameter) SetFake() {
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Required.SetFake()
		}
	}
	{
		{
			s.Description.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReadContextReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = ReadContextReference(unwrapped)
}

// SetFake set fake values.
func (s *ReadContextRequiredHook) SetFake() {
	{
		{
			s.Hook.SetFake()
		}
	}
	{
		{
			s.Constraint.SetFake()
		}
	}
	{
		{
			s.WriteContext.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReadContextRuleFacts) SetFake() {
	var unwrapped []ReadContextRuleFactsItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ReadContextRuleFactsItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReadContextRuleFacts(unwrapped)
}

// SetFake set fake values.
func (s *ReadContextRuleFactsItem) SetFake() {
	{
		{
			s.Operator.SetFake()
		}
	}
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Arguments = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextRuleFactsItemArgumentsItem
				{
					elem.SetFake()
				}
				s.Arguments = append(s.Arguments, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *ReadContextRuleFactsItemArgumentsItem) SetFake() {
	{
		{
			s.Source.SetFake()
		}
	}
	{
		{
			s.Key.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReadContextRuleFactsItemArgumentsItemSource) SetFake() {
	*s = ReadContextRuleFactsItemArgumentsItemSourceDomainIdentity
}

// SetFake set fake values.
func (s *ReadContextRuleFactsItemOperator) SetFake() {
	*s = ReadContextRuleFactsItemOperatorExists
}

// SetFake set fake values.
func (s *ReadContextRuleMatchExpressions) SetFake() {
	var unwrapped []ReadContextRuleMatchExpressionsItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem ReadContextRuleMatchExpressionsItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = ReadContextRuleMatchExpressions(unwrapped)
}

// SetFake set fake values.
func (s *ReadContextRuleMatchExpressionsItem) SetFake() {
	{
		{
			s.Source.SetFake()
		}
	}
	{
		{
			s.Key = "string"
		}
	}
	{
		{
			s.Operator.SetFake()
		}
	}
	{
		{
			s.Values = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.Values = append(s.Values, elem)
			}
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ReadContextRuleMatchExpressionsItemOperator) SetFake() {
	*s = ReadContextRuleMatchExpressionsItemOperatorIn
}

// SetFake set fake values.
func (s *ReadContextRuleMatchExpressionsItemSource) SetFake() {
	*s = ReadContextRuleMatchExpressionsItemSourceDomainIdentity
}

// SetFake set fake values.
func (s *ReadContextShortDetails) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.DisableReadLogging.SetFake()
		}
	}
	{
		{
			s.KeyCacheTTL.SetFake()
		}
	}
	{
		{
			s.ReadParameters = nil
			for i := 0; i < 0; i++ {
				var elem ReadContextParameter
				{
					elem.SetFake()
				}
				s.ReadParameters = append(s.ReadParameters, elem)
			}
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *ResourceExhaustedError) SetFake() {
	{
		{
			s.ResourceType = "string"
		}
	}
	{
		{
			s.Identifier = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *ResourceNotFoundError) SetFake() {
	{
		{
			s.ResourceType = "string"
		}
	}
	{
		{
			s.Identifier = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *RootEncryptionKeyID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = RootEncryptionKeyID(unwrapped)
}

// SetFake set fake values.
func (s *RootEncryptionKeyIDResponse) SetFake() {
	{
		{
			s.RekID = "string"
		}
	}
}

// SetFake set fake values.
func (s *RootEncryptionKeyItem) SetFake() {
	{
		{
			s.Source = "string"
		}
	}
	{
		{
			s.ResourcePath = "string"
		}
	}
	{
		{
			s.RekID = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
}

// SetFake set fake values.
func (s *RootEncryptionKeyListResponse) SetFake() {
	var unwrapped []RootEncryptionKeyItem
	{
		unwrapped = nil
		for i := 0; i < 0; i++ {
			var elem RootEncryptionKeyItem
			{
				elem.SetFake()
			}
			unwrapped = append(unwrapped, elem)
		}
	}
	*s = RootEncryptionKeyListResponse(unwrapped)
}

// SetFake set fake values.
func (s *RootEncryptionKeyTestResponse) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Source = "string"
		}
	}
	{
		{
			s.ResourcePath = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
	{
		{
			s.StatusMessage = "string"
		}
	}
	{
		{
			s.LatencyMS = float64(0)
		}
	}
}

// SetFake set fake values.
func (s *RootEncryptionKeyTestResponseStatus) SetFake() {
	*s = RootEncryptionKeyTestResponseStatusHEALTHY
}

// SetFake set fake values.
func (s *RotateKeyEncryptionKeyResponse) SetFake() {
	{
		{
			s.HasMore = true
		}
	}
}

// SetFake set fake values.
func (s *RuleID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = RuleID(unwrapped)
}

// SetFake set fake values.
func (s *RuleReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = RuleReference(unwrapped)
}

// SetFake set fake values.
func (s *SessionID) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = SessionID(unwrapped)
}

// SetFake set fake values.
func (s *StarredDomainAddReq) SetFake() {
}

// SetFake set fake values.
func (s *StarredDomainList) SetFake() {
	{
		{
			s.Domains = nil
			for i := 0; i < 0; i++ {
				var elem DomainID
				{
					elem.SetFake()
				}
				s.Domains = append(s.Domains, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *Tag) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
	{
		{
			s.Source = "string"
		}
	}
	{
		{
			s.HookVersion.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TagMeta) SetFake() {
	{
		{
			s.Name = "string"
		}
	}
}

// SetFake set fake values.
func (s *TagNameField) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = TagNameField(unwrapped)
}

// SetFake set fake values.
func (s *TagSet) SetFake() {
	{
		{
			s.CapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.CapsuleTags = append(s.CapsuleTags, elem)
			}
		}
	}
	{
		{
			s.SpanTags = nil
			for i := 0; i < 0; i++ {
				var elem TagSetSpanTagsItem
				{
					elem.SetFake()
				}
				s.SpanTags = append(s.SpanTags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *TagSetSpanTagsItem) SetFake() {
	{
		{
			s.Start = int64(0)
		}
	}
	{
		{
			s.End = int64(0)
		}
	}
	{
		{
			s.Tags = nil
			for i := 0; i < 0; i++ {
				var elem Tag
				{
					elem.SetFake()
				}
				s.Tags = append(s.Tags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *TagSummary) SetFake() {
	{
		{
			s.UniqueTags = nil
			for i := 0; i < 0; i++ {
				var elem TagSummaryUniqueTagsItem
				{
					elem.SetFake()
				}
				s.UniqueTags = append(s.UniqueTags, elem)
			}
		}
	}
	{
		{
			s.ElidedTags = nil
			for i := 0; i < 0; i++ {
				var elem TagSummaryElidedTagsItem
				{
					elem.SetFake()
				}
				s.ElidedTags = append(s.ElidedTags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *TagSummaryElidedTagsItem) SetFake() {
	{
		{
			s.TagName = "string"
		}
	}
	{
		{
			s.NumUniqueTags = int(0)
		}
	}
	{
		{
			s.TotalOccurrences = int(0)
		}
	}
}

// SetFake set fake values.
func (s *TagSummaryUniqueTagsItem) SetFake() {
	{
		{
			s.Tag.SetFake()
		}
	}
	{
		{
			s.Occurrences = int(0)
		}
	}
}

// SetFake set fake values.
func (s *TagTypeField) SetFake() {
	*s = TagTypeFieldString
}

// SetFake set fake values.
func (s *TagValueField) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = TagValueField(unwrapped)
}

// SetFake set fake values.
func (s *UnauthorizedError) SetFake() {
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *UpsertSpanTagsRequest) SetFake() {
	{
		{
			s.Summary.SetFake()
		}
	}
	{
		{
			s.CreateToken.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *VerifyContactResponse) SetFake() {
	{
		{
			s.Domain.SetFake()
		}
	}
	{
		{
			s.Email = "string"
		}
	}
	{
		{
			s.Message = "string"
		}
	}
}

// SetFake set fake values.
func (s *VersionConstraint) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = VersionConstraint(unwrapped)
}

// SetFake set fake values.
func (s *WriteContextConfigInfo) SetFake() {
	{
		{
			s.KeyReuseTTL.SetFake()
		}
	}
	{
		{
			s.DefaultCapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextRegexTag
				{
					elem.SetFake()
				}
				s.DefaultCapsuleTags = append(s.DefaultCapsuleTags, elem)
			}
		}
	}
	{
		{
			s.RequiredHooks = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextConfigInfoRequiredHooksItem
				{
					elem.SetFake()
				}
				s.RequiredHooks = append(s.RequiredHooks, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *WriteContextConfigInfoRequiredHooksItem) SetFake() {
	{
		{
			s.Hook.SetFake()
		}
	}
	{
		{
			s.Constraint.SetFake()
		}
	}
	{
		{
			s.Mode.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WriteContextConfigInfoRequiredHooksItemMode) SetFake() {
	*s = WriteContextConfigInfoRequiredHooksItemModeSync
}

// SetFake set fake values.
func (s *WriteContextDetails) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Summary = "string"
		}
	}
	{
		{
			s.Description = "string"
		}
	}
	{
		{
			s.Config.SetFake()
		}
	}
	{
		{
			s.Imported = true
		}
	}
	{
		{
			s.SourceDomainID.SetFake()
		}
	}
	{
		{
			s.SourceDomainName.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *WriteContextList) SetFake() {
	{
		{
			s.WriteContexts = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextDetails
				{
					elem.SetFake()
				}
				s.WriteContexts = append(s.WriteContexts, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *WriteContextName) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = WriteContextName(unwrapped)
}

// SetFake set fake values.
func (s *WriteContextReference) SetFake() {
	var unwrapped string
	{
		unwrapped = "string"
	}
	*s = WriteContextReference(unwrapped)
}

// SetFake set fake values.
func (s *WriteContextRegexRule) SetFake() {
	{
		{
			s.ID.SetFake()
		}
	}
	{
		{
			s.Pattern = "string"
		}
	}
	{
		{
			s.MatchOnKey = true
		}
	}
	{
		{
			s.SpanTags = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextRegexTag
				{
					elem.SetFake()
				}
				s.SpanTags = append(s.SpanTags, elem)
			}
		}
	}
	{
		{
			s.CapsuleTags = nil
			for i := 0; i < 0; i++ {
				var elem WriteContextRegexTag
				{
					elem.SetFake()
				}
				s.CapsuleTags = append(s.CapsuleTags, elem)
			}
		}
	}
}

// SetFake set fake values.
func (s *WriteContextRegexTag) SetFake() {
	{
		{
			s.Name.SetFake()
		}
	}
	{
		{
			s.Value.SetFake()
		}
	}
	{
		{
			s.Type.SetFake()
		}
	}
}
