// Code generated by ogen, DO NOT EDIT.

package spec

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CapsuleGetByIdParams is parameters of capsuleGetById operation.
type CapsuleGetByIdParams struct {
	CapsuleID CapsuleID
}

func unpackCapsuleGetByIdParams(packed middleware.Parameters) (params CapsuleGetByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeCapsuleGetByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params CapsuleGetByIdParams, _ error) {
	// Decode path: capsuleID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainAddAccessLogEntryParams is parameters of domainAddAccessLogEntry operation.
type DomainAddAccessLogEntryParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainAddAccessLogEntryParams(packed middleware.Parameters) (params DomainAddAccessLogEntryParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainAddAccessLogEntryParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainAddAccessLogEntryParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainAddExternalRootEncryptionKeyParams is parameters of domainAddExternalRootEncryptionKey operation.
type DomainAddExternalRootEncryptionKeyParams struct {
	DomainID DomainID
}

func unpackDomainAddExternalRootEncryptionKeyParams(packed middleware.Parameters) (params DomainAddExternalRootEncryptionKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainAddExternalRootEncryptionKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainAddExternalRootEncryptionKeyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainAddReadContextRuleParams is parameters of domainAddReadContextRule operation.
type DomainAddReadContextRuleParams struct {
	DomainID    DomainID
	ContextName ReadContextName
}

func unpackDomainAddReadContextRuleParams(packed middleware.Parameters) (params DomainAddReadContextRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	return params
}

func decodeDomainAddReadContextRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainAddReadContextRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainAuthenticateParams is parameters of domainAuthenticate operation.
type DomainAuthenticateParams struct {
	DomainID             DomainID
	IdentityProviderName OptIdentityProviderName
	TokenExchange        OptBool
}

func unpackDomainAuthenticateParams(packed middleware.Parameters) (params DomainAuthenticateParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IdentityProviderName = v.(OptIdentityProviderName)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tokenExchange",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TokenExchange = v.(OptBool)
		}
	}
	return params
}

func decodeDomainAuthenticateParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainAuthenticateParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: identityProviderName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "identityProviderName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIdentityProviderNameVal IdentityProviderName
				if err := func() error {
					var paramsDotIdentityProviderNameValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIdentityProviderNameValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotIdentityProviderNameVal = IdentityProviderName(paramsDotIdentityProviderNameValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName.SetTo(paramsDotIdentityProviderNameVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.IdentityProviderName.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tokenExchange.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tokenExchange",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenExchangeVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotTokenExchangeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TokenExchange.SetTo(paramsDotTokenExchangeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tokenExchange",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainContactIssueVerifyParams is parameters of domainContactIssueVerify operation.
type DomainContactIssueVerifyParams struct {
	DomainID DomainID
}

func unpackDomainContactIssueVerifyParams(packed middleware.Parameters) (params DomainContactIssueVerifyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainContactIssueVerifyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainContactIssueVerifyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainContactVerifyParams is parameters of domainContactVerify operation.
type DomainContactVerifyParams struct {
	DomainID DomainID
	// Security token issued with verification request.
	Token OptString
	// Google-issued JWT carrying the verification email address.
	GoogleJWT OptString
	// Email address to be tested against the supplied token.
	Address string
}

func unpackDomainContactVerifyParams(packed middleware.Parameters) (params DomainContactVerifyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Token = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "googleJWT",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.GoogleJWT = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "address",
			In:   "query",
		}
		params.Address = packed[key].(string)
	}
	return params
}

func decodeDomainContactVerifyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainContactVerifyParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: token.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTokenVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTokenVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Token.SetTo(paramsDotTokenVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: googleJWT.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "googleJWT",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGoogleJWTVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGoogleJWTVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GoogleJWT.SetTo(paramsDotGoogleJWTVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "googleJWT",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: address.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "address",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Address = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "address",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainCreateCapsuleParams is parameters of domainCreateCapsule operation.
type DomainCreateCapsuleParams struct {
	DomainID     DomainID
	WriteContext WriteContextReference
}

func unpackDomainCreateCapsuleParams(packed middleware.Parameters) (params DomainCreateCapsuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "writeContext",
			In:   "query",
		}
		params.WriteContext = packed[key].(WriteContextReference)
	}
	return params
}

func decodeDomainCreateCapsuleParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainCreateCapsuleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: writeContext.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "writeContext",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWriteContextVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotWriteContextVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.WriteContext = WriteContextReference(paramsDotWriteContextVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.WriteContext.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "writeContext",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainCreatePeerDomainParams is parameters of domainCreatePeerDomain operation.
type DomainCreatePeerDomainParams struct {
	DomainID DomainID
}

func unpackDomainCreatePeerDomainParams(packed middleware.Parameters) (params DomainCreatePeerDomainParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainCreatePeerDomainParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainCreatePeerDomainParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainCreatePolicyRuleParams is parameters of domainCreatePolicyRule operation.
type DomainCreatePolicyRuleParams struct {
	DomainID DomainID
}

func unpackDomainCreatePolicyRuleParams(packed middleware.Parameters) (params DomainCreatePolicyRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainCreatePolicyRuleParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainCreatePolicyRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDataTaggingHookInvokeParams is parameters of domainDataTaggingHookInvoke operation.
type DomainDataTaggingHookInvokeParams struct {
	DomainID     DomainID
	HookName     HookName
	WriteContext OptWriteContextReference
}

func unpackDomainDataTaggingHookInvokeParams(packed middleware.Parameters) (params DomainDataTaggingHookInvokeParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "hookName",
			In:   "path",
		}
		params.HookName = packed[key].(HookName)
	}
	{
		key := middleware.ParameterKey{
			Name: "writeContext",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.WriteContext = v.(OptWriteContextReference)
		}
	}
	return params
}

func decodeDomainDataTaggingHookInvokeParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDataTaggingHookInvokeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: hookName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "hookName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotHookNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotHookNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.HookName = HookName(paramsDotHookNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.HookName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hookName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: writeContext.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "writeContext",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotWriteContextVal WriteContextReference
				if err := func() error {
					var paramsDotWriteContextValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotWriteContextValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotWriteContextVal = WriteContextReference(paramsDotWriteContextValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.WriteContext.SetTo(paramsDotWriteContextVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.WriteContext.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "writeContext",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteCapabilityParams is parameters of domainDeleteCapability operation.
type DomainDeleteCapabilityParams struct {
	DomainID DomainID
	// The name for this capability, like "admin".
	Capability CapabilityName
}

func unpackDomainDeleteCapabilityParams(packed middleware.Parameters) (params DomainDeleteCapabilityParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capability",
			In:   "path",
		}
		params.Capability = packed[key].(CapabilityName)
	}
	return params
}

func decodeDomainDeleteCapabilityParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteCapabilityParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capability.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capability",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapabilityVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapabilityVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Capability = CapabilityName(paramsDotCapabilityVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Capability.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capability",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteCapsuleTagsParams is parameters of domainDeleteCapsuleTags operation.
type DomainDeleteCapsuleTagsParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainDeleteCapsuleTagsParams(packed middleware.Parameters) (params DomainDeleteCapsuleTagsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainDeleteCapsuleTagsParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteCapsuleTagsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteExternalRootEncryptionKeyParams is parameters of domainDeleteExternalRootEncryptionKey operation.
type DomainDeleteExternalRootEncryptionKeyParams struct {
	DomainID            DomainID
	RootEncryptionKeyID RootEncryptionKeyID
}

func unpackDomainDeleteExternalRootEncryptionKeyParams(packed middleware.Parameters) (params DomainDeleteExternalRootEncryptionKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "rootEncryptionKeyID",
			In:   "path",
		}
		params.RootEncryptionKeyID = packed[key].(RootEncryptionKeyID)
	}
	return params
}

func decodeDomainDeleteExternalRootEncryptionKeyParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteExternalRootEncryptionKeyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rootEncryptionKeyID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rootEncryptionKeyID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRootEncryptionKeyIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRootEncryptionKeyIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RootEncryptionKeyID = RootEncryptionKeyID(paramsDotRootEncryptionKeyIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RootEncryptionKeyID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rootEncryptionKeyID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteFactByIDParams is parameters of domainDeleteFactByID operation.
type DomainDeleteFactByIDParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeName
	// The ID for the fact to be deleted.
	FactID FactID
}

func unpackDomainDeleteFactByIDParams(packed middleware.Parameters) (params DomainDeleteFactByIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeName)
	}
	{
		key := middleware.ParameterKey{
			Name: "factID",
			In:   "path",
		}
		params.FactID = packed[key].(FactID)
	}
	return params
}

func decodeDomainDeleteFactByIDParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainDeleteFactByIDParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeName(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactID = FactID(paramsDotFactIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteFactTypeParams is parameters of domainDeleteFactType operation.
type DomainDeleteFactTypeParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeName
	// The fact type again, to confirm you really want to delete it.
	Confirm FactTypeName
}

func unpackDomainDeleteFactTypeParams(packed middleware.Parameters) (params DomainDeleteFactTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeName)
	}
	{
		key := middleware.ParameterKey{
			Name: "confirm",
			In:   "query",
		}
		params.Confirm = packed[key].(FactTypeName)
	}
	return params
}

func decodeDomainDeleteFactTypeParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteFactTypeParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeName(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: confirm.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "confirm",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotConfirmVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotConfirmVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Confirm = FactTypeName(paramsDotConfirmVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Confirm.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "confirm",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteIdentityProviderParams is parameters of domainDeleteIdentityProvider operation.
type DomainDeleteIdentityProviderParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
}

func unpackDomainDeleteIdentityProviderParams(packed middleware.Parameters) (params DomainDeleteIdentityProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	return params
}

func decodeDomainDeleteIdentityProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteIdentityProviderParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteIdentityProviderPrincipalParams is parameters of domainDeleteIdentityProviderPrincipal operation.
type DomainDeleteIdentityProviderPrincipalParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
	PrincipalID          PrincipalID
}

func unpackDomainDeleteIdentityProviderPrincipalParams(packed middleware.Parameters) (params DomainDeleteIdentityProviderPrincipalParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	{
		key := middleware.ParameterKey{
			Name: "principalID",
			In:   "path",
		}
		params.PrincipalID = packed[key].(PrincipalID)
	}
	return params
}

func decodeDomainDeleteIdentityProviderPrincipalParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainDeleteIdentityProviderPrincipalParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: principalID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "principalID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPrincipalIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrincipalIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PrincipalID = PrincipalID(paramsDotPrincipalIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PrincipalID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "principalID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeletePeerParams is parameters of domainDeletePeer operation.
type DomainDeletePeerParams struct {
	DomainID     DomainID
	PeerDomainID DomainID
}

func unpackDomainDeletePeerParams(packed middleware.Parameters) (params DomainDeletePeerParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "peerDomainID",
			In:   "path",
		}
		params.PeerDomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainDeletePeerParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeletePeerParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: peerDomainID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "peerDomainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPeerDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPeerDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PeerDomainID = DomainID(paramsDotPeerDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PeerDomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "peerDomainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeletePolicyRuleParams is parameters of domainDeletePolicyRule operation.
type DomainDeletePolicyRuleParams struct {
	DomainID DomainID
	RuleID   RuleID
}

func unpackDomainDeletePolicyRuleParams(packed middleware.Parameters) (params DomainDeletePolicyRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(RuleID)
	}
	return params
}

func decodeDomainDeletePolicyRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeletePolicyRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: ruleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RuleID = RuleID(paramsDotRuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteReadContextParams is parameters of domainDeleteReadContext operation.
type DomainDeleteReadContextParams struct {
	DomainID    DomainID
	ContextName ReadContextName
}

func unpackDomainDeleteReadContextParams(packed middleware.Parameters) (params DomainDeleteReadContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	return params
}

func decodeDomainDeleteReadContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteReadContextParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteReadContextRuleParams is parameters of domainDeleteReadContextRule operation.
type DomainDeleteReadContextRuleParams struct {
	DomainID    DomainID
	ContextName ReadContextName
	RuleID      RuleID
}

func unpackDomainDeleteReadContextRuleParams(packed middleware.Parameters) (params DomainDeleteReadContextRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(RuleID)
	}
	return params
}

func decodeDomainDeleteReadContextRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainDeleteReadContextRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: ruleID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RuleID = RuleID(paramsDotRuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteWriteContextParams is parameters of domainDeleteWriteContext operation.
type DomainDeleteWriteContextParams struct {
	DomainID    DomainID
	ContextName WriteContextName
}

func unpackDomainDeleteWriteContextParams(packed middleware.Parameters) (params DomainDeleteWriteContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	return params
}

func decodeDomainDeleteWriteContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDeleteWriteContextParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDeleteWriteContextRegexRuleParams is parameters of domainDeleteWriteContextRegexRule operation.
type DomainDeleteWriteContextRegexRuleParams struct {
	DomainID    DomainID
	ContextName WriteContextName
	RuleID      RuleID
}

func unpackDomainDeleteWriteContextRegexRuleParams(packed middleware.Parameters) (params DomainDeleteWriteContextRegexRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(RuleID)
	}
	return params
}

func decodeDomainDeleteWriteContextRegexRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainDeleteWriteContextRegexRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: ruleID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RuleID = RuleID(paramsDotRuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainDescribeWriteContextParams is parameters of domainDescribeWriteContext operation.
type DomainDescribeWriteContextParams struct {
	DomainID    DomainID
	ContextName WriteContextReference
}

func unpackDomainDescribeWriteContextParams(packed middleware.Parameters) (params DomainDescribeWriteContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextReference)
	}
	return params
}

func decodeDomainDescribeWriteContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainDescribeWriteContextParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextReference(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainExternalRootEncryptionKeyTestParams is parameters of domainExternalRootEncryptionKeyTest operation.
type DomainExternalRootEncryptionKeyTestParams struct {
	DomainID            DomainID
	RootEncryptionKeyID RootEncryptionKeyID
}

func unpackDomainExternalRootEncryptionKeyTestParams(packed middleware.Parameters) (params DomainExternalRootEncryptionKeyTestParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "rootEncryptionKeyID",
			In:   "path",
		}
		params.RootEncryptionKeyID = packed[key].(RootEncryptionKeyID)
	}
	return params
}

func decodeDomainExternalRootEncryptionKeyTestParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainExternalRootEncryptionKeyTestParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rootEncryptionKeyID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rootEncryptionKeyID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRootEncryptionKeyIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRootEncryptionKeyIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RootEncryptionKeyID = RootEncryptionKeyID(paramsDotRootEncryptionKeyIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RootEncryptionKeyID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rootEncryptionKeyID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainFlushEncryptionKeysParams is parameters of domainFlushEncryptionKeys operation.
type DomainFlushEncryptionKeysParams struct {
	DomainID DomainID
}

func unpackDomainFlushEncryptionKeysParams(packed middleware.Parameters) (params DomainFlushEncryptionKeysParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainFlushEncryptionKeysParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainFlushEncryptionKeysParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetActiveExternalRootEncryptionKeyParams is parameters of domainGetActiveExternalRootEncryptionKey operation.
type DomainGetActiveExternalRootEncryptionKeyParams struct {
	DomainID DomainID
}

func unpackDomainGetActiveExternalRootEncryptionKeyParams(packed middleware.Parameters) (params DomainGetActiveExternalRootEncryptionKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetActiveExternalRootEncryptionKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetActiveExternalRootEncryptionKeyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetCapabilitiesParams is parameters of domainGetCapabilities operation.
type DomainGetCapabilitiesParams struct {
	DomainID DomainID
}

func unpackDomainGetCapabilitiesParams(packed middleware.Parameters) (params DomainGetCapabilitiesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetCapabilitiesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetCapabilitiesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetCapabilityParams is parameters of domainGetCapability operation.
type DomainGetCapabilityParams struct {
	DomainID DomainID
	// The name for this capability, like "admin".
	Capability CapabilityReference
}

func unpackDomainGetCapabilityParams(packed middleware.Parameters) (params DomainGetCapabilityParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capability",
			In:   "path",
		}
		params.Capability = packed[key].(CapabilityReference)
	}
	return params
}

func decodeDomainGetCapabilityParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetCapabilityParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capability.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capability",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapabilityVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapabilityVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Capability = CapabilityReference(paramsDotCapabilityVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Capability.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capability",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetCapsuleInfoParams is parameters of domainGetCapsuleInfo operation.
type DomainGetCapsuleInfoParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainGetCapsuleInfoParams(packed middleware.Parameters) (params DomainGetCapsuleInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainGetCapsuleInfoParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetCapsuleInfoParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetExternalRootEncryptionKeyProvidersParams is parameters of domainGetExternalRootEncryptionKeyProviders operation.
type DomainGetExternalRootEncryptionKeyProvidersParams struct {
	DomainID DomainID
}

func unpackDomainGetExternalRootEncryptionKeyProvidersParams(packed middleware.Parameters) (params DomainGetExternalRootEncryptionKeyProvidersParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetExternalRootEncryptionKeyProvidersParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetExternalRootEncryptionKeyProvidersParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetFactByIDParams is parameters of domainGetFactByID operation.
type DomainGetFactByIDParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeReference
	// The ID for the fact to be retrieved.
	FactID FactID
}

func unpackDomainGetFactByIDParams(packed middleware.Parameters) (params DomainGetFactByIDParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeReference)
	}
	{
		key := middleware.ParameterKey{
			Name: "factID",
			In:   "path",
		}
		params.FactID = packed[key].(FactID)
	}
	return params
}

func decodeDomainGetFactByIDParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainGetFactByIDParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeReference(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactID = FactID(paramsDotFactIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetFactTypeParams is parameters of domainGetFactType operation.
type DomainGetFactTypeParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeReference
}

func unpackDomainGetFactTypeParams(packed middleware.Parameters) (params DomainGetFactTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeReference)
	}
	return params
}

func decodeDomainGetFactTypeParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetFactTypeParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeReference(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetIdentityProviderParams is parameters of domainGetIdentityProvider operation.
type DomainGetIdentityProviderParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderReference
}

func unpackDomainGetIdentityProviderParams(packed middleware.Parameters) (params DomainGetIdentityProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderReference)
	}
	return params
}

func decodeDomainGetIdentityProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetIdentityProviderParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderReference(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetIdentityProviderPrincipalParams is parameters of domainGetIdentityProviderPrincipal operation.
type DomainGetIdentityProviderPrincipalParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
	PrincipalID          PrincipalID
}

func unpackDomainGetIdentityProviderPrincipalParams(packed middleware.Parameters) (params DomainGetIdentityProviderPrincipalParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	{
		key := middleware.ParameterKey{
			Name: "principalID",
			In:   "path",
		}
		params.PrincipalID = packed[key].(PrincipalID)
	}
	return params
}

func decodeDomainGetIdentityProviderPrincipalParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainGetIdentityProviderPrincipalParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: principalID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "principalID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPrincipalIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrincipalIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PrincipalID = PrincipalID(paramsDotPrincipalIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PrincipalID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "principalID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetIdentityProviderPrincipalsParams is parameters of domainGetIdentityProviderPrincipals operation.
type DomainGetIdentityProviderPrincipalsParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
}

func unpackDomainGetIdentityProviderPrincipalsParams(packed middleware.Parameters) (params DomainGetIdentityProviderPrincipalsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	return params
}

func decodeDomainGetIdentityProviderPrincipalsParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetIdentityProviderPrincipalsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetPeerParams is parameters of domainGetPeer operation.
type DomainGetPeerParams struct {
	DomainID DomainID
	Nickname OptString
	Alias    OptImportAlias
}

func unpackDomainGetPeerParams(packed middleware.Parameters) (params DomainGetPeerParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "nickname",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Nickname = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "alias",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Alias = v.(OptImportAlias)
		}
	}
	return params
}

func decodeDomainGetPeerParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetPeerParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: nickname.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "nickname",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNicknameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNicknameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Nickname.SetTo(paramsDotNicknameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "nickname",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: alias.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "alias",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAliasVal ImportAlias
				if err := func() error {
					var paramsDotAliasValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAliasValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAliasVal = ImportAlias(paramsDotAliasValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.Alias.SetTo(paramsDotAliasVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Alias.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "alias",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetPeerConfigParams is parameters of domainGetPeerConfig operation.
type DomainGetPeerConfigParams struct {
	DomainID     DomainID
	PeerDomainID DomainID
}

func unpackDomainGetPeerConfigParams(packed middleware.Parameters) (params DomainGetPeerConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "peerDomainID",
			In:   "path",
		}
		params.PeerDomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetPeerConfigParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetPeerConfigParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: peerDomainID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "peerDomainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPeerDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPeerDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PeerDomainID = DomainID(paramsDotPeerDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PeerDomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "peerDomainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetPrivateInfoParams is parameters of domainGetPrivateInfo operation.
type DomainGetPrivateInfoParams struct {
	DomainID DomainID
}

func unpackDomainGetPrivateInfoParams(packed middleware.Parameters) (params DomainGetPrivateInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetPrivateInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetPrivateInfoParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetPublicInfoParams is parameters of domainGetPublicInfo operation.
type DomainGetPublicInfoParams struct {
	DomainID DomainID
}

func unpackDomainGetPublicInfoParams(packed middleware.Parameters) (params DomainGetPublicInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetPublicInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetPublicInfoParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetReadContextParams is parameters of domainGetReadContext operation.
type DomainGetReadContextParams struct {
	DomainID    DomainID
	ContextName ReadContextReference
	// Optionally includes the policy bundle in the response.
	IncludePolicyBundle OptBool
}

func unpackDomainGetReadContextParams(packed middleware.Parameters) (params DomainGetReadContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextReference)
	}
	{
		key := middleware.ParameterKey{
			Name: "includePolicyBundle",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludePolicyBundle = v.(OptBool)
		}
	}
	return params
}

func decodeDomainGetReadContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetReadContextParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextReference(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: includePolicyBundle.
	{
		val := bool(false)
		params.IncludePolicyBundle.SetTo(val)
	}
	// Decode query: includePolicyBundle.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "includePolicyBundle",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludePolicyBundleVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIncludePolicyBundleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludePolicyBundle.SetTo(paramsDotIncludePolicyBundleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "includePolicyBundle",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetSettingsParams is parameters of domainGetSettings operation.
type DomainGetSettingsParams struct {
	DomainID DomainID
}

func unpackDomainGetSettingsParams(packed middleware.Parameters) (params DomainGetSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetSettingsParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetSettingsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetStatusParams is parameters of domainGetStatus operation.
type DomainGetStatusParams struct {
	DomainID DomainID
}

func unpackDomainGetStatusParams(packed middleware.Parameters) (params DomainGetStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetStatusParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetTagInfoParams is parameters of domainGetTagInfo operation.
type DomainGetTagInfoParams struct {
	DomainID DomainID
}

func unpackDomainGetTagInfoParams(packed middleware.Parameters) (params DomainGetTagInfoParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainGetTagInfoParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainGetTagInfoParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainGetWriteContextRegexRulesParams is parameters of domainGetWriteContextRegexRules operation.
type DomainGetWriteContextRegexRulesParams struct {
	DomainID    DomainID
	ContextName WriteContextName
}

func unpackDomainGetWriteContextRegexRulesParams(packed middleware.Parameters) (params DomainGetWriteContextRegexRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	return params
}

func decodeDomainGetWriteContextRegexRulesParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainGetWriteContextRegexRulesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainInsertIdentityProviderPrincipalParams is parameters of domainInsertIdentityProviderPrincipal operation.
type DomainInsertIdentityProviderPrincipalParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
}

func unpackDomainInsertIdentityProviderPrincipalParams(packed middleware.Parameters) (params DomainInsertIdentityProviderPrincipalParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	return params
}

func decodeDomainInsertIdentityProviderPrincipalParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainInsertIdentityProviderPrincipalParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainInsertWriteContextRegexRuleParams is parameters of domainInsertWriteContextRegexRule operation.
type DomainInsertWriteContextRegexRuleParams struct {
	DomainID    DomainID
	ContextName WriteContextName
}

func unpackDomainInsertWriteContextRegexRuleParams(packed middleware.Parameters) (params DomainInsertWriteContextRegexRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	return params
}

func decodeDomainInsertWriteContextRegexRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainInsertWriteContextRegexRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListCapsulesParams is parameters of domainListCapsules operation.
type DomainListCapsulesParams struct {
	DomainID DomainID
	// The earlier date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the end of the result set.
	StartDate OptDateTime
	// The later date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the beginning of the result set. If not specified, defaults to the current
	// time.
	EndDate OptDateTime
	// The number of results you would like returned. You may get more or less than this number, and it
	// does not indicate anything about the availability of more records. Consult the returned "has_more"
	// field to determine if there are more records available matching the filters and time range.
	NumResults OptInt
	// The span tags you would like to filter on. This accepts a tag key only and will return all span
	// tag key  results matching the provided tag key. If not specified, this field is ignored.
	SpanTags OptString
	// The capsule field you would like to sort on. This accepts the field only and will return results
	// ordered on the provided field. If not specified, this field is ignored.
	SortOn OptDomainListCapsulesSortOn
	// The pagination key you would like to retrieve results after. This accepts the pagination key only
	// and works in combination with the sort_on parameter to return records strictly after the provided
	// pagination key. If not  specified, this field is ignored.
	StartAfter OptString
	// The defines whether a sorted result should be order ascending. This accepts a boolean value and
	// when true will work in combination with the sort_on and start_after parameters to return values in
	// ascending order. If not  specified, this field is ignored and treated as false.
	Ascending OptBool
}

func unpackDomainListCapsulesParams(packed middleware.Parameters) (params DomainListCapsulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "num_results",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NumResults = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "span_tags",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SpanTags = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sort_on",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortOn = v.(OptDomainListCapsulesSortOn)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_after",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartAfter = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "ascending",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Ascending = v.(OptBool)
		}
	}
	return params
}

func decodeDomainListCapsulesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListCapsulesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: start_date.
	{
		val, _ := json.DecodeDateTime(jx.DecodeStr("\"1970-01-01T01:01:01Z\""))
		params.StartDate.SetTo(val)
	}
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDate.SetTo(paramsDotStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: num_results.
	{
		val := int(100)
		params.NumResults.SetTo(val)
	}
	// Decode query: num_results.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num_results",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNumResultsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotNumResultsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NumResults.SetTo(paramsDotNumResultsVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.NumResults.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           10,
							MaxSet:        true,
							Max:           2000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num_results",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: span_tags.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "span_tags",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSpanTagsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSpanTagsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SpanTags.SetTo(paramsDotSpanTagsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "span_tags",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sort_on.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sort_on",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortOnVal DomainListCapsulesSortOn
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortOnVal = DomainListCapsulesSortOn(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortOn.SetTo(paramsDotSortOnVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortOn.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sort_on",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_after.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_after",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartAfterVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStartAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartAfter.SetTo(paramsDotStartAfterVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_after",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: ascending.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ascending",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAscendingVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotAscendingVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Ascending.SetTo(paramsDotAscendingVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ascending",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListExternalRootEncryptionKeyParams is parameters of domainListExternalRootEncryptionKey operation.
type DomainListExternalRootEncryptionKeyParams struct {
	DomainID DomainID
}

func unpackDomainListExternalRootEncryptionKeyParams(packed middleware.Parameters) (params DomainListExternalRootEncryptionKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListExternalRootEncryptionKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListExternalRootEncryptionKeyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListFactTypesParams is parameters of domainListFactTypes operation.
type DomainListFactTypesParams struct {
	DomainID DomainID
}

func unpackDomainListFactTypesParams(packed middleware.Parameters) (params DomainListFactTypesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListFactTypesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListFactTypesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListFactsParams is parameters of domainListFacts operation.
type DomainListFactsParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeReference
}

func unpackDomainListFactsParams(packed middleware.Parameters) (params DomainListFactsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeReference)
	}
	return params
}

func decodeDomainListFactsParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainListFactsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeReference(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListHooksParams is parameters of domainListHooks operation.
type DomainListHooksParams struct {
	DomainID DomainID
}

func unpackDomainListHooksParams(packed middleware.Parameters) (params DomainListHooksParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListHooksParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListHooksParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListIdentityProvidersParams is parameters of domainListIdentityProviders operation.
type DomainListIdentityProvidersParams struct {
	DomainID DomainID
}

func unpackDomainListIdentityProvidersParams(packed middleware.Parameters) (params DomainListIdentityProvidersParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListIdentityProvidersParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListIdentityProvidersParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListPeersParams is parameters of domainListPeers operation.
type DomainListPeersParams struct {
	DomainID DomainID
}

func unpackDomainListPeersParams(packed middleware.Parameters) (params DomainListPeersParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListPeersParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListPeersParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListPolicyRulesParams is parameters of domainListPolicyRules operation.
type DomainListPolicyRulesParams struct {
	DomainID DomainID
}

func unpackDomainListPolicyRulesParams(packed middleware.Parameters) (params DomainListPolicyRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListPolicyRulesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListPolicyRulesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListReadContextsParams is parameters of domainListReadContexts operation.
type DomainListReadContextsParams struct {
	DomainID DomainID
}

func unpackDomainListReadContextsParams(packed middleware.Parameters) (params DomainListReadContextsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListReadContextsParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListReadContextsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListResourcesParams is parameters of domainListResources operation.
type DomainListResourcesParams struct {
	DomainID DomainID
}

func unpackDomainListResourcesParams(packed middleware.Parameters) (params DomainListResourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListResourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListResourcesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainListWriteContextsParams is parameters of domainListWriteContexts operation.
type DomainListWriteContextsParams struct {
	DomainID DomainID
}

func unpackDomainListWriteContextsParams(packed middleware.Parameters) (params DomainListWriteContextsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainListWriteContextsParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainListWriteContextsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainOpenCapsuleParams is parameters of domainOpenCapsule operation.
type DomainOpenCapsuleParams struct {
	DomainID    DomainID
	CapsuleID   CapsuleID
	ReadContext ReadContextReference
}

func unpackDomainOpenCapsuleParams(packed middleware.Parameters) (params DomainOpenCapsuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	{
		key := middleware.ParameterKey{
			Name: "readContext",
			In:   "query",
		}
		params.ReadContext = packed[key].(ReadContextReference)
	}
	return params
}

func decodeDomainOpenCapsuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainOpenCapsuleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: readContext.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "readContext",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotReadContextVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotReadContextVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ReadContext = ReadContextReference(paramsDotReadContextVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ReadContext.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "readContext",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainPatchSettingsParams is parameters of domainPatchSettings operation.
type DomainPatchSettingsParams struct {
	DomainID DomainID
}

func unpackDomainPatchSettingsParams(packed middleware.Parameters) (params DomainPatchSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainPatchSettingsParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainPatchSettingsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainPolicyFlushParams is parameters of domainPolicyFlush operation.
type DomainPolicyFlushParams struct {
	DomainID DomainID
}

func unpackDomainPolicyFlushParams(packed middleware.Parameters) (params DomainPolicyFlushParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainPolicyFlushParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainPolicyFlushParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainPutCapabilityParams is parameters of domainPutCapability operation.
type DomainPutCapabilityParams struct {
	DomainID DomainID
	// The name for this capability, like "admin".
	Capability CapabilityName
	// Return an error if the capability already existed.
	Createonly OptBool
}

func unpackDomainPutCapabilityParams(packed middleware.Parameters) (params DomainPutCapabilityParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capability",
			In:   "path",
		}
		params.Capability = packed[key].(CapabilityName)
	}
	{
		key := middleware.ParameterKey{
			Name: "createonly",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Createonly = v.(OptBool)
		}
	}
	return params
}

func decodeDomainPutCapabilityParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainPutCapabilityParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capability.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capability",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapabilityVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapabilityVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Capability = CapabilityName(paramsDotCapabilityVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Capability.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capability",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: createonly.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "createonly",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCreateonlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotCreateonlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Createonly.SetTo(paramsDotCreateonlyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "createonly",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainPutFactTypeParams is parameters of domainPutFactType operation.
type DomainPutFactTypeParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeName
}

func unpackDomainPutFactTypeParams(packed middleware.Parameters) (params DomainPutFactTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeName)
	}
	return params
}

func decodeDomainPutFactTypeParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainPutFactTypeParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeName(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainQueryAccessLogParams is parameters of domainQueryAccessLog operation.
type DomainQueryAccessLogParams struct {
	DomainID DomainID
	// The earlier date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the end of the result set.
	StartDate OptDateTime
	// The later date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the beginning of the result set. If not specified, defaults to the current
	// time.
	EndDate OptDateTime
	// The number of results you would like returned. You may get more or less than this number, and it
	// does not indicate anything about the availability of more records. Consult the returned "has_more"
	// field to determine if there are more records available matching the filters and time range.
	NumResults OptInt
	// Which id to start from. This must be an ID of a record previously returned. The first result will
	// have an ID less than this ID (because results are in reverse chronological order, and it is
	// non-inclusive). You should omit this field if you are not continuing a paginated query.
	StartFromID OptLogEntryID
	// The session you would like to filter on. This will return results for only the provided session.
	// If not specified, this field is ignored.
	Session OptString
	// The location you would like to filter on. This is a matched filter and will return results
	// starting with the provided string. If not specified, this field is ignored.
	Location OptString
	// A boolean indicator to indicate that the location you provided is a prefix or not. If this is set
	// to true, then the filter provided in location is treated as a prefix. If not specified, this is
	// treated as false.
	LocationPrefixed OptBool
	// The operation you would like to filter on. This will filter on the provided operation type and
	// return all results using the provided operation type. If not specified, this field is ignored.
	OperationType OptDomainQueryAccessLogOperationType
	// The allow tag key you would like to filter on. This accepts tag key only and will return all
	// allowed tag results matching the provided tag key. If not specified, this field is ignored.
	AllowedTag OptTagName
	// The redacted or tokenized tag key you would like to filter on. This accepts a tag key only and
	// will return all redacted and tokenized tag key results matching the provided tag key. If not
	// specified, this field is ignored.
	RedactedOrTokenizedTag OptTagName
}

func unpackDomainQueryAccessLogParams(packed middleware.Parameters) (params DomainQueryAccessLogParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "num_results",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NumResults = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_from_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartFromID = v.(OptLogEntryID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "session",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Session = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Location = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "location_prefixed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LocationPrefixed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "operation_type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OperationType = v.(OptDomainQueryAccessLogOperationType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "allowed_tag",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AllowedTag = v.(OptTagName)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "redacted_or_tokenized_tag",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RedactedOrTokenizedTag = v.(OptTagName)
		}
	}
	return params
}

func decodeDomainQueryAccessLogParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainQueryAccessLogParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: start_date.
	{
		val, _ := json.DecodeDateTime(jx.DecodeStr("\"1970-01-01T01:01:01Z\""))
		params.StartDate.SetTo(val)
	}
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDate.SetTo(paramsDotStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: num_results.
	{
		val := int(100)
		params.NumResults.SetTo(val)
	}
	// Decode query: num_results.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num_results",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNumResultsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotNumResultsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NumResults.SetTo(paramsDotNumResultsVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.NumResults.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           10,
							MaxSet:        true,
							Max:           2000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num_results",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_from_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_from_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartFromIDVal LogEntryID
				if err := func() error {
					var paramsDotStartFromIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartFromIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartFromIDVal = LogEntryID(paramsDotStartFromIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.StartFromID.SetTo(paramsDotStartFromIDVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartFromID.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_from_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: session.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "session",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSessionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSessionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Session.SetTo(paramsDotSessionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "session",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLocationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Location.SetTo(paramsDotLocationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location_prefixed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location_prefixed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocationPrefixedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotLocationPrefixedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LocationPrefixed.SetTo(paramsDotLocationPrefixedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location_prefixed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: operation_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "operation_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOperationTypeVal DomainQueryAccessLogOperationType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOperationTypeVal = DomainQueryAccessLogOperationType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OperationType.SetTo(paramsDotOperationTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OperationType.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "operation_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: allowed_tag.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowed_tag",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowedTagVal TagName
				if err := func() error {
					var paramsDotAllowedTagValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAllowedTagValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAllowedTagVal = TagName(paramsDotAllowedTagValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.AllowedTag.SetTo(paramsDotAllowedTagVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.AllowedTag.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "allowed_tag",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: redacted_or_tokenized_tag.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "redacted_or_tokenized_tag",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRedactedOrTokenizedTagVal TagName
				if err := func() error {
					var paramsDotRedactedOrTokenizedTagValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRedactedOrTokenizedTagValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotRedactedOrTokenizedTagVal = TagName(paramsDotRedactedOrTokenizedTagValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.RedactedOrTokenizedTag.SetTo(paramsDotRedactedOrTokenizedTagVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.RedactedOrTokenizedTag.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "redacted_or_tokenized_tag",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainQueryAccessLogSingleCapsuleParams is parameters of domainQueryAccessLogSingleCapsule operation.
type DomainQueryAccessLogSingleCapsuleParams struct {
	DomainID DomainID
	// The earlier date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the end of the result set.
	StartDate OptDateTime
	// The later date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the beginning of the result set. If not specified, defaults to the current
	// time.
	EndDate OptDateTime
	// The number of results you would like returned. You may get more or less than this number, and it
	// does not indicate anything about the availability of more records. Consult the returned "has_more"
	// field to determine if there are more records available matching the filters and time range.
	NumResults OptInt
	// Which id to start from. This must be an ID of a record previously returned. The first result will
	// have an ID less than this ID (because results are in reverse chronological order, and it is
	// non-inclusive). You should omit this field if you are not continuing a paginated query.
	StartFromID OptLogEntryID
	// The session you would like to filter on. This will return results for only the provided session.
	// If not specified, this field is ignored.
	Session OptString
	// The location you would like to filter on. This is a matched filter and will return results
	// starting with the provided string. If not specified, this field is ignored.
	Location OptString
	// A boolean indicator to indicate that the location you provided is a prefix or not. If this is set
	// to true, then the filter provided in location is treated as a prefix. If not specified, this is
	// treated as false.
	LocationPrefixed OptBool
	// The operation you would like to filter on. This will filter on the provided operation type and
	// return all results using the provided operation type. If not specified, this field is ignored.
	OperationType OptDomainQueryAccessLogSingleCapsuleOperationType
	// The allow tag key you would like to filter on. This accepts tag key only and will return all
	// allowed tag results matching the provided tag key. If not specified, this field is ignored.
	AllowedTag OptTagName
	// The redacted or tokenized tag key you would like to filter on. This accepts a tag key only and
	// will return all redacted and tokenized tag key results matching the provided tag key. If not
	// specified, this field is ignored.
	RedactedOrTokenizedTag OptTagName
	CapsuleID              CapsuleID
}

func unpackDomainQueryAccessLogSingleCapsuleParams(packed middleware.Parameters) (params DomainQueryAccessLogSingleCapsuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "num_results",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NumResults = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_from_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartFromID = v.(OptLogEntryID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "session",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Session = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Location = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "location_prefixed",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LocationPrefixed = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "operation_type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OperationType = v.(OptDomainQueryAccessLogSingleCapsuleOperationType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "allowed_tag",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AllowedTag = v.(OptTagName)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "redacted_or_tokenized_tag",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RedactedOrTokenizedTag = v.(OptTagName)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainQueryAccessLogSingleCapsuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainQueryAccessLogSingleCapsuleParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: start_date.
	{
		val, _ := json.DecodeDateTime(jx.DecodeStr("\"1970-01-01T01:01:01Z\""))
		params.StartDate.SetTo(val)
	}
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDate.SetTo(paramsDotStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: num_results.
	{
		val := int(100)
		params.NumResults.SetTo(val)
	}
	// Decode query: num_results.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num_results",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNumResultsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotNumResultsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NumResults.SetTo(paramsDotNumResultsVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.NumResults.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           10,
							MaxSet:        true,
							Max:           2000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num_results",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_from_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_from_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartFromIDVal LogEntryID
				if err := func() error {
					var paramsDotStartFromIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartFromIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartFromIDVal = LogEntryID(paramsDotStartFromIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.StartFromID.SetTo(paramsDotStartFromIDVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartFromID.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_from_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: session.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "session",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSessionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSessionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Session.SetTo(paramsDotSessionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "session",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLocationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Location.SetTo(paramsDotLocationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: location_prefixed.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "location_prefixed",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLocationPrefixedVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotLocationPrefixedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LocationPrefixed.SetTo(paramsDotLocationPrefixedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location_prefixed",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: operation_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "operation_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOperationTypeVal DomainQueryAccessLogSingleCapsuleOperationType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOperationTypeVal = DomainQueryAccessLogSingleCapsuleOperationType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.OperationType.SetTo(paramsDotOperationTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.OperationType.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "operation_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: allowed_tag.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "allowed_tag",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAllowedTagVal TagName
				if err := func() error {
					var paramsDotAllowedTagValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotAllowedTagValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotAllowedTagVal = TagName(paramsDotAllowedTagValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.AllowedTag.SetTo(paramsDotAllowedTagVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.AllowedTag.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "allowed_tag",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: redacted_or_tokenized_tag.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "redacted_or_tokenized_tag",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRedactedOrTokenizedTagVal TagName
				if err := func() error {
					var paramsDotRedactedOrTokenizedTagValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotRedactedOrTokenizedTagValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotRedactedOrTokenizedTagVal = TagName(paramsDotRedactedOrTokenizedTagValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.RedactedOrTokenizedTag.SetTo(paramsDotRedactedOrTokenizedTagVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.RedactedOrTokenizedTag.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "redacted_or_tokenized_tag",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainQueryControlLogParams is parameters of domainQueryControlLog operation.
type DomainQueryControlLogParams struct {
	DomainID DomainID
	// The earlier date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the end of the result set.
	StartDate OptDateTime
	// The later date of the date range. As results are returned in reverse chronological order, this
	// date corresponds with the beginning of the result set. If not specified, defaults to the current
	// time.
	EndDate OptDateTime
	// The number of results you would like returned. You may get more or less than this number, and it
	// does not indicate anything about the availability of more records. Consult the returned "has_more"
	// field to determine if there are more records available matching the filters and time range.
	NumResults OptInt
	// Which id to start from. This must be an ID of a record previously returned. The first result will
	// have an ID less than this ID (because results are in reverse chronological order, and it is
	// non-inclusive). You should omit this field if you are not continuing a paginated query.
	StartFromID OptLogEntryID
	// The session you would like to filter on. This will return results for only the provided session.
	// If not specified, this field is ignored.
	Session OptString
	// The URL you would like to filter on. This is a prefix matched filter and will return results
	// starting with the provided string. If not specified, this field is ignored.
	URL OptString
	// The description you would like to filter on. This is an in matched filter and will return results
	// that  contain the provided string. If not specified, this field is ignored.
	Description OptString
}

func unpackDomainQueryControlLogParams(packed middleware.Parameters) (params DomainQueryControlLogParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "num_results",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.NumResults = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "start_from_id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StartFromID = v.(OptLogEntryID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "session",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Session = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "url",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.URL = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "description",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Description = v.(OptString)
		}
	}
	return params
}

func decodeDomainQueryControlLogParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainQueryControlLogParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: start_date.
	{
		val, _ := json.DecodeDateTime(jx.DecodeStr("\"1970-01-01T01:01:01Z\""))
		params.StartDate.SetTo(val)
	}
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StartDate.SetTo(paramsDotStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: num_results.
	{
		val := int(100)
		params.NumResults.SetTo(val)
	}
	// Decode query: num_results.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "num_results",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNumResultsVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotNumResultsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.NumResults.SetTo(paramsDotNumResultsVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.NumResults.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           10,
							MaxSet:        true,
							Max:           2000,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "num_results",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: start_from_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_from_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStartFromIDVal LogEntryID
				if err := func() error {
					var paramsDotStartFromIDValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStartFromIDValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotStartFromIDVal = LogEntryID(paramsDotStartFromIDValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.StartFromID.SetTo(paramsDotStartFromIDVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.StartFromID.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_from_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: session.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "session",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSessionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSessionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Session.SetTo(paramsDotSessionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "session",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: url.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "url",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotURLVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotURLVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.URL.SetTo(paramsDotURLVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "url",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: description.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "description",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDescriptionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDescriptionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Description.SetTo(paramsDotDescriptionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "description",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DomainReadContextFlushParams is parameters of domainReadContextFlush operation.
type DomainReadContextFlushParams struct {
	DomainID    DomainID
	ContextName ReadContextName
}

func unpackDomainReadContextFlushParams(packed middleware.Parameters) (params DomainReadContextFlushParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	return params
}

func decodeDomainReadContextFlushParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainReadContextFlushParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainRenumberPolicyRulesParams is parameters of domainRenumberPolicyRules operation.
type DomainRenumberPolicyRulesParams struct {
	DomainID DomainID
}

func unpackDomainRenumberPolicyRulesParams(packed middleware.Parameters) (params DomainRenumberPolicyRulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainRenumberPolicyRulesParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainRenumberPolicyRulesParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainRotateRootEncryptionKeysParams is parameters of domainRotateRootEncryptionKeys operation.
type DomainRotateRootEncryptionKeysParams struct {
	DomainID DomainID
}

func unpackDomainRotateRootEncryptionKeysParams(packed middleware.Parameters) (params DomainRotateRootEncryptionKeysParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainRotateRootEncryptionKeysParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainRotateRootEncryptionKeysParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainSealCapsuleParams is parameters of domainSealCapsule operation.
type DomainSealCapsuleParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainSealCapsuleParams(packed middleware.Parameters) (params DomainSealCapsuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainSealCapsuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainSealCapsuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainSetActiveExternalRootEncryptionKeyParams is parameters of domainSetActiveExternalRootEncryptionKey operation.
type DomainSetActiveExternalRootEncryptionKeyParams struct {
	DomainID DomainID
}

func unpackDomainSetActiveExternalRootEncryptionKeyParams(packed middleware.Parameters) (params DomainSetActiveExternalRootEncryptionKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainSetActiveExternalRootEncryptionKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DomainSetActiveExternalRootEncryptionKeyParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpdateIdentityProviderPrincipalParams is parameters of domainUpdateIdentityProviderPrincipal operation.
type DomainUpdateIdentityProviderPrincipalParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
	PrincipalID          PrincipalID
}

func unpackDomainUpdateIdentityProviderPrincipalParams(packed middleware.Parameters) (params DomainUpdateIdentityProviderPrincipalParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	{
		key := middleware.ParameterKey{
			Name: "principalID",
			In:   "path",
		}
		params.PrincipalID = packed[key].(PrincipalID)
	}
	return params
}

func decodeDomainUpdateIdentityProviderPrincipalParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainUpdateIdentityProviderPrincipalParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: principalID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "principalID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPrincipalIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPrincipalIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PrincipalID = PrincipalID(paramsDotPrincipalIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PrincipalID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "principalID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpdatePeerParams is parameters of domainUpdatePeer operation.
type DomainUpdatePeerParams struct {
	DomainID     DomainID
	PeerDomainID DomainID
}

func unpackDomainUpdatePeerParams(packed middleware.Parameters) (params DomainUpdatePeerParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "peerDomainID",
			In:   "path",
		}
		params.PeerDomainID = packed[key].(DomainID)
	}
	return params
}

func decodeDomainUpdatePeerParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpdatePeerParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: peerDomainID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "peerDomainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotPeerDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPeerDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PeerDomainID = DomainID(paramsDotPeerDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.PeerDomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "peerDomainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpdatePolicyRuleParams is parameters of domainUpdatePolicyRule operation.
type DomainUpdatePolicyRuleParams struct {
	DomainID DomainID
	RuleID   RuleID
}

func unpackDomainUpdatePolicyRuleParams(packed middleware.Parameters) (params DomainUpdatePolicyRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(RuleID)
	}
	return params
}

func decodeDomainUpdatePolicyRuleParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpdatePolicyRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: ruleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RuleID = RuleID(paramsDotRuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpdateReadContextRuleParams is parameters of domainUpdateReadContextRule operation.
type DomainUpdateReadContextRuleParams struct {
	DomainID    DomainID
	ContextName ReadContextName
	RuleID      RuleID
}

func unpackDomainUpdateReadContextRuleParams(packed middleware.Parameters) (params DomainUpdateReadContextRuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	{
		key := middleware.ParameterKey{
			Name: "ruleID",
			In:   "path",
		}
		params.RuleID = packed[key].(RuleID)
	}
	return params
}

func decodeDomainUpdateReadContextRuleParams(args [3]string, argsEscaped bool, r *http.Request) (params DomainUpdateReadContextRuleParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: ruleID.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "ruleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotRuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RuleID = RuleID(paramsDotRuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.RuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ruleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertCapsuleTagsParams is parameters of domainUpsertCapsuleTags operation.
type DomainUpsertCapsuleTagsParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainUpsertCapsuleTagsParams(packed middleware.Parameters) (params DomainUpsertCapsuleTagsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainUpsertCapsuleTagsParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertCapsuleTagsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertFactParams is parameters of domainUpsertFact operation.
type DomainUpsertFactParams struct {
	DomainID DomainID
	// The "type name" for this fact, like "has_role".
	FactType FactTypeName
}

func unpackDomainUpsertFactParams(packed middleware.Parameters) (params DomainUpsertFactParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "factType",
			In:   "path",
		}
		params.FactType = packed[key].(FactTypeName)
	}
	return params
}

func decodeDomainUpsertFactParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertFactParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: factType.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factType",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotFactTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFactTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FactType = FactTypeName(paramsDotFactTypeVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.FactType.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factType",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertIdentityProviderParams is parameters of domainUpsertIdentityProvider operation.
type DomainUpsertIdentityProviderParams struct {
	DomainID             DomainID
	IdentityProviderName IdentityProviderName
}

func unpackDomainUpsertIdentityProviderParams(packed middleware.Parameters) (params DomainUpsertIdentityProviderParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "identityProviderName",
			In:   "path",
		}
		params.IdentityProviderName = packed[key].(IdentityProviderName)
	}
	return params
}

func decodeDomainUpsertIdentityProviderParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertIdentityProviderParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: identityProviderName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "identityProviderName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIdentityProviderNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdentityProviderNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdentityProviderName = IdentityProviderName(paramsDotIdentityProviderNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.IdentityProviderName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "identityProviderName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertReadContextParams is parameters of domainUpsertReadContext operation.
type DomainUpsertReadContextParams struct {
	DomainID    DomainID
	ContextName ReadContextName
}

func unpackDomainUpsertReadContextParams(packed middleware.Parameters) (params DomainUpsertReadContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(ReadContextName)
	}
	return params
}

func decodeDomainUpsertReadContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertReadContextParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = ReadContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertSpanTagsParams is parameters of domainUpsertSpanTags operation.
type DomainUpsertSpanTagsParams struct {
	DomainID  DomainID
	CapsuleID CapsuleID
}

func unpackDomainUpsertSpanTagsParams(packed middleware.Parameters) (params DomainUpsertSpanTagsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "capsuleID",
			In:   "path",
		}
		params.CapsuleID = packed[key].(CapsuleID)
	}
	return params
}

func decodeDomainUpsertSpanTagsParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertSpanTagsParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: capsuleID.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "capsuleID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotCapsuleIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCapsuleIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CapsuleID = CapsuleID(paramsDotCapsuleIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CapsuleID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "capsuleID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertWriteContextParams is parameters of domainUpsertWriteContext operation.
type DomainUpsertWriteContextParams struct {
	DomainID    DomainID
	ContextName WriteContextName
}

func unpackDomainUpsertWriteContextParams(packed middleware.Parameters) (params DomainUpsertWriteContextParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	return params
}

func decodeDomainUpsertWriteContextParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertWriteContextParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DomainUpsertWriteContextConfigurationParams is parameters of domainUpsertWriteContextConfiguration operation.
type DomainUpsertWriteContextConfigurationParams struct {
	DomainID    DomainID
	ContextName WriteContextName
}

func unpackDomainUpsertWriteContextConfigurationParams(packed middleware.Parameters) (params DomainUpsertWriteContextConfigurationParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	{
		key := middleware.ParameterKey{
			Name: "contextName",
			In:   "path",
		}
		params.ContextName = packed[key].(WriteContextName)
	}
	return params
}

func decodeDomainUpsertWriteContextConfigurationParams(args [2]string, argsEscaped bool, r *http.Request) (params DomainUpsertWriteContextConfigurationParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: contextName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contextName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotContextNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContextNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContextName = WriteContextName(paramsDotContextNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ContextName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contextName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StarredDomainAddParams is parameters of starredDomainAdd operation.
type StarredDomainAddParams struct {
	DomainID DomainID
}

func unpackStarredDomainAddParams(packed middleware.Parameters) (params StarredDomainAddParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeStarredDomainAddParams(args [1]string, argsEscaped bool, r *http.Request) (params StarredDomainAddParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StarredDomainRemoveParams is parameters of starredDomainRemove operation.
type StarredDomainRemoveParams struct {
	DomainID DomainID
}

func unpackStarredDomainRemoveParams(packed middleware.Parameters) (params StarredDomainRemoveParams) {
	{
		key := middleware.ParameterKey{
			Name: "domainID",
			In:   "path",
		}
		params.DomainID = packed[key].(DomainID)
	}
	return params
}

func decodeStarredDomainRemoveParams(args [1]string, argsEscaped bool, r *http.Request) (params StarredDomainRemoveParams, _ error) {
	// Decode path: domainID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domainID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotDomainIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDomainIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DomainID = DomainID(paramsDotDomainIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.DomainID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domainID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
