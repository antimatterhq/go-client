// Code generated by ogen, DO NOT EDIT.

package spec

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CapsuleGetById implements capsuleGetById operation.
//
// This endpoint allows you to get a Capsule without knowing the Domain ID. It will redirect the user
// to the full `/domains/{domainID}/capsules/{capsuleID}` path.
//
// GET /capsules/{capsuleID}
func (UnimplementedHandler) CapsuleGetById(ctx context.Context, params CapsuleGetByIdParams) (r CapsuleGetByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainAddAccessLogEntry implements domainAddAccessLogEntry operation.
//
// Adds a data-plane audit log entry for this capsule. Contains information about the originating
// principal and about read tag rollups. Contains an open capsule token (read from the file) to
// ensure that you legitimately read the capsule. Note that not all audit log entry types may be
// added with this method. Some (like open records) are generated server side.
//
// POST /domains/{domainID}/capsules/{capsuleID}/log
func (UnimplementedHandler) DomainAddAccessLogEntry(ctx context.Context, req *AddCapsuleLogEntryRequest, params DomainAddAccessLogEntryParams) (r DomainAddAccessLogEntryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainAddExternalRootEncryptionKey implements domainAddExternalRootEncryptionKey operation.
//
// Add a new external root encryption key with its supporting access configuration.
//
// POST /domains/{domainID}/control/keys
func (UnimplementedHandler) DomainAddExternalRootEncryptionKey(ctx context.Context, req *KeyInfos, params DomainAddExternalRootEncryptionKeyParams) (r DomainAddExternalRootEncryptionKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainAddNew implements domainAddNew operation.
//
// Add a new domain with no default peer relationships. You will need to confirm the email address
// before the domain is able to be interacted with.
//
// POST /domains
func (UnimplementedHandler) DomainAddNew(ctx context.Context, req *NewDomain) (r DomainAddNewRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainAddReadContextRule implements domainAddReadContextRule operation.
//
// Read context configuration is rule based, much like domain policy. This adds a new rule to the
// read context. Rules are processed in priority order, stopping with the first matching rule.
//
// POST /domains/{domainID}/control/read-context/{contextName}/config
func (UnimplementedHandler) DomainAddReadContextRule(ctx context.Context, req *NewReadContextConfigRule, params DomainAddReadContextRuleParams) (r DomainAddReadContextRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainAuthenticate implements domainAuthenticate operation.
//
// Use an authentication method to obtain a domain ID token which is used as the bearer for all other
// endpoints. You can use the `/public-info` route to obtain a list of identity providers supported
// by this endpoint.
//
// POST /domains/{domainID}/authenticate
func (UnimplementedHandler) DomainAuthenticate(ctx context.Context, req *DomainAuthenticate, params DomainAuthenticateParams) (r DomainAuthenticateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainContactIssueVerify implements domainContactIssueVerify operation.
//
// Issue a new verification request to a pending contact email associated with the domain. There is a
// rate limiter on this endpoint, you may need to wait between invocations.
//
// POST /domains/{domainID}/account/verify
func (UnimplementedHandler) DomainContactIssueVerify(ctx context.Context, req *DomainContactIssueVerifyReq, params DomainContactIssueVerifyParams) (r DomainContactIssueVerifyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainContactVerify implements domainContactVerify operation.
//
// Verify an admin contact email recently associated with a domain. The token will have been emailed
// (in the form of a link) to the email address when `/account/verify` is called, the domain was
// initially created, or the email was added via the settings endpoint.
//
// GET /domains/{domainID}/account/verify
func (UnimplementedHandler) DomainContactVerify(ctx context.Context, params DomainContactVerifyParams) (r DomainContactVerifyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainCreateCapsule implements domainCreateCapsule operation.
//
// Create a new capsule. The ID will be returned. Capsule will be "unsealed" first, meaning it's
// still in a creating state. Returns a capsule create token that can be used to feed in additional
// data about the capsule while it's still unsealed. Also returns a DEK and an encrypted DEK.
//
// POST /domains/{domainID}/capsules
func (UnimplementedHandler) DomainCreateCapsule(ctx context.Context, req *DomainCreateCapsuleReq, params DomainCreateCapsuleParams) (r DomainCreateCapsuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainCreatePeerDomain implements domainCreatePeerDomain operation.
//
// Create a domain with a default "subordinate" peering relationship with the current domain.
// Namely, the current "parent" domain will be configured to allow the new "child" domain to use the
// parent's billing and admin contact settings, and the child domain will be configured to import
// those settings.
// Optionally, similar linking can be performed for identity providers, read/write contexts and facts
// by setting the appropriate linkX parameter to true. In most cases, what you want is to set
// `linkAll=true`.
// Note, that a "subdomain" is just shorthand for a domain with the above-described peering config.
// This peering can be changed at any time, and there is no permanent difference between a domain
// created in this way, and a domain created with POST /domains.
//
// POST /domains/{domainID}/peer-domain
func (UnimplementedHandler) DomainCreatePeerDomain(ctx context.Context, req *CreatePeerDomain, params DomainCreatePeerDomainParams) (r DomainCreatePeerDomainRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainCreatePolicyRule implements domainCreatePolicyRule operation.
//
// Create a domain policy rule.
//
// POST /domains/{domainID}/control/policy
func (UnimplementedHandler) DomainCreatePolicyRule(ctx context.Context, req *NewDomainPolicyRule, params DomainCreatePolicyRuleParams) (r DomainCreatePolicyRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDataTaggingHookInvoke implements domainDataTaggingHookInvoke operation.
//
// Invoke a hook that operates on data and returns tags.
//
// POST /domains/{domainID}/hooks/data-tagging/{hookName}/invoke
func (UnimplementedHandler) DomainDataTaggingHookInvoke(ctx context.Context, req *DataTaggingHookInput, params DomainDataTaggingHookInvokeParams) (r DomainDataTaggingHookInvokeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteCapability implements domainDeleteCapability operation.
//
// Delete a capability. All domain policy rules that reference the capability must have already been
// deleted, or you will receive a 409 error.
//
// DELETE /domains/{domainID}/control/capabilities/{capability}
func (UnimplementedHandler) DomainDeleteCapability(ctx context.Context, params DomainDeleteCapabilityParams) (r DomainDeleteCapabilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteCapsuleTags implements domainDeleteCapsuleTags operation.
//
// Delete capsule-level tags.
//
// POST /domains/{domainID}/capsules/{capsuleID}/capsule-tags/delete
func (UnimplementedHandler) DomainDeleteCapsuleTags(ctx context.Context, req *DeleteTags, params DomainDeleteCapsuleTagsParams) (r DomainDeleteCapsuleTagsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteExternalRootEncryptionKey implements domainDeleteExternalRootEncryptionKey operation.
//
// Delete an external root encryption key using its ID. This operation is only successful if the
// external root encryption key is not in use by any key encryption keys. Call the /keys/rotate
// endpoint to ensure that all KEKs have been migrated to the active REK.
//
// DELETE /domains/{domainID}/control/keys/{rootEncryptionKeyID}
func (UnimplementedHandler) DomainDeleteExternalRootEncryptionKey(ctx context.Context, params DomainDeleteExternalRootEncryptionKeyParams) (r DomainDeleteExternalRootEncryptionKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteFactByID implements domainDeleteFactByID operation.
//
// Delete a fact by ID.
//
// DELETE /domains/{domainID}/control/facts/{factType}/{factID}
func (UnimplementedHandler) DomainDeleteFactByID(ctx context.Context, params DomainDeleteFactByIDParams) (r DomainDeleteFactByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteFactType implements domainDeleteFactType operation.
//
// Deletes a fact type and all facts inside it.
//
// DELETE /domains/{domainID}/control/facts/{factType}
func (UnimplementedHandler) DomainDeleteFactType(ctx context.Context, params DomainDeleteFactTypeParams) (r DomainDeleteFactTypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteIdentityProvider implements domainDeleteIdentityProvider operation.
//
// Delete an identity provider. All domain tokens created using this identity provider will be
// invalidated. Take care not to remove the identity provider that is providing you admin access to
// your domain, as you may "lock yourself out".
//
// DELETE /domains/{domainID}/control/identities/{identityProviderName}
func (UnimplementedHandler) DomainDeleteIdentityProvider(ctx context.Context, params DomainDeleteIdentityProviderParams) (r DomainDeleteIdentityProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteIdentityProviderPrincipal implements domainDeleteIdentityProviderPrincipal operation.
//
// Delete an identity provider principal.
//
// DELETE /domains/{domainID}/control/identities/{identityProviderName}/principals/{principalID}
func (UnimplementedHandler) DomainDeleteIdentityProviderPrincipal(ctx context.Context, params DomainDeleteIdentityProviderPrincipalParams) (r DomainDeleteIdentityProviderPrincipalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeletePeer implements domainDeletePeer operation.
//
// Removes the peering relationship with the given domain.
//
// DELETE /domains/{domainID}/control/peers/{peerDomainID}
func (UnimplementedHandler) DomainDeletePeer(ctx context.Context, params DomainDeletePeerParams) (r DomainDeletePeerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeletePolicyRule implements domainDeletePolicyRule operation.
//
// Delete a domain policy rule by ID.
//
// DELETE /domains/{domainID}/control/policy/{ruleID}
func (UnimplementedHandler) DomainDeletePolicyRule(ctx context.Context, params DomainDeletePolicyRuleParams) (r DomainDeletePolicyRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteReadContext implements domainDeleteReadContext operation.
//
// Delete a read context. All configuration associated with this read context will also be deleted.
// Domain policy rules referencing this read context will be left as-is.
//
// DELETE /domains/{domainID}/control/read-context/{contextName}
func (UnimplementedHandler) DomainDeleteReadContext(ctx context.Context, params DomainDeleteReadContextParams) (r DomainDeleteReadContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteReadContextRule implements domainDeleteReadContextRule operation.
//
// Deletes a read context configuration rule by ID.
//
// DELETE /domains/{domainID}/control/read-context/{contextName}/config/{ruleID}
func (UnimplementedHandler) DomainDeleteReadContextRule(ctx context.Context, params DomainDeleteReadContextRuleParams) (r DomainDeleteReadContextRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteWriteContext implements domainDeleteWriteContext operation.
//
// Delete a write context. All configuration associated with this write context will also be deleted.
// Domain policy rules referencing this write context will be left as-is.
//
// DELETE /domains/{domainID}/control/write-context/{contextName}
func (UnimplementedHandler) DomainDeleteWriteContext(ctx context.Context, params DomainDeleteWriteContextParams) (r DomainDeleteWriteContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDeleteWriteContextRegexRule implements domainDeleteWriteContextRegexRule operation.
//
// Delete a regex classifier rule for the context.
//
// DELETE /domains/{domainID}/control/write-context/{contextName}/regex-rule/{ruleID}
func (UnimplementedHandler) DomainDeleteWriteContextRegexRule(ctx context.Context, params DomainDeleteWriteContextRegexRuleParams) (r DomainDeleteWriteContextRegexRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainDescribeWriteContext implements domainDescribeWriteContext operation.
//
// Returns a detailed description of a write context.
//
// GET /domains/{domainID}/control/write-context/{contextName}
func (UnimplementedHandler) DomainDescribeWriteContext(ctx context.Context, params DomainDescribeWriteContextParams) (r DomainDescribeWriteContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainExternalRootEncryptionKeyTest implements domainExternalRootEncryptionKeyTest operation.
//
// Attempts to use a root encryption key to encrypt and decrypt, validating its availability.
//
// POST /domains/{domainID}/control/keys/{rootEncryptionKeyID}/test
func (UnimplementedHandler) DomainExternalRootEncryptionKeyTest(ctx context.Context, req *DomainExternalRootEncryptionKeyTestReq, params DomainExternalRootEncryptionKeyTestParams) (r DomainExternalRootEncryptionKeyTestRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainFlushEncryptionKeys implements domainFlushEncryptionKeys operation.
//
// Flush all keys in memory. The keys will be immediately reloaded from persistent storage, forcing a
// check that the domain's root encryption key is still available.
//
// POST /domains/{domainID}/encryption/flush
func (UnimplementedHandler) DomainFlushEncryptionKeys(ctx context.Context, req *DomainFlushEncryptionKeysReq, params DomainFlushEncryptionKeysParams) (r DomainFlushEncryptionKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetActiveExternalRootEncryptionKey implements domainGetActiveExternalRootEncryptionKey operation.
//
// Return the details about the current active root encryption key used by the domain.
//
// GET /domains/{domainID}/control/keys/active
func (UnimplementedHandler) DomainGetActiveExternalRootEncryptionKey(ctx context.Context, params DomainGetActiveExternalRootEncryptionKeyParams) (r DomainGetActiveExternalRootEncryptionKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetCapabilities implements domainGetCapabilities operation.
//
// Get the capabilities configured within the domain. A capability is a key/value pair that can be
// attached to a principal by an identity provider. The capabilities can be referenced by the domain
// policy rules.
//
// GET /domains/{domainID}/control/capabilities
func (UnimplementedHandler) DomainGetCapabilities(ctx context.Context, params DomainGetCapabilitiesParams) (r DomainGetCapabilitiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetCapability implements domainGetCapability operation.
//
// Get a capability. A capability is a key/value pair that can be  attached to a principal by an
// identity provider. The capabilities can be referenced by the domain policy rules.
//
// GET /domains/{domainID}/control/capabilities/{capability}
func (UnimplementedHandler) DomainGetCapability(ctx context.Context, params DomainGetCapabilityParams) (r DomainGetCapabilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetCapsuleInfo implements domainGetCapsuleInfo operation.
//
// Get the summary information about this capsule.
//
// GET /domains/{domainID}/capsules/{capsuleID}
func (UnimplementedHandler) DomainGetCapsuleInfo(ctx context.Context, params DomainGetCapsuleInfoParams) (r DomainGetCapsuleInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetExternalRootEncryptionKeyProviders implements domainGetExternalRootEncryptionKeyProviders operation.
//
// Returns a list of available root encryption key providers, along with their description and, if
// relevant, any additional information required to use them (e.g. for the delegated key provider
// `aws_am` the AWS account number to delegate to is returned).
//
// GET /domains/{domainID}/control/keys/providers
func (UnimplementedHandler) DomainGetExternalRootEncryptionKeyProviders(ctx context.Context, params DomainGetExternalRootEncryptionKeyProvidersParams) (r DomainGetExternalRootEncryptionKeyProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetFactByID implements domainGetFactByID operation.
//
// Returns the fact with the given ID.
//
// GET /domains/{domainID}/control/facts/{factType}/{factID}
func (UnimplementedHandler) DomainGetFactByID(ctx context.Context, params DomainGetFactByIDParams) (r DomainGetFactByIDRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetFactType implements domainGetFactType operation.
//
// Get the definition of the given fact type.
//
// GET /domains/{domainID}/control/facts/{factType}
func (UnimplementedHandler) DomainGetFactType(ctx context.Context, params DomainGetFactTypeParams) (r DomainGetFactTypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetIdentityProvider implements domainGetIdentityProvider operation.
//
// Retrieve detailed information and configuration of an identity provider.
//
// GET /domains/{domainID}/control/identities/{identityProviderName}
func (UnimplementedHandler) DomainGetIdentityProvider(ctx context.Context, params DomainGetIdentityProviderParams) (r DomainGetIdentityProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetIdentityProviderPrincipal implements domainGetIdentityProviderPrincipal operation.
//
// Retrieve detailed information about an identity provider principal.
//
// GET /domains/{domainID}/control/identities/{identityProviderName}/principals/{principalID}
func (UnimplementedHandler) DomainGetIdentityProviderPrincipal(ctx context.Context, params DomainGetIdentityProviderPrincipalParams) (r DomainGetIdentityProviderPrincipalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetIdentityProviderPrincipals implements domainGetIdentityProviderPrincipals operation.
//
// Retrieve a list of principals for an identity provider.
//
// GET /domains/{domainID}/control/identities/{identityProviderName}/principals
func (UnimplementedHandler) DomainGetIdentityProviderPrincipals(ctx context.Context, params DomainGetIdentityProviderPrincipalsParams) (r DomainGetIdentityProviderPrincipalsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetPeer implements domainGetPeer operation.
//
// Retrieve the details of a domain that is configured as a peer of this domain, by using its alias
// or one of its nicknames.
//
// GET /domains/{domainID}/peer-domain
func (UnimplementedHandler) DomainGetPeer(ctx context.Context, params DomainGetPeerParams) (r DomainGetPeerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetPeerConfig implements domainGetPeerConfig operation.
//
// Get the configuration for this peer.
//
// GET /domains/{domainID}/control/peers/{peerDomainID}
func (UnimplementedHandler) DomainGetPeerConfig(ctx context.Context, params DomainGetPeerConfigParams) (r DomainGetPeerConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetPrivateInfo implements domainGetPrivateInfo operation.
//
// Returns a Domain's summary information. This may include more information than the `public-info`
// endpoint but requires authentication.
//
// GET /domains/{domainID}/info
func (UnimplementedHandler) DomainGetPrivateInfo(ctx context.Context, params DomainGetPrivateInfoParams) (r DomainGetPrivateInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetPublicInfo implements domainGetPublicInfo operation.
//
// Returns a Domain's summary information. This endpoint does not require authorization. This
// endpoint can be used to determine which identity providers the `/authenticate` endpoint supports.
//
// GET /domains/{domainID}/public-info
func (UnimplementedHandler) DomainGetPublicInfo(ctx context.Context, params DomainGetPublicInfoParams) (r DomainGetPublicInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetReadContext implements domainGetReadContext operation.
//
// Returns information about a read context.
//
// GET /domains/{domainID}/control/read-context/{contextName}
func (UnimplementedHandler) DomainGetReadContext(ctx context.Context, params DomainGetReadContextParams) (r DomainGetReadContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetSettings implements domainGetSettings operation.
//
// Get the domain settings. This contains configuration for the contact email addresses as well as
// the display name for the domain.
//
// GET /domains/{domainID}/control/settings
func (UnimplementedHandler) DomainGetSettings(ctx context.Context, params DomainGetSettingsParams) (r DomainGetSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetStatus implements domainGetStatus operation.
//
// The domain status object contains important notifications for administrators of the domain.
//
// GET /domains/{domainID}/control/status
func (UnimplementedHandler) DomainGetStatus(ctx context.Context, params DomainGetStatusParams) (r DomainGetStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetTagInfo implements domainGetTagInfo operation.
//
// Get an ordered list of the top 100 tags. The ordering is: - Tags emitted by hooks - Tags
// referenced in read context rules - Capsule and span tags that appear in the capsule manifest
// ordered by number of appearances This list will be truncated (and `has_more` will be true) if the
// above yields more than 100 tags. There is currently no endpoint to receive a complete list of tags.
//
// GET /domains/{domainID}/tag-info
func (UnimplementedHandler) DomainGetTagInfo(ctx context.Context, params DomainGetTagInfoParams) (r DomainGetTagInfoRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetVendorSettings implements domainGetVendorSettings operation.
//
// Return the current vendor settings for a given domain.
//
// GET /domains/{domainID}/control/vendor/settings
func (UnimplementedHandler) DomainGetVendorSettings(ctx context.Context, params DomainGetVendorSettingsParams) (r DomainGetVendorSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainGetWriteContextRegexRules implements domainGetWriteContextRegexRules operation.
//
// Get a full listing of all regex rules for the context.
//
// GET /domains/{domainID}/control/write-context/{contextName}/regex-rule
func (UnimplementedHandler) DomainGetWriteContextRegexRules(ctx context.Context, params DomainGetWriteContextRegexRulesParams) (r DomainGetWriteContextRegexRulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainInsertIdentityProviderPrincipal implements domainInsertIdentityProviderPrincipal operation.
//
// Create a new principal for the provider. Note that the identityProviderName must refer to an
// existing identity provider or the response will be a 400.
//
// POST /domains/{domainID}/control/identities/{identityProviderName}/principals
func (UnimplementedHandler) DomainInsertIdentityProviderPrincipal(ctx context.Context, req *DomainIdentityProviderPrincipalParams, params DomainInsertIdentityProviderPrincipalParams) (r DomainInsertIdentityProviderPrincipalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainInsertWriteContextRegexRule implements domainInsertWriteContextRegexRule operation.
//
// Create a new regex rule for a write context.
//
// POST /domains/{domainID}/control/write-context/{contextName}/regex-rule
func (UnimplementedHandler) DomainInsertWriteContextRegexRule(ctx context.Context, req *WriteContextRegexRule, params DomainInsertWriteContextRegexRuleParams) (r DomainInsertWriteContextRegexRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListCapsules implements domainListCapsules operation.
//
// Get information about capsules.
//
// GET /domains/{domainID}/capsules
func (UnimplementedHandler) DomainListCapsules(ctx context.Context, params DomainListCapsulesParams) (r DomainListCapsulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListExternalRootEncryptionKey implements domainListExternalRootEncryptionKey operation.
//
// List all external root encryption keys for the domain.
//
// GET /domains/{domainID}/control/keys
func (UnimplementedHandler) DomainListExternalRootEncryptionKey(ctx context.Context, params DomainListExternalRootEncryptionKeyParams) (r DomainListExternalRootEncryptionKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListFactTypes implements domainListFactTypes operation.
//
// Get a list of the fact types in this domain. Facts are used by domain policy rules and read
// context rules.
//
// GET /domains/{domainID}/control/facts
func (UnimplementedHandler) DomainListFactTypes(ctx context.Context, params DomainListFactTypesParams) (r DomainListFactTypesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListFacts implements domainListFacts operation.
//
// Get the facts within a fact type.
//
// GET /domains/{domainID}/control/facts/{factType}/list
func (UnimplementedHandler) DomainListFacts(ctx context.Context, params DomainListFactsParams) (r DomainListFactsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListHooks implements domainListHooks operation.
//
// Get a list of available hooks in this domain. Hooks can be added to write contexts to classify
// data.
//
// GET /domains/{domainID}/hooks
func (UnimplementedHandler) DomainListHooks(ctx context.Context, params DomainListHooksParams) (r DomainListHooksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListIdentityProviders implements domainListIdentityProviders operation.
//
// Retrieve the domain's identity providers and a brief overview of their configuration. This
// endpoint requires authentication, but you can obtain an abridged list of the domain identity
// providers prior to authentication by using the `/public-info` endpoint.
//
// GET /domains/{domainID}/control/identities
func (UnimplementedHandler) DomainListIdentityProviders(ctx context.Context, params DomainListIdentityProvidersParams) (r DomainListIdentityProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListPeers implements domainListPeers operation.
//
// Returns a list of this domains peers.
//
// GET /domains/{domainID}/control/peers
func (UnimplementedHandler) DomainListPeers(ctx context.Context, params DomainListPeersParams) (r DomainListPeersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListPolicyRules implements domainListPolicyRules operation.
//
// Get the domain policy rules. These govern which resources in the domain can be interacted with.
// Note that the peers "bypass" these rules, in that a peer domain can retrieve policy and
// configuration that has been allowed by peering configuration without needing an allowing domain
// policy rule, but they cannot access data within this domain.
//
// GET /domains/{domainID}/control/policy
func (UnimplementedHandler) DomainListPolicyRules(ctx context.Context, params DomainListPolicyRulesParams) (r DomainListPolicyRulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListReadContexts implements domainListReadContexts operation.
//
// List the domain read contexts. If a user has view permissions on this resource, they may list all
// read contexts, even if they do not have view, edit or use permissions on some of the read contexts
// in the list.
//
// GET /domains/{domainID}/control/read-context
func (UnimplementedHandler) DomainListReadContexts(ctx context.Context, params DomainListReadContextsParams) (r DomainListReadContextsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListResources implements domainListResources operation.
//
// Gets a list of resource strings that can be used in policy rules, and the set of permissions that
// you can assign to them. The return value from this endpoint is useful as a reference when
// authoring custom domain policy for new capabilities.
//
// GET /domains/{domainID}/control/resources
func (UnimplementedHandler) DomainListResources(ctx context.Context, params DomainListResourcesParams) (r DomainListResourcesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainListWriteContexts implements domainListWriteContexts operation.
//
// List the domain write contexts. If a user has view permissions on this resource, they may list all
// write contexts, even if they do not have view, edit or use permissions on some of the write
// contexts in the list.
//
// GET /domains/{domainID}/control/write-context
func (UnimplementedHandler) DomainListWriteContexts(ctx context.Context, params DomainListWriteContextsParams) (r DomainListWriteContextsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainOpenCapsule implements domainOpenCapsule operation.
//
// Given the encrypted DEK for this capsule, get back the decrypted DEK. contains the read context.
//
// POST /domains/{domainID}/capsules/{capsuleID}/open
func (UnimplementedHandler) DomainOpenCapsule(ctx context.Context, req *CapsuleOpenRequest, params DomainOpenCapsuleParams) (r DomainOpenCapsuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainPatchSettings implements domainPatchSettings operation.
//
// Applies the given patch to the domain settings.
//
// PATCH /domains/{domainID}/control/settings
func (UnimplementedHandler) DomainPatchSettings(ctx context.Context, req *DomainSettingsPatch, params DomainPatchSettingsParams) (r DomainPatchSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainPolicyFlush implements domainPolicyFlush operation.
//
// Flush the policy cache so that changes to permissions take effect.
//
// POST /domains/{domainID}/control/policy/flush
func (UnimplementedHandler) DomainPolicyFlush(ctx context.Context, params DomainPolicyFlushParams) (r DomainPolicyFlushRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainPutCapability implements domainPutCapability operation.
//
// Create or update a capability. If you want to return an error if the capability already existed,
// set `createonly` to true.
//
// PUT /domains/{domainID}/control/capabilities/{capability}
func (UnimplementedHandler) DomainPutCapability(ctx context.Context, req *NewCapabilityDefinition, params DomainPutCapabilityParams) (r DomainPutCapabilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainPutFactType implements domainPutFactType operation.
//
// Facts are used to store ancillary information that helps express domain policy rules and read
// context configuration rules. This endpoint allows you to register a new fact type. To create a
// fact within an existing type, use `/control/facts/{factType}/new`.
//
// PUT /domains/{domainID}/control/facts/{factType}
func (UnimplementedHandler) DomainPutFactType(ctx context.Context, req *NewFactTypeDefinition, params DomainPutFactTypeParams) (r DomainPutFactTypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainPutVendorSettings implements domainPutVendorSettings operation.
//
// Create or update the vendor settings for a given domain.
//
// PUT /domains/{domainID}/control/vendor/settings
func (UnimplementedHandler) DomainPutVendorSettings(ctx context.Context, req *VendorSettings, params DomainPutVendorSettingsParams) (r DomainPutVendorSettingsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainQueryAccessLog implements domainQueryAccessLog operation.
//
// Query the data access log for this domain. This contains all operations interacting with capsules
// within this domain. Results are returned in reverse chronological order.
//
// GET /domains/{domainID}/log
func (UnimplementedHandler) DomainQueryAccessLog(ctx context.Context, params DomainQueryAccessLogParams) (r DomainQueryAccessLogRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainQueryAccessLogSingleCapsule implements domainQueryAccessLogSingleCapsule operation.
//
// Query the data-plane access log for this capsule. Results are returned in reverse chronological
// order.
//
// GET /domains/{domainID}/capsules/{capsuleID}/log
func (UnimplementedHandler) DomainQueryAccessLogSingleCapsule(ctx context.Context, params DomainQueryAccessLogSingleCapsuleParams) (r DomainQueryAccessLogSingleCapsuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainQueryControlLog implements domainQueryControlLog operation.
//
// Query the domain control-plane audit log. Results are returned in reverse chronological order.
//
// GET /domains/{domainID}/control/log
func (UnimplementedHandler) DomainQueryControlLog(ctx context.Context, params DomainQueryControlLogParams) (r DomainQueryControlLogRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainReadContextFlush implements domainReadContextFlush operation.
//
// Flush the read context cache so that changes to permissions take effect.
//
// POST /domains/{domainID}/control/read-context/{contextName}/flush
func (UnimplementedHandler) DomainReadContextFlush(ctx context.Context, params DomainReadContextFlushParams) (r DomainReadContextFlushRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainRenumberPolicyRules implements domainRenumberPolicyRules operation.
//
// Re-assign rule priority numbers to integer multiples of 10.
//
// POST /domains/{domainID}/control/policy/renumber
func (UnimplementedHandler) DomainRenumberPolicyRules(ctx context.Context, params DomainRenumberPolicyRulesParams) (r DomainRenumberPolicyRulesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainRotateRootEncryptionKeys implements domainRotateRootEncryptionKeys operation.
//
// Collects key encryption keys not encrypted with the current active root encryption key, decrypts
// them with their original root encryption key, and then encrypts them with the active root
// encryption key. This is a batched operation and only 100 keys will be processed in a single call.
// In the response, "has_more" will be true if there are more KEKs that can be rotated. Usually the
// caller will call this endpoint in a loop until has_more is false.
//
// POST /domains/{domainID}/control/keys/rotate
func (UnimplementedHandler) DomainRotateRootEncryptionKeys(ctx context.Context, req *DomainRotateRootEncryptionKeysReq, params DomainRotateRootEncryptionKeysParams) (r DomainRotateRootEncryptionKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainSealCapsule implements domainSealCapsule operation.
//
// Seal this capsule, if it's unsealed. Requires capsule create token.
//
// POST /domains/{domainID}/capsules/{capsuleID}/seal
func (UnimplementedHandler) DomainSealCapsule(ctx context.Context, req *CapsuleSealRequest, params DomainSealCapsuleParams) (r DomainSealCapsuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainSetActiveExternalRootEncryptionKey implements domainSetActiveExternalRootEncryptionKey operation.
//
// This will set which root encryption is active: i.e. is used for new capsules, or is used to
// encrypt KEKs when `/keys/rotate` is called or when new capsules are created.
//
// POST /domains/{domainID}/control/keys/active
func (UnimplementedHandler) DomainSetActiveExternalRootEncryptionKey(ctx context.Context, req *ActiveRootEncryptionKeyID, params DomainSetActiveExternalRootEncryptionKeyParams) (r DomainSetActiveExternalRootEncryptionKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpdateIdentityProviderPrincipal implements domainUpdateIdentityProviderPrincipal operation.
//
// Update the set of capabilities assigned to an identity provider principal. The capabilities must
// exist.
//
// PUT /domains/{domainID}/control/identities/{identityProviderName}/principals/{principalID}
func (UnimplementedHandler) DomainUpdateIdentityProviderPrincipal(ctx context.Context, req *CapabilityList, params DomainUpdateIdentityProviderPrincipalParams) (r DomainUpdateIdentityProviderPrincipalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpdatePeer implements domainUpdatePeer operation.
//
// Create or update the configuration for this peer. Please note, if the configuration already exists,
//
//	it is updated to reflect the values in the request. This will include setting the fields to their
//
// default value if not supplied.
//
// PUT /domains/{domainID}/control/peers/{peerDomainID}
func (UnimplementedHandler) DomainUpdatePeer(ctx context.Context, req *DomainPeerConfig, params DomainUpdatePeerParams) (r DomainUpdatePeerRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpdatePolicyRule implements domainUpdatePolicyRule operation.
//
// Update a domain policy rule.
//
// PUT /domains/{domainID}/control/policy/{ruleID}
func (UnimplementedHandler) DomainUpdatePolicyRule(ctx context.Context, req *NewDomainPolicyRule, params DomainUpdatePolicyRuleParams) (r DomainUpdatePolicyRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpdateReadContextRule implements domainUpdateReadContextRule operation.
//
// Update a read context configuration rule. The rule must already exist.
//
// PUT /domains/{domainID}/control/read-context/{contextName}/config/{ruleID}
func (UnimplementedHandler) DomainUpdateReadContextRule(ctx context.Context, req *NewReadContextConfigRule, params DomainUpdateReadContextRuleParams) (r DomainUpdateReadContextRuleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertCapsuleTags implements domainUpsertCapsuleTags operation.
//
// Upsert capsule-level tags. This is permitted even after a capsule is sealed.
//
// POST /domains/{domainID}/capsules/{capsuleID}/capsule-tags
func (UnimplementedHandler) DomainUpsertCapsuleTags(ctx context.Context, req []Tag, params DomainUpsertCapsuleTagsParams) (r DomainUpsertCapsuleTagsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertFact implements domainUpsertFact operation.
//
// Create a new fact. The fact type must have been previously registered using
// `/control/facts/{factType}`. If an identical fact exists (having the same value for all fields),
// this call is a no-op and returns the same ID.
//
// POST /domains/{domainID}/control/facts/{factType}/new
func (UnimplementedHandler) DomainUpsertFact(ctx context.Context, req *NewFact, params DomainUpsertFactParams) (r DomainUpsertFactRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertIdentityProvider implements domainUpsertIdentityProvider operation.
//
// Create or configure an identity provider.
//
// PUT /domains/{domainID}/control/identities/{identityProviderName}
func (UnimplementedHandler) DomainUpsertIdentityProvider(ctx context.Context, req DomainIdentityProviderDetails, params DomainUpsertIdentityProviderParams) (r DomainUpsertIdentityProviderRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertReadContext implements domainUpsertReadContext operation.
//
// Update or create a read context.
//
// PUT /domains/{domainID}/control/read-context/{contextName}
func (UnimplementedHandler) DomainUpsertReadContext(ctx context.Context, req *AddReadContext, params DomainUpsertReadContextParams) (r DomainUpsertReadContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertSpanTags implements domainUpsertSpanTags operation.
//
// Upsert span tag rollups. This is only permitted when a capsule is not sealed. It requires a
// special "capsule owner" token that is returned by create capsule. Note that the rollup
// calculations must be done on the client side. This method only permits storing the entire rollup,
// not aggregating serverside. This is idempotent.
//
// PUT /domains/{domainID}/capsules/{capsuleID}/span-tags
func (UnimplementedHandler) DomainUpsertSpanTags(ctx context.Context, req *UpsertSpanTagsRequest, params DomainUpsertSpanTagsParams) (r DomainUpsertSpanTagsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertWriteContext implements domainUpsertWriteContext operation.
//
// Create or update an existing write context. If the config is omitted, it will be left as-is
// (existing write contexts) or created as blank (new write contexts).
//
// PUT /domains/{domainID}/control/write-context/{contextName}
func (UnimplementedHandler) DomainUpsertWriteContext(ctx context.Context, req *AddWriteContext, params DomainUpsertWriteContextParams) (r DomainUpsertWriteContextRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DomainUpsertWriteContextConfiguration implements domainUpsertWriteContextConfiguration operation.
//
// Update a write context configuration. The write context must already exist.
//
// PUT /domains/{domainID}/control/write-context/{contextName}/config
func (UnimplementedHandler) DomainUpsertWriteContextConfiguration(ctx context.Context, req *WriteContextConfigInfo, params DomainUpsertWriteContextConfigurationParams) (r DomainUpsertWriteContextConfigurationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StarredDomainAdd implements starredDomainAdd operation.
//
// Adds the domain to the list of starred domains for the user.
//
// PUT /global/starred-domains/{domainID}
func (UnimplementedHandler) StarredDomainAdd(ctx context.Context, req *StarredDomainAddReq, params StarredDomainAddParams) (r StarredDomainAddRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StarredDomainList implements starredDomainList operation.
//
// Returns a list of domains that the user has starred. This is a list of domain IDs, not domain
// names. The user must be authenticated to call this method.
//
// GET /global/starred-domains
func (UnimplementedHandler) StarredDomainList(ctx context.Context) (r StarredDomainListRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StarredDomainRemove implements starredDomainRemove operation.
//
// Removes the domain from the list of starred domains for the user.
//
// DELETE /global/starred-domains/{domainID}
func (UnimplementedHandler) StarredDomainRemove(ctx context.Context, params StarredDomainRemoveParams) (r StarredDomainRemoveRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
